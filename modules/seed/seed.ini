#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for seed-based correlation analysis
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [ "$1" == "INFO" ]
   then
   echo ""
   echo -e "${CYA}SEED${RCL}:"
   echo "This module performs seed-based correlation analyses"
   echo "   given a seed region or set of seed regions. For each"
   echo "   seed region, which may be provided either as a 3D"
   echo "   volume or as coordinates in a library file, 'seed'"
   echo "   computes the pairwise connectivity between each"
   echo "   voxel and the seed region, for instance using the."
   echo "   Pearson correlation coefficient between timeseries"
   echo "   (Biswal et al., 1995)."
   echo ""
   exit 0
fi

################################################################### 
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/seed/seed.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

###################################################################
# The ugly while loop is necessary for the select options to update
# correctly
###################################################################
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""
echo ""
echo -e "Welcome to ${RED}seed-based correlation analysis${RCL} initialisation "
echo "for the XCP Engine."
echo "Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "Seed library: ${sca_lib[${cxt}]}" \
   "Connectivity metric: ${sca_metric[${cxt}]}" \
   "Spatial filter: ${sca_sptf[${cxt}]}" \
   "Spatial smoothing FWHM: ${sca_smo[${cxt}]} mm" \
   "Re-run: ${sca_rerun[${cxt}]}" \
   "Delete intermediate files: ${sca_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
      
   ################################################################
   # USER: Seed library
   ################################################################
   1)
      xst2=0
      [[ -z ${sca_lib[${cxt}]} ]] \
         && buffer0=${XCPEDIR}/seeds \
         || buffer0=${sca_lib[${cxt}]}
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the PATH to the coordinates library (.sclib) "
         echo "that you wish to use for seed-based correlation analysis."
         read -p "" -e -i ${buffer0} buffer
         ext=$(echo "$buffer"|rev|cut -d"." -f1|rev)
         if [[ -e "$buffer" ]] \
            && [[ "${ext}" == "sclib" ]]
            then
            sca_lib[${cxt}]=$buffer
            echo "Coordinates library selected:"
            echo ${sca_lib[${cxt}]}; echo ""
            xst2=1
         elif [[ "${buffer}" == "NEW" ]]
            then
            xst2=0
            while [[ "$xst2" == "0" ]]
               do
               echo "Enter a name for the new parcellation library that you "
               echo "wish to create (do NOT include the .sclib extension):"
               [[ ! -z ${analysis} ]] && buffer=$analysis || buffer=roi
               read -p "" -e -i $buffer sclib
               [[ -z $(echo ${sclib}|grep -i '/') ]] && sclib=${XCPEDIR}/seeds/${sclib}
               if [[ -e "${sclib}.sclib" ]] || [[ -e ${sclib} ]]
                  then
                  echo "Library $sclib already exists. Overwrite?"
                  select option in \
                     "Yes" \
                     "Edit this library instead" \
                     "No"
                     do
                     case $REPLY in
                     1)
                        ${XCPEDIR}/utils/scliber \
                           -o ${sclib}.sclib \
                           -s ${template}
                        [[ -e ${sclib}.sclib ]] && sca_lib[${cxt}]=${sclib}.sclib
                        xst2=1
                        break
                        ;;
                     2)
                        ${XCPEDIR}/utils/scliber \
                           -o ${sclib}.sclib \
                           -s ${template} \
                           -l ${sclib}.sclib
                        [[ -e ${sclib}.sclib ]] && sca_lib[${cxt}]=${sclib}.sclib
                        xst2=1
                        break
                        ;;
                     3)
                        break
                        ;;
                     esac
                  done
               else
                  ${XCPEDIR}/utils/scliber \
                     -o ${sclib}.sclib \
                     -s ${template}
                  [[ -e ${sclib} ]] && sca_lib[${cxt}]=${sclib}.sclib
                  xst2=1
               fi
            done
            break 2
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo "The input must be either be a path to a parcellation "
            echo -e "library (.parc) file or the string ${RED}NEW${RCL}."
            echo ""
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      pars="${pars} ${curlib}"
      break
      ;;
      
   ################################################################
   # USER: Connectivity metric
   ################################################################
   2)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the CONNECTIVITY METRIC that you wish"
      echo "to use:"
      select option in \
         "Pearson correlation coefficient"
         do
         case $REPLY in
         ##########################################################
         # USER: Connectivity metric
         #        -> Pearson correlation coefficient
         ##########################################################
         1)
            sca_metric[${cxt}]=corrcoef
            echo "Connectivity metric: ${sca_metric[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Connectivity metric
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Connectivity metric
         #        -> HELP
         ##########################################################
         *)
            echo "You have no choice. (At least not yet.)"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Spatial filter
   ################################################################
   3)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the SPATIAL FILTER. Spatial filtering"
      echo "is applied after timeseries extraction but"
      echo "prior to connectivity analysis."
      echo "(The spatial filter will be applied only to"
      echo " the image used for correlation analysis. It"
      echo " will not persist in future processing steps."
      echo " If you want a persistent spatial filter, use"
      echo " the 'prestats' module instead.)"
      select option in \
         "Gaussian" \
         "SUSAN" \
         "Uniform smoothness" \
         "None"
         do
         case $REPLY in
         ##########################################################
         # USER: Spatial filter
         #        -> Gaussian
         ##########################################################
         1)
            sca_sptf[${cxt}]="gaussian"
            echo "Spatial filter: ${sca_sptf[${cxt}]}"
            break
            ;;
         2)
         ##########################################################
         # USER: Spatial filter
         #        -> SUSAN
         ##########################################################
            sca_sptf[${cxt}]="susan"
            echo "Spatial filter: ${sca_sptf[${cxt}]}"
            break
            ;;
         3)
         ##########################################################
         # USER: Spatial filter
         #        -> Uniform smoothness
         ##########################################################
            sca_sptf[${cxt}]="uniform"
            echo "Spatial filter: ${sca_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> None
         ##########################################################
         4)
            sca_sptf[${cxt}]="none"
            echo "Spatial filter: ${sca_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "* ${RED}Gaussian ${CYA}smoothing applies the same Gaussian "
            echo -e "  smoothing kernel across the entire volume.${RCL}"
            echo -e "* ${RED}SUSAN${CYA}-based smoothing restricts mixing of signals "
            echo "  from disparate tissue classes (Smith and Brady, "
            echo -e "  1997).${RCL}"
            echo -e "* ${RED}Uniform ${CYA}smoothing applies smoothing to all voxels "
            echo "  until the smoothness computed at every voxel "
            echo -e "  attains the target value.${RCL}"
            echo -e "* ${RED}Uniform ${CYA}smoothing may be used as a compensatory "
            echo "  mechanism to reduce the effects of subject motion "
            echo "  on the final processed image (Scheinost et al., "
            echo -e "  2014).${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Spatial smoothing FWHM
   ################################################################
   4)
      xst2=0
      while [ "$xst2" == "0" ]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         if [[ "${sca_sptf[${cxt}]}" == "none" ]]
         then
            echo -e "${RED}WARNING${RCL}:spatial filtering is currently disabled."
            echo "Setting the FWHM for spatial smoothing will"
            echo "have no effect unless the spatial filter is"
            echo "enabled."
         fi
         read -p "Specify the FWHM for SPATIAL SMOOTHING, in mm: "\
            -e -i ${sca_smo[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            sca_smo[${cxt}]=$buffer
            echo "Spatial filter: ${sca_smo[${cxt}]} mm"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Endemic noise, for instance due to physiological"
            echo "signals or scanner activity, can introduce spurious or"
            echo "artefactual results in single voxels. The effects of"
            echo "noise-related artefacts can be mitigated by spatially"
            echo "filtering the data, thus dramatically increasing the"
            echo "signal-to-noise ratio. However, spatial smoothing is"
            echo "not without its costs: it effectively reduces"
            echo "volumetric resolution by blurring signals from adjacent"
            echo -e "voxels.${RCL}"
            echo ""
            echo "Enter a non-negative number. Enter 0 for no filter."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Re-run
   ################################################################
   5)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            sca_rerun[${cxt}]="Y"
            echo "Re-run: ${sca_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            sca_rerun[${cxt}]="N"
            echo "Re-run: ${sca_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   6)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of INTERMEDIATE"
      echo "steps in the coregistration algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Delete intermediate files
         #        -> Yes
         ##########################################################
         1)
            sca_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${sca_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> No
         ##########################################################
         2)
            sca_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${sca_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset default parameters
   ################################################################
   7)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      seeds=""
      sca_lib[${cxt}]=""
      source ${XCPEDIR}/modules/seed/seed.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   8)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      ;;
      
   esac
done
done

###################################################################
# write parameters to design file
###################################################################
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} SEED" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "sca_lib[${cxt}]=${sca_lib[${cxt}]}" >> $design
echo "sca_metric[${cxt}]=${sca_metric[${cxt}]}" >> $design
echo "sca_sptf[${cxt}]=${sca_sptf[${cxt}]}" >> $design
echo "sca_smo[${cxt}]=${sca_smo[${cxt}]}" >> $design
echo "sca_rerun[${cxt}]=${sca_rerun[${cxt}]}" >> $design
echo "sca_cleanup[${cxt}]=${sca_cleanup[${cxt}]}" >> $design


