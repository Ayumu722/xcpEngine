#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for network analysis
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]]
   then
   echo ""
   echo -e "${CYA}ASL${RCL}:"
   echo "This module performs voxelwise and RoI-wise quantification "
   echo "   of cerebral blood flow. The image input to the pipeline "
   echo "   here should be acquired using a sequence that gauges "
   echo "   cerebral blood flow -- for instance, arterial spin "
   echo "   labelling. The ASL module is dependent upon scripts "
   echo "   written by Dr. Mark Elliott (and edited by Adon Rosen) "
   echo "   at the University of Pennsylvania: dicom_dump.sh and "
   echo "   pcasl_quant_v7_afgr.sh. These scripts and dependencies "
   echo "   may be bundled as third-party software in the future "
   echo "   pending resolution of licensing issues."
   echo ""
   echo "   Code for the ASL module of the XCP Engine was "
   echo "   contributed by Adon Rosen at the Brain Behavior Lab."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/asl/asl.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design




###################################################################
# The ugly while loop is necessary for the select options to update
# correctly
###################################################################
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""
echo -e "Welcome to ${RED}ASL${RCL} analysis initialisation for the XCP Engine."
echo "Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."


select option in \
   "Parcellation library: ${asl_roi[${cxt}]}" \
   "DICOM XML: ${asl_xml[${cxt}]}" \
   "CBF quantification script: ${asl_QuantScript[${cxt}]}" \
   "Grey matter mask: ${asl_gm_path[${cxt}]} at ${asl_gm_val[${cxt}]}" \
   "Re-run: ${asl_rerun[${cxt}]}" \
   "Delete intermediate files: ${asl_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
   
   
   ################################################################
   # USER: Parcellation library
   ################################################################
   1)
      xst2=0
      [[ -z ${asl_roi[${cxt}]} ]] \
         && buffer0=${XCPEDIR}/seeds \
         || buffer0=${asl_roi[${cxt}]}
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the PATH to the parcellation library "
         echo "that you wish to use for ROI-wise quantification"
         echo "of perfusion."
         echo ""
         echo "To create a new parcellation library, enter the"
         echo -e "string ${RED}NEW${RCL}."; echo ""
         read -p "" -e -i ${buffer0} buffer
         ext=$(echo "$buffer"|cut -d"." -f1 --complement)
         if [[ -e "$buffer" ]] \
            && [[ "${ext}" == "parc" ]]
            then
            asl_roi[${cxt}]=$buffer
            echo "Parcellation library selected:"
            echo ${asl_roi[${cxt}]}; echo ""
            xst2=1
         elif [[ "${buffer}" == "NEW" ]]
            then
            xst2=0
            while [[ "$xst2" == "0" ]]
               do
               echo "Enter a name for the new parcellation library that you "
               echo "wish to create (do NOT include the .parc extension):"
               [[ ! -z ${analysis} ]] && buffer=$analysis || buffer=roi
               read -p "" -e -i $buffer parc
               [[ -z $(echo ${parc}|grep -i '/') ]] && parc=${XCPEDIR}/seeds/${parc}
               if [[ -e "${parc}.parc" ]] || [[ -e ${parc} ]]
                  then
                  echo "Library $parc already exists. Overwrite?"
                  select option in \
                     "Yes" \
                     "Edit this library instead" \
                     "No"
                     do
                     case $REPLY in
                     1)
                        ${XCPEDIR}/utils/parcliber \
                           -o ${parc}.parc \
                           -s ${xsubj}
                        [[ -e ${parc} ]] && asl_roi[${cxt}]=${parc}.parc
                        xst2=1
                        break
                        ;;
                     2)
                        ${XCPEDIR}/utils/parcliber \
                           -o ${parc}.parc \
                           -s ${xsubj} \
                           -l ${parc}.parc
                        [[ -e ${parc} ]] && asl_roi[${cxt}]=${parc}.parc
                        xst2=1
                        break
                        ;;
                     3)
                        break
                        ;;
                     esac
                  done
               else
                  ${XCPEDIR}/utils/parcliber \
                     -o ${parc}.parc \
                     -s ${xsubj}
                  [[ -e ${parc} ]] && asl_roi[${cxt}]=${parc}.parc
                  xst2=1
               fi
            done
            break 2
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo "The input must be either be a path to a parcellation "
            echo -e "library (.parc) file or the string ${RED}NEW${RCL}."
            echo ""
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      pars="${pars} ${curlib}"
      break
      ;;
   
   ################################################################
   # USER: Example DICOM
   ################################################################
   2)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the path to an XML file containing DICOM header "
         echo "information for subject"
         echo "${xsubj}"
         echo ""
         read -p "" -e -i ${asl_xml[${cxt}]} buffer
         dcmTest=$(echo $buffer|cut -d"." -f1 --complement|grep -i "xml")
         if [[ -n ${dcmTest} ]]
            then
            asl_xml[${cxt}]=${buffer}
            echo "XML: ${asl_xml[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "The ASL module uses the example DICOM to obtain "
            echo "the T1 relaxation time for the ASL sequence, "
            echo "as well as information about which volumes are "
            echo "spin-tagged; this information is used in the "
            echo "quantification process."
            echo -e "${RCL}"
            echo "Enter a path to an XML file (.xml) obtained using "
            echo "the information in the DICOM header for the example "
            echo "subject."
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   
   ################################################################
   # USER: XML preparation script
   ################################################################
#   5)
#      xst2=0
#      while [[ "$xst2" == "0" ]]
#         do
#         echo ""; echo ""
#         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
#         echo ""
#         echo "Specify the path to the XML preparation script. "
#         echo "Usually, this is called dicom_dump."
#         echo ""
#         read -p "" -e -i ${asl_xmlPrepScript[${cxt}]} buffer
#         if [[ -e ${buffer} ]]
#            then
#            asl_xmlPrepScript[${cxt}]=${buffer}
#            echo "Example DICOM: ${asl_xmlPrepScript[${cxt}]}"
#            xst2=1
#         elif [[ "${buffer}" == "m" ]]
#            then
#            break 2
#         else
#            echo -e "${CYA}"
#            echo "The XML preparation script parses fields in the "
#            echo "DICOM header and prints relevant information to "
#            echo "an XML file that is later used in the cerebral "
#            echo "blood flow quantification step."
#            echo -e "${RCL}"
#            echo "This script is usually called dicom_dump.sh"
#            echo ""
#            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
#         fi
#      done
#      break
#      ;;
   
   ################################################################
   # USER: CBF quantification script
   ################################################################
   3)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the path to the CBF quantification script. "
         echo "Usually, the name of this script is some variant of "
         echo "pcasl_quant_v7."
         echo ""
         read -p "" -e -i ${asl_QuantScript[${cxt}]} buffer
         if [[ -e ${buffer} ]]
            then
            asl_QuantScript[${cxt}]=${buffer}
            echo "Example DICOM: ${asl_QuantScript[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "The CBF quantification script uses the information in "
            echo "the acquired sequence to determine the level of blood "
            echo "perfusion in each voxel."
            echo -e "${RCL}"
            echo "This script is usually called pcasl_quant_v7_afgr.sh"
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Grey matter mask
   ################################################################
   4)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Please provide a path to an image containing a "
      echo "segmentation of the subject's structural image into "
      echo "tissue classes, including grey matter."
      echo ""
      echo "Subject ((${xsubj}))"
      #############################################################
      # USER: Grey matter mask
      #        ...segmentation
      #############################################################
      xst2=0
      if [[ -z "$segdir" ]]
         then segdir=${xants}
      fi
      if [[ $(imtest ${asl_gm_path[${cxt}]}) != "1" ]]
         then
         buffer=$segdir
      else
         buffer=${asl_gm_path[${cxt}]}
      fi
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Select the path to a volume containing GREY MATTER SEGMENTATION"
         echo "for subject ((${xsubj})): "
         read -p ""\
            -e -i $buffer buffer
         if [[ $(imtest $buffer) == "1" ]]
            then
            segdir=$( ls -d1 ${buffer} |rev|cut -d"/" -f1 --complement|rev)
            asl_gm_path[${cxt}]=$buffer
            echo "Path to GM segmentation: ${asl_gm_path[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "One metric of perfusion image quality is obtainable "
            echo "by identifying negative-valued voxels in the perfusion "
            echo "image grey matter."
            echo -e "${RCL}"
            echo "The input must be a path to an image."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      #############################################################
      # USER: Grey matter mask
      #        -> Yes
      #        ...value in segmentation
      #############################################################
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the VALUE(s) corresponding to grey matter in"
         echo "the segmentation. If all nonzero voxels correspond to"
         echo "grey matter, enter ALL. To preview the image, enter"
         echo "VIEW."
         read -p ""\
            -e -i ${asl_gm_val[${cxt}]} buffer
         element1=$(echo ${buffer}|cut -d"," -f1| cut -d":" -f1)
         if [[ $buffer == "ALL" ]]
            then
            asl_gm_val[${cxt}]=all
            echo "All nonzero voxels in the target image correspond"
            echo "to grey matter. The image will only be binarised"
            echo "prior to timeseries extraction."
            xst2=1
         elif [[ $buffer == "VIEW" ]]
            then
            echo "Opening target image for viewing..."
            fslview ${asl_gm_path[${cxt}]} &
         elif [[ $element1 =~ $NUM ]]
            then
            asl_gm_val[${cxt}]=$buffer
            echo "Grey matter voxel value set to ${asl_gm_val[${cxt}]}."
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}In some segmentations, such as the one output by "
            echo "ANTs Cortical Thickness, each tissue class is assigned "
            echo "a different intensity value in the segmentation volume. "
            echo "For instance, 1 might correspond to CSF, 2 to cortical "
            echo "grey matter, 3 to white matter, etc. If your "
            echo "segmentation is strictly a binary-valued white matter "
            echo -e "mask, then enter ${RED}ALL${CYA}. If you are not sure, you can view "
            echo -e "the segmentation by entering ${RED}VIEW${CYA}. To enter a "
            echo "range of values, use the colon (:) operator; to enter "
            echo "multiple values, use the comma (,) operator. For instance, "
            echo "1:5,9 would indicate all values in the interval [1,5] "
            echo -e "as well as 9${RCL}."
            echo ""
            echo "The input must either be numeric or one of the"
            echo "case-sensitive strings ALL or VIEW."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Re-run
   ################################################################
   5)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            asl_rerun[${cxt}]="Y"
            echo "Re-run: ${asl_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            asl_rerun[${cxt}]="N"
            echo "Re-run: ${asl_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   6)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of"
      echo "INTERMEDIATE steps in the ASL algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Delete intermediate files
         #        -> Yes
         ##########################################################
         1)
            asl_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${asl_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> No
         ##########################################################
         2)
            asl_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${asl_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset default parameters
   ################################################################
   7)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/asl/asl.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   8)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      ;;
      
   esac
done

done

###################################################################
# write parameters to design file
###################################################################

echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} ASL" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "asl_roi[${cxt}]=${asl_roi[${cxt}]}" >> $design
echo $(${XCPEDIR}/utils/genpath asl_xml[${cxt}]=${asl_xml[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo "asl_xmlPrepScript[${cxt}]=${asl_xmlPrepScript[${cxt}]}" >> $design
echo "asl_QuantScript[${cxt}]=${asl_QuantScript[${cxt}]}" >> $design
echo $(${XCPEDIR}/utils/genpath asl_gm_path[${cxt}]=${asl_gm_path[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo "asl_gm_val[${cxt}]=${asl_gm_val[${cxt}]}" >> $design
echo "asl_rerun[${cxt}]=${asl_rerun[${cxt}]}" >> $design
echo "asl_cleanup[${cxt}]=${asl_cleanup[${cxt}]}" >> $design
