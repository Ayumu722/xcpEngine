#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for dico
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]] ||  [[ "$1" == "info" ]]
   then
   echo ""
   echo -e "${CYA}DICO${RCL}:"
   echo "This module corrects for distortions induced in the "
   echo "   acquired image by the applied magnetic field. Correction "
   echo "   for distortions will improve the quality of alignment "
   echo "   between images collected using different sequences (e.g., "
   echo "   during coregistration of structural and functional "
   echo "   images). This module also computes basic image quality "
   echo "   metrics."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/dico/dico.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

###################################################################
# The ugly while loop is necessary for the select options to update
# correctly
###################################################################
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""; echo ""
echo -e "Welcome to ${RED}dico${RCL} initialisation for the XCP Engine."
echo "Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "Example DICOM: ${dico_exampleDicom[${cxt}]}" \
   "Magnitude map: ${dico_magImage[${cxt}]}" \
   "RPS map: ${dico_rpsImage[${cxt}]}" \
   "Distortion correction script: ${dico_script[${cxt}]}" \
   "Intensity clipped at: ${dico_clip[${cxt}]}" \
   "Re-run: ${dico_rerun[${cxt}]}" \
   "Delete intermediate files: ${dico_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
   
   ################################################################
   # USER: Example DICOM
   ################################################################
   1)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the path to an example DICOM for the current "
         echo "sequence."
         echo ""
         read -p "" -e -i ${dico_exampleDicom[${cxt}]} buffer
         dcmTest=$(echo $buffer|cut -d"." -f1 --complement|grep -i "dcm")
         if [[ -n ${dcmTest} ]]
            then
            dico_exampleDicom[${cxt}]=${buffer}
            echo "Example DICOM: ${dico_exampleDicom[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo -e "${RCL}"
            echo "Enter a path to a DICOM (.dcm) obtained for the "
            echo "sequence to be analysed."
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   
   ################################################################
   # USER: Magnitude image
   ################################################################
   2)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the path to a B0-derived magnitude map for "
         echo "${xsubj}"
         echo ""
         read -p "" -e -i ${dico_magImage[${cxt}]} buffer
         if [[ $(imtest ${buffer}) == 1 ]]
            then
            dico_magImage[${cxt}]=${buffer}
            echo "Magnitude map: ${dico_magImage[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo -e "${RCL}"
            echo "The input must be a path to an image."
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   
   ################################################################
   # USER: RPS image
   ################################################################
   3)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the path to a B0-derived RPS map for "
         echo "${xsubj}"
         echo ""
         read -p "" -e -i ${dico_rpsImage[${cxt}]} buffer
         if [[ $(imtest ${buffer}) == 1 ]]
            then
            dico_rpsImage[${cxt}]=${buffer}
            echo "RPS map: ${dico_rpsImage[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo -e "${RCL}"
            echo "The input must be a path to an image."
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   
   ################################################################
   # USER: Distortion correction script
   ################################################################
   4)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the path to the distortion correction script. "
         echo "Usually, this is called dico_correct."
         echo ""
         read -p "" -e -i ${dico_script[${cxt}]} buffer
         if [[ -e ${buffer} ]]
            then
            dico_script[${cxt}]=${buffer}
            echo "Example DICOM: ${dico_script[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "The distortion correction script uses ."
            echo -e "${RCL}"
            echo "This script is usually called dico_correct_v*.sh"
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   
   ################################################################
   # USER: Intensity clipped at
   ################################################################
   5)
      xst2=0
      buffer=${dico_clip[${cxt}]}
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the maximal signal INTENSITY value "
         echo "registered by the scanner such that values "
         echo "exceeding this intensity are CLIPPED."
         read -p ""\
            -e -i $buffer buffer
         if [[ ${buffer} =~ ${NUM} ]]
            then
            dico_clip[${cxt}]=$buffer
            echo "Quality cutoffs: ${dico_clip[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "When the temporal signal-to-noise ratio is computed, "
            echo "  it may be skewed by the presence of 'clipped' values "
            echo "  in the data. If the intensity of signal in a voxel "
            echo "  exceeds the maximal intensity that can be registered "
            echo "  by the scanner, it is artefactually flattened to that "
            echo "  maximum. This option allows such 'clipped' voxels to "
            echo "  be flagged."
            echo -e "${RCL}"
            echo "Negative values are interpreted as instructions to "
            echo "  skip flagging of clipped values during the dico "
            echo "  module. "
            echo -e "${RCL}"
            echo "Enter a numeric value."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Re-run
   ################################################################
   6)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            dico_rerun[${cxt}]="Y"
            echo "Re-run: ${dico_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            dico_rerun[${cxt}]="N"
            echo "Re-run: ${dico_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   7)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of"
      echo "INTERMEDIATE steps in the dico algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Delete intermediate files
         #        -> Yes
         ##########################################################
         1)
            dico_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${dico_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> No
         ##########################################################
         2)
            dico_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${dico_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset default parameters
   ################################################################
   8)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/dico/dico.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   9)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      $0 INFO
      ;;
   
   esac
done
done

###################################################################
# write parameters to design file
###################################################################
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} DICO" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo $(${XCPEDIR}/utils/genpath "dico_exampleDicom[${cxt}]=${dico_exampleDicom[${cxt}]}" $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo $(${XCPEDIR}/utils/genpath "dico_magImage[${cxt}]=${dico_magImage[${cxt}]}" $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo $(${XCPEDIR}/utils/genpath "dico_rpsImage[${cxt}]=${dico_rpsImage[${cxt}]}" $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo "dico_script[${cxt}]=${dico_script[${cxt}]}" >> $design
echo "dico_clip[${cxt}]=${dico_clip[${cxt}]}" >> $design
echo "dico_rerun[${cxt}]=${dico_rerun[${cxt}]}" >> $design
echo "dico_cleanup[${cxt}]=${dico_cleanup[${cxt}]}" >> $design
