#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for normalisation
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [ "$1" == "INFO" ]
   then
   echo ""
   echo -e "${CYA}NORM${RCL}:"
   echo "This module moves 4D timeseries from acquisition space"
   echo "into a standard space. It is compatible with ANTs, DRAMMS,"
   echo "and FNIRT. Before running normalisation, you must run"
   echo "coregistration to compute a transformation from the"
   echo "subject's functional image to the subject's T1-weighted"
   echo "image. It may also be necessary to compute a warp from the"
   echo "subject's T1-weighted image to a template in the target"
   echo "standard space."
   echo ""
   echo "While this functionality is not planned for the rspipe"
   echo "engine, antsCorticalThickness.sh computes all required"
   echo "inputs, as does Stathis Gennatas's strucpipe."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/norm/norm.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

################################################################### 
# override everything if the XFM option is specified
###################################################################
echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""; echo ""
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo "Settings for module NORM have been initialised automatically!"
echo "Check the design file to ensure that values are correct."

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} NORM" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "norm_prog[${cxt}]=ants" >> $design
if [[ ! -z ${xfm_warp} ]]
   then
   echo norm_warp[${cxt}]=$(grep -i "^xfm_warp=" $design|tail -1|cut -d"=" -f2) >> $design
fi
if [[ ! -z ${xfm_affine} ]]
   then
   echo norm_affine[${cxt}]=$(grep -i "^xfm_affine=" $design|tail -1|cut -d"=" -f2) >> $design
fi
if [[ ! -z ${xfm_rigid} ]]
   then
   echo norm_rigid[${cxt}]=$(grep -i "^xfm_rigid=" $design|tail -1|cut -d"=" -f2) >> $design
fi
if [[ ! -z ${xfm_resample} ]]
   then
   echo norm_resample[${cxt}]=$(grep -i "^xfm_resample=" $design|tail -1|cut -d"=" -f2) >> $design
fi
echo "norm_template[${cxt}]=${template}" >> $design
echo "norm_rerun[${cxt}]=${norm_rerun[${cxt}]}" >> $design
echo "norm_cleanup[${cxt}]=${norm_cleanup[${cxt}]}" >> $design

