#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for coregistration
###################################################################

###################################################################
# global constants
#
# NUMQC is the number of quality control variables expected,
# minus 1
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly NUMQC=1
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]] ||  [[ "$1" == "info" ]]
   then
   echo ""
   echo -e "${CYA}COREG${RCL}:"
   echo "This module computes an affine transformation from a"
   echo "   subject's BOLD-weighted EPI functional image to the"
   echo "   same subject's T1-weighted MPRAGE structural scan. It"
   echo "   does not apply the transformation; all transformations"
   echo "   are applied in a single step by the 'norm' module in"
   echo "   order to reduce computational requirements and"
   echo "   minimise the number of interpolation steps."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/coreg/coreg.def $cxt
###################################################################
# If the ANTsCT directory is specified, then automatically fill
# segmentation information from the ANTsCT directory.
#
# Also assume that BBR is the desired cost function in this case.
# Do this before loading the template design file, since this
# should not override the template design file.
###################################################################
if [[ ! -z "${xants}" ]]
   then
   coreg_seg[${cxt}]=$(\ls ${xants}/*BrainSegmentation.*)
   coreg_wm[${cxt}]=3
   coreg_cfunc[${cxt}]=bbr
fi
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

################################################################### 
# The ugly while loop is necessary for the select options to update
# correctly
################################################################### 
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""; echo ""
echo -e "Welcome to affine ${RED}coregistration${RCL} initialisation for the"
echo "XCP Engine. The coregistration module computes the"
echo "transformation; the normalisation module is required to"
echo "move timeseries to a standardised space."
echo "Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "Cost function: ${coreg_cfunc[${cxt}]}" \
   "Cost function weights: [ref]${coreg_refwt[${cxt}]};[in]${coreg_inwt[${cxt}]}" \
   "Quality cutoffs: ${coreg_qacut[${cxt}]}" \
   "Re-run: ${coreg_rerun[${cxt}]}" \
   "Delete intermediate files: ${coreg_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
   
   ################################################################
   # USER: Cost function
   ################################################################
   1)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the COST FUNCTION for affine coregistration."
      select option in \
         "Mutual information" \
         "Correlation ratio" \
         "Normalised mutual information" \
         "Label difference" \
         "Boundary-based registration"
         do
         case $REPLY in
         ##########################################################
         # USER: Cost function
         #        -> Mutual information
         ##########################################################
         1)
            coreg_cfunc[${cxt}]=mutualinfo
            echo "Cost function: ${coreg_cfunc[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Cost function
         #        -> Correlation ratio
         ##########################################################
         2)
            coreg_cfunc[${cxt}]=corratio
            echo "Cost function: ${coreg_cfunc[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Cost function
         #        -> Normalised mutual information
         ##########################################################
         3)
            coreg_cfunc[${cxt}]=normmi
            echo "Cost function: ${coreg_cfunc[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Cost function
         #        -> Label difference
         ##########################################################
         4)
            coreg_cfunc[${cxt}]=labeldiff
            echo "Cost function: ${coreg_cfunc[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Cost function
         #        -> BBR
         ##########################################################
         5)
            xst2=0
            buffer=${coreg_seg[${cxt}]}
            #######################################################
            # USER: Cost function
            #        -> BBR
            #        ...white matter segmentation
            #######################################################
            while [[ "$xst2" == "0" ]]
               do
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               echo "Select the path to a volume containing WHITE MATTER SEGMENTATION"
               echo "for subject ((${xsubj})): "
               read -p ""\
                  -e -i $buffer buffer
               if [[ $(imtest $buffer) == "1" ]]
                  then
                  coreg_seg[${cxt}]=$buffer
                  echo "Path to WM segmentation: ${coreg_seg[${cxt}]}"
                  xst2=1
               elif [[ "${buffer}" == "m" ]]
                  then
                  break 3
               else
                  echo -e "${CYA}Boundary-based registration (Greve and Fischl, 2009) uses the "
                  echo "intensity differences between grey and white matter (present "
                  echo "in EP images) to align convolutions in the white-matter "
                  echo "surface of the structural reference image to analogous "
                  echo "convolutions in the white-matter surface of the input "
                  echo "(echoplanar) image. This approach requires a known "
                  echo "segmentation of the structural image into tissue classes. "
                  echo "If you provided an output directory from the ANTsCT routine, "
                  echo -e "then a segmentation will automatically be provided.${RCL}"
                  echo ""
                  echo "The input must be a path to an image."
                  echo -e ""
                  echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
               fi
            done
            #######################################################
            # USER: Cost function
            #        -> BBR
            #        ...value of WM in segmentation
            #######################################################
            xst2=0
            while [[ "$xst2" == "0" ]]
               do
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               echo "Specify the value(s) corresponding to white matter in"
               echo "the segmentation. If all nonzero voxels correspond to"
               echo "white matter, enter ALL. To preview the image, enter"
               echo "VIEW."
               read -p ""\
                  -e -i ${coreg_wm[${cxt}]} buffer
               element1=$(echo ${buffer}|cut -d"," -f1| cut -d":" -f1)
               if [[ $buffer == "ALL" ]]
                  then
                  coreg_wm[${cxt}]=all
                  echo "All nonzero voxels in the target image correspond"
                  echo "to white matter. The image will only be binarised"
                  echo "prior to affine coregistration."
                  xst2=1
               ####################################################
               # USER: Cost function
               #        -> BBR
               #        ...value of WM in segmentation
               #        -> open segmentation for viewing
               ####################################################
               elif [[ $buffer == "VIEW" ]]
                  then
                  echo "Opening target image for viewing..."
                  fslview ${coreg_seg[${cxt}]} &
               elif [[ $element1 =~ $NUM ]]
                  then
                  coreg_wm[${cxt}]=$buffer
                  echo "White matter voxel value set to ${coreg_wm[${cxt}]}."
                  echo "Prior to registration, a binary mask consisting only"
                  echo "of voxels with this value will be generated as a"
                  echo "reference."
                  xst2=1
               elif [[ "${buffer}" == "m" ]]
                  then
                  break 2
               else
                  echo -e "${CYA}In some segmentations, such as the one output by "
                  echo "ANTs Cortical Thickness, each tissue class is assigned "
                  echo "a different intensity value in the segmentation volume. "
                  echo "For instance, 1 might correspond to CSF, 2 to cortical "
                  echo "grey matter, 3 to white matter, etc. If your "
                  echo "segmentation is strictly a binary-valued white matter "
                  echo -e "mask, then enter ${RED}ALL${CYA}. If you are not sure, you can view "
                  echo -e "the segmentation by entering ${RED}VIEW${CYA}. To enter a "
                  echo "range of values, use the colon (:) operator; to enter "
                  echo "multiple values, use the comma (,) operator. For instance, "
                  echo "1:5,9 would indicate all values in the interval [1,5] "
                  echo -e "as well as 9${RCL}."
                  echo ""
                  echo "The input must either be numeric or one of the"
                  echo "case-sensitive strings ALL or VIEW."
                  echo -e ""
                  echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
               fi
            done
            coreg_cfunc[${cxt}]=bbr
            echo "Cost function: ${coreg_cfunc[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Cost function
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Cost function
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}The cost function that you specify determines the "
            echo "algorithm that will ultimately be used to compute "
            echo "the coregistration. The alignment of the input image "
            echo "to the target is performed in such a manner as to "
            echo "maximise some value related to the cost function."
            echo "What does label difference mean? Only the folks at "
            echo -e "FSL know for sure.${RCL}"
            echo ""
            echo "Please select a valid option: [1|2|3|4|5]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Cost function weights
   ################################################################
   2)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "What type of COST FUNCTION WEIGHTS do you wish to use in"
      echo "affine coregistration?"
      select option in \
         "Target (native structural) space" \
         "Input (native BOLD/analyte) space" \
         "Both" \
         "None"
         do
         case $REPLY in
         ##########################################################
         # USER: Cost function weights
         #        -> Target (native structural) space
         ##########################################################
         1)
            [[ ${coreg_refwt[${cxt}]} == NULL ]] && coreg_refwt[${cxt}]=$(pwd)
            coreg_inwt[${cxt}]=NULL
            break
            ;;
         ##########################################################
         # USER: Cost function weights
         #        -> Input (native BOLD/analyte) space
         ##########################################################
         2)
            coreg_refwt[${cxt}]=NULL
            [[ ${coreg_inwt[${cxt}]} == NULL ]] && coreg_inwt[${cxt}]=$(pwd)
            break
            ;;
         ##########################################################
         # USER: Cost function weights
         #        -> Both
         ##########################################################
         3)
            [[ ${coreg_refwt[${cxt}]} == NULL ]] && coreg_refwt[${cxt}]=$(pwd)
            [[ ${coreg_inwt[${cxt}]} == NULL ]] && coreg_inwt[${cxt}]=$(pwd)
            break
            ;;
         ##########################################################
         # USER: Cost function weights
         #        -> None
         ##########################################################
         4)
            coreg_inwt[${cxt}]=NULL
            coreg_refwt[${cxt}]=NULL
            break
            ;;
         ##########################################################
         # USER: Cost function weights
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Cost function weights
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}A volume containing cost function weights can "
            echo "be used to set the relative importance of different "
            echo "voxels or brain regions in computing an optimal "
            echo "coregistration. For instance, weighting voxels in "
            echo "the ventricular region highly could promote a "
            echo "coregistration solution that optimises alignment of "
            echo "the ventricular boundaries of input and reference "
            echo "volumes. You may use weights in the input space, "
            echo "weights in the reference space, or both if you "
            echo -e "elect to use weights. ${RCL}"
            echo ""
            echo "Please select a valid option: [1|2|3|4]"
            ;;
         esac
      done
      #############################################################
      # USER: Cost function weights
      #        -> Target OR Both
      #        ...path to volume specifying voxelwise weights
      #############################################################
      xst2=0
      buffer=${coreg_refwt[${cxt}]}
      while [[ "$xst2" == "0" ]] && [[ ${buffer} != NULL ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Select the path to a volume containing WEIGHTS for the COST "
         echo "FUNCTION in TARGET (structural) space for subject"
         echo "((${xsubj})): "
         read -p ""\
            -e -i $buffer buffer
         if [[ $(imtest $buffer) == "1" ]]
            then
            coreg_refwt[${cxt}]=$buffer
            echo "Path to cost function weights: ${coreg_refwt[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            coreg_refwt[${cxt}]=NULL
            break 2
         else
            echo -e "${CYA}A volume containing cost function weights can "
            echo "be used to set the relative importance of different "
            echo "voxels or brain regions in computing an optimal "
            echo "coregistration. For instance, weighting voxels in "
            echo "the ventricular region highly could promote a "
            echo "coregistration solution that optimises alignment of "
            echo "the ventricular boundaries of input and reference "
            echo -e "volumes.${RCL}"
            echo ""
            echo "The input must be a path to an image."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      #############################################################
      # USER: Cost function weights
      #        -> Input OR Both
      #        ...path to volume specifying voxelwise weights
      #############################################################
      xst2=0
      buffer=${coreg_inwt[${cxt}]}
      while [[ "$xst2" == "0" ]] && [[ ${buffer} != NULL ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Select the path to a volume containing WEIGHTS for the COST "
         echo "FUNCTION in INPUT (BOLD/analyte) space for subject"
         echo "((${xsubj})): "
         read -p ""\
            -e -i $buffer buffer
         if [[ $(imtest $buffer) == "1" ]]
            then
            coreg_inwt[${cxt}]=$buffer
            echo "Path to cost function weights: ${coreg_inwt[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            coreg_inwt[${cxt}]=NULL
            break 2
         else
            echo -e "${CYA}A volume containing cost function weights can "
            echo "be used to set the relative importance of different "
            echo "voxels or brain regions in computing an optimal "
            echo "coregistration. For instance, weighting voxels in "
            echo "the ventricular region highly could promote a "
            echo "coregistration solution that optimises alignment of "
            echo "the ventricular boundaries of input and reference "
            echo -e "volumes.${RCL}"
            echo ""
            echo "The input must be a path to an image."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Quality cutoffs
   ################################################################
   3)
      xst2=0
      buffer=${coreg_qacut[${cxt}]}
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the CUTOFFS for variables that measure"
         echo "coregistration QUALITY; this should be a comma-"
         echo "separated list of $(expr ${NUMQC} + 1) values. Negative or nonsense"
         echo "values indicate that the quality metric should not"
         echo "be taken under consideration. If coregistration"
         echo "fails to meet the quality cutoff, then it will"
         echo "automatically be repeated using another cost"
         echo "function."
         read -p ""\
            -e -i $buffer buffer
         numel=$(grep -o ',' <<< "$buffer" | wc -l)
         echo $numel
         if [[ ${numel} == ${NUMQC} ]]
            then
            coreg_qacut[${cxt}]=$buffer
            echo "Quality cutoffs: ${coreg_qacut[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "The quality control variables are as follows:${RCL}"
            echo -e " [1] ${RED}CROSS-CORRELATION${CYA} between binary masks of the"
            echo "     subject's structural image and the subject's"
            echo "     functional image following its coregistration"
            echo "     into structural space."
            echo -e " [2] ${RED}COVERAGE${CYA} fraction of the structural image's "
            echo "     voxels by the coregistered functional image's "
            echo "     voxels."
#            echo -e "${RCL} [2] ${RED}INCOMPLETE COVERAGE${CYA} of structural brain volume"
#            echo "     (in mm^3) by the coregistered functional image."
#            echo -e "${RCL} [3] ${RED}INCOMPLETE COVERAGE${CYA} of the coregistered image's"
#            echo "     brain volume by the structural image."
#            echo -e "${RCL} [4] ${RED}VOLUMETRIC COVERAGE PRODUCT${CYA}. The product of [2]"
#            echo "     and [3]. Why use this? If either the structural"
#            echo "     or functional mask is quite liberal, then it"
#            echo "     may appear to be poorly covered despite the best"
#            echo "     possible alignment. Using the product criterion"
#            echo "     will permit the user to specifically target"
#            echo "     situations in which there are many non-covered"
#            echo "     voxels in both masks, but may be problematic"
#            echo "     for poor extractions."
            echo -e "${RCL}"
            echo "Enter input in the format:"
            echo "  crosscorr,coverage"
            echo -e "${CYA}For instance, the input:"
            echo "  0.7,0.8"
            echo "  will only flag a coregistration as poor if (i) the "
            echo "  spatial cross-correlation between structural and"
            echo "  coregistered images is less than 0.7 OR (ii) the "
            echo "  coregistered functional image mask fails to cover "
            echo "  at least 80 percent of the structural image mask."
#            echo "  0.7,-1,100000,-1"
#            echo "  will only flag a coregistration as poor if (i) the"
#            echo "  spatial cross-correlation between structural and"
#            echo "  coregistered images is less than 0.7 OR (ii) the"
#            echo "  structural image mask fails to cover over 100000"
#            echo "  cubic mm of the coregistered functional mask."
            echo "Negative values result in the image automatically"
            echo "  passing that criterion; to skip quality control"
            echo "  altogether, you may enter:"
            echo -e "  -1,-1"
#            echo -e "  -1,-1,-1,-1"
            echo -e "${RCL}"
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Re-run
   ################################################################
   4)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         1)
            coreg_rerun[${cxt}]="Y"
            echo "Re-run: ${coreg_rerun[${cxt}]}"
            break
            ;;
         2)
            coreg_rerun[${cxt}]="N"
            echo "Re-run: ${coreg_rerun[${cxt}]}"
            break
            ;;
         m)
            break 2
            ;;
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   5)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of INTERMEDIATE"
      echo "steps in the coregistration algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         1)
            coreg_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${coreg_cleanup[${cxt}]}"
            break
            ;;
         2)
            coreg_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${coreg_cleanup[${cxt}]}"
            break
            ;;
         m)
            break 2
            ;;
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset to default parameters
   ################################################################
   6)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/coreg/coreg.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   7)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      ;;
      
   esac
done
done

###################################################################
# write parameters to design file
###################################################################
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} COREG" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "coreg_cfunc[${cxt}]=${coreg_cfunc[${cxt}]}" >> $design
if [[ ${coreg_cfunc[${cxt}]} == "bbr" ]]
   then
   echo coreg_seg[${cxt}]=$(${XCPEDIR}/utils/genpath ${coreg_seg[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM)  >> $design
   echo "coreg_wm[${cxt}]=${coreg_wm[${cxt}]}" >> $design
fi
echo coreg_refwt[${cxt}]=$(${XCPEDIR}/utils/genpath ${coreg_refwt[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo coreg_inwt[${cxt}]=$(${XCPEDIR}/utils/genpath ${coreg_inwt[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo "coreg_qacut[${cxt}]=${coreg_qacut[${cxt}]}" >> $design
echo "coreg_rerun[${cxt}]=${coreg_rerun[${cxt}]}" >> $design
echo "coreg_cleanup[${cxt}]=${coreg_cleanup[${cxt}]}" >> $design
