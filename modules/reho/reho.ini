#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for regional homogeneity analysis
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]]
   then
   echo ""
   echo -e "${CYA}REHO${RCL}:"
   echo "This module computes the regional homogeneity (ReHo) at "
   echo "   each voxel of the processed image and/or within user-"
   echo "   specified a priori regions of interest. ReHo, or Kendall's "
   echo "   W, is a measure of local uniformity in the BOLD signal. "
   echo "   Greater ReHo values correspond to greater synchrony "
   echo "   among activity patterns measured in a neighbourhood of "
   echo "   voxels."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/reho/reho.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design




###################################################################
# The ugly while loop is necessary for the select options to update
# correctly
###################################################################
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""
echo -e "Welcome to ${RED}ReHo${RCL} analysis initialisation for the XCP Engine."
echo "Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."


select option in \
   "Parcellation library: ${reho_roi[${cxt}]}" \
   "Voxel neighbourhood: ${reho_nhood[${cxt}]}" \
   "Compute mean ReHo per RoI: ${reho_roimean[${cxt}]}" \
   "Compute ReHo per RoI neighbourhood: ${reho_roikw[${cxt}]}" \
   "Spatial filter: ${reho_sptf[${cxt}]}" \
   "Spatial smoothing FWHM: ${reho_smo[${cxt}]} mm" \
   "Re-run: ${reho_rerun[${cxt}]}" \
   "Delete intermediate files: ${reho_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
   
   
   ################################################################
   # USER: Parcellation library
   ################################################################
   1)
      xst2=0
      [[ -z ${reho_roi[${cxt}]} ]] \
         && buffer0=${XCPEDIR}/seeds \
         || buffer0=${reho_roi[${cxt}]}
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the PATH to the parcellation library "
         echo "that you wish to use for ROI-wise quantification"
         echo "of voxelwise ReHo."
         echo ""
         echo "To create a new parcellation library, enter the"
         echo -e "string ${RED}NEW${RCL}."; echo ""
         read -p "" -e -i ${buffer0} buffer
         ext=$(echo "$buffer"|cut -d"." -f1 --complement)
         if [[ -e "$buffer" ]] \
            && [[ "${ext}" == "parc" ]]
            then
            reho_roi[${cxt}]=$buffer
            echo "Parcellation library selected:"
            echo ${reho_roi[${cxt}]}; echo ""
            xst2=1
         elif [[ "${buffer}" == "NEW" ]]
            then
            xst2=0
            while [[ "$xst2" == "0" ]]
               do
               echo "Enter a name for the new parcellation library that you "
               echo "wish to create (do NOT include the .parc extension):"
               [[ ! -z ${analysis} ]] && buffer=$analysis || buffer=roi
               read -p "" -e -i $buffer parc
               [[ -z $(echo ${parc}|grep -i '/') ]] && parc=${XCPEDIR}/seeds/${parc}
               if [[ -e "${parc}.parc" ]] || [[ -e ${parc} ]]
                  then
                  echo "Library $parc already exists. Overwrite?"
                  select option in \
                     "Yes" \
                     "Edit this library instead" \
                     "No"
                     do
                     case $REPLY in
                     1)
                        ${XCPEDIR}/utils/parcliber \
                           -o ${parc}.parc \
                           -s ${xsubj}
                        [[ -e ${parc} ]] && reho_roi[${cxt}]=${parc}.parc
                        xst2=1
                        break
                        ;;
                     2)
                        ${XCPEDIR}/utils/parcliber \
                           -o ${parc}.parc \
                           -s ${xsubj} \
                           -l ${parc}.parc
                        [[ -e ${parc} ]] && reho_roi[${cxt}]=${parc}.parc
                        xst2=1
                        break
                        ;;
                     3)
                        break
                        ;;
                     esac
                  done
               else
                  ${XCPEDIR}/utils/parcliber \
                     -o ${parc}.parc \
                     -s ${xsubj}
                  [[ -e ${parc} ]] && reho_roi[${cxt}]=${parc}.parc
                  xst2=1
               fi
            done
            break 2
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo "The input must be either be a path to a parcellation "
            echo -e "library (.parc) file or the string ${RED}NEW${RCL}."
            echo ""
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      pars="${pars} ${curlib}"
      break
      ;;
   
   ################################################################
   # USER: Voxel neighbourhood
   ################################################################
   2)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the type of voxel neighbourhood to be "
      echo "considered when computing regional homogeneity:"
      select option in \
         "Faces" \
         "Edges" \
         "Vertices" \
         "Sphere" \
         "RoI"
         do
         case $REPLY in
         ##########################################################
         # USER: Voxel neighbourhood
         #        -> Faces
         ##########################################################
         1)
            reho_nhood[${cxt}]=faces
            echo "Voxel neighbourhood: ${reho_nhood[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Voxel neighbourhood
         #        -> Edges
         ##########################################################
         2)
            reho_nhood[${cxt}]=edges
            echo "Voxel neighbourhood: ${reho_nhood[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Voxel neighbourhood
         #        -> Vertices
         ##########################################################
         3)
            reho_nhood[${cxt}]=vertices
            echo "Voxel neighbourhood: ${reho_nhood[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Voxel neighbourhood
         #        -> Sphere
         ##########################################################
         4)
            xst2=0
            while [[ ${xst2} == 0 ]]
               do
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               echo "Now, specify the RADIUS in mm of the spherical "
               echo "neighbourhood of each voxel."
               read -p "" -e -i 5 buffer
               if [[ $buffer =~ $POSINT ]]
                  then
                  radius=$buffer
                  xst2=1
               elif [[ "${buffer}" == "m" ]]
                  then
                  break 2
               else
               echo -e "${CYA}"
               echo "Regional homogeneity may be computed for each voxel "
               echo "in such a manner as to consider any voxels within a "
               echo "user-specified radius of that voxel to be that voxel's "
               echo "neighbourhood. The regional homogeneity will then be "
               echo "defined as the coefficient of concordance among all "
               echo "voxels in a sphere centred on the target voxel. The "
               echo "neighbourhood radius should be provided in millimeters."
               echo -e "${RCL}"
               echo ""
               echo "Enter a non-negative number."
               echo -e ""
               echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
               fi
            done
            reho_nhood[${cxt}]=sphere,${radius}
            echo "Voxel neighbourhood: Sphere of radius ${radius} mm"
            ;;
         ##########################################################
         # USER: Voxel neighbourhood
         #        -> RoI
         ##########################################################
         5)
            echo "To set the neighbourhood of each voxel to be the "
            echo "region of interest containing that voxel, set "
            echo -e "${RED}compute ReHo per RoI neighbourhood${RCL} to ${RED}yes${RCL}."
            echo ""
            echo -e "${RED}Voxel neighbourhood was not changed${RCL}"
            break
            ;;
         ##########################################################
         # USER: Voxel neighbourhood
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Voxel neighbourhood
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "Regional homogeneity is computed as Kendall's W "
            echo "(coefficient of concordance) among the timeseries "
            echo "of a voxel and its neighbours. The neighbours of a "
            echo "voxel may include either:"
            echo -e "${RCL} * ${CYA}Any of the 6 voxels adjoining that voxel along "
            echo -e "   the surfaces of its ${RED}faces${RCL}"
            echo -e " * ${CYA}Any of the 18 voxels adjoining that voxel along its "
            echo -e "   faces or ${RED}edges${RCL}"
            echo -e " * ${CYA}Any of the 26 voxels adjoining that voxel at any of "
            echo -e "   its faces, edges, or ${RED}vertices${RCL}"
            echo -e " * ${CYA}Any voxels that lie within a ${RED}sphere${CYA} of user-specified "
            echo -e "   radius from that voxel.${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3|4]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Compute mean ReHo per RoI
   ################################################################
   3)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to compute the MEAN of the VOXELWISE"
      echo "regional homogeneity within each region of interest?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Compute mean ReHo per RoI
         #        -> Yes
         ##########################################################
         1)
            reho_roimean[${cxt}]="Y"
            echo "Mean voxelwise ReHo per RoI: ${reho_roimean[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Compute mean ReHo per RoI
         #        -> No
         ##########################################################
         2)
            reho_roimean[${cxt}]="N"
            echo "Mean voxelwise ReHo per RoI: ${reho_roimean[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Compute mean ReHo per RoI
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Compute mean ReHo per RoI
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "Regional homogeneity for a region of interest may "
            echo "be computed in either (or both) of two ways. This "
            echo "option enables computation of regional homogeneity "
            echo "for a RoI by computing the mean over the regional "
            echo "homogeneity values obtained for the voxels in that "
            echo "RoI."
            echo -e "${RCL}"
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Compute ReHo per RoI neighbourhood
   ################################################################
   4)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to compute the MEAN of the VOXELWISE"
      echo "regional homogeneity within each region of interest?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Compute mean ReHo per RoI
         #        -> Yes
         ##########################################################
         1)
            reho_roikw[${cxt}]="Y"
            echo "Mean voxelwise ReHo per RoI: ${reho_roikw[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Compute mean ReHo per RoI
         #        -> No
         ##########################################################
         2)
            reho_roikw[${cxt}]="N"
            echo "Mean voxelwise ReHo per RoI: ${reho_roikw[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Compute mean ReHo per RoI
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Compute mean ReHo per RoI
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "Regional homogeneity for a region of interest may "
            echo "be computed in either (or both) of two ways. This "
            echo "option enables computation of regional homogeneity "
            echo "for a RoI by treating the RoI as a neighbourhood "
            echo "and computing the coefficient of concordance over "
            echo "all voxels in that neighbourhood."
            echo -e "${RCL}"
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Spatial filter
   ################################################################
   5)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the SPATIAL FILTER."
      echo ""
      echo "(The spatial filter will be applied only to"
      echo " the image used for this analysis. It will"
      echo " not persist in future processing steps. If"
      echo " you want a persistent spatial filter, use"
      echo " the 'prestats' module instead.)"
      select option in \
         "Gaussian" \
         "SUSAN" \
         "Uniform smoothness" \
         "None"
         do
         case $REPLY in
         ##########################################################
         # USER: Spatial filter
         #        -> Gaussian
         ##########################################################
         1)
            reho_sptf[${cxt}]="gaussian"
            echo "Spatial filter: ${reho_sptf[${cxt}]}"
            break
            ;;
         2)
         ##########################################################
         # USER: Spatial filter
         #        -> SUSAN
         ##########################################################
            reho_sptf[${cxt}]="susan"
            echo "Spatial filter: ${reho_sptf[${cxt}]}"
            break
            ;;
         3)
         ##########################################################
         # USER: Spatial filter
         #        -> Uniform smoothness
         ##########################################################
            reho_sptf[${cxt}]="uniform"
            echo "Spatial filter: ${reho_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> None
         ##########################################################
         4)
            reho_sptf[${cxt}]="none"
            echo "Spatial filter: ${reho_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "* ${RED}Gaussian ${CYA}smoothing applies the same Gaussian "
            echo -e "  smoothing kernel across the entire volume.${RCL}"
            echo -e "* ${RED}SUSAN${CYA}-based smoothing restricts mixing of signals "
            echo "  from disparate tissue classes (Smith and Brady, "
            echo -e "  1997).${RCL}"
            echo -e "* ${RED}Uniform ${CYA}smoothing applies smoothing to all voxels "
            echo "  until the smoothness computed at every voxel "
            echo -e "  attains the target value.${RCL}"
            echo -e "* ${RED}Uniform ${CYA}smoothing may be used as a compensatory "
            echo "  mechanism to reduce the effects of subject motion "
            echo "  on the final processed image (Scheinost et al., "
            echo -e "  2014).${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Spatial smoothing FWHM
   ################################################################
   6)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         if [[ "${reho_sptf[${cxt}]}" == "none" ]]
         then
            echo -e "${RED}WARNING${RCL}:spatial filtering is currently disabled."
            echo "Setting the FWHM for spatial smoothing will"
            echo "have no effect unless the spatial filter is"
            echo "enabled."
         fi
         read -p "Specify the FWHM for SPATIAL SMOOTHING, in mm: "\
            -e -i ${reho_smo[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            reho_smo[${cxt}]=$buffer
            echo "Spatial filter: ${reho_smo[${cxt}]} mm"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Endemic noise, for instance due to physiological"
            echo "signals or scanner activity, can introduce spurious or"
            echo "artefactual results in single voxels. The effects of"
            echo "noise-related artefacts can be mitigated by spatially"
            echo "filtering the data, thus dramatically increasing the"
            echo "signal-to-noise ratio. However, spatial smoothing is"
            echo "not without its costs: it effectively reduces"
            echo "volumetric resolution by blurring signals from adjacent"
            echo -e "voxels.${RCL}"
            echo ""
            echo "Enter a non-negative number. Enter 0 for no filter."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Re-run
   ################################################################
   7)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            reho_rerun[${cxt}]="Y"
            echo "Re-run: ${reho_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            reho_rerun[${cxt}]="N"
            echo "Re-run: ${reho_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   8)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of"
      echo "INTERMEDIATE steps in the ReHo algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Delete intermediate files
         #        -> Yes
         ##########################################################
         1)
            reho_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${reho_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> No
         ##########################################################
         2)
            reho_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${reho_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset default parameters
   ################################################################
   9)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/reho/reho.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   10)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      ;;
      
   esac
done

done

###################################################################
# write parameters to design file
###################################################################

echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} REHO" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "reho_roi[${cxt}]=${reho_roi[${cxt}]}" >> $design
echo "reho_nhood[${cxt}]=${reho_nhood[${cxt}]}" >> $design
echo "reho_roimean[${cxt}]=${reho_roimean[${cxt}]}" >> $design
echo "reho_roikw[${cxt}]=${reho_roikw[${cxt}]}" >> $design
echo "reho_sptf[${cxt}]=${reho_sptf[${cxt}]}" >> $design
echo "reho_smo[${cxt}]=${reho_smo[${cxt}]}" >> $design
echo "reho_rerun[${cxt}]=${reho_rerun[${cxt}]}" >> $design
echo "reho_cleanup[${cxt}]=${reho_cleanup[${cxt}]}" >> $design
