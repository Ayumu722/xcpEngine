#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for prestats
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly ALLOWED="-BXT-DMT-DSP-DVO-MCO-MPR-SPT-STM-TMP-"
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]] ||  [[ "$1" == "info" ]]
   then
   echo ""
   echo -e "${CYA}PRESTATS${RCL}:"
   echo "This module executes a variety of common preprocessing"
   echo "strategies, including:"
   echo -e " ${CYA}*${RCL} discarding initial volumes"
   echo -e " ${CYA}*${RCL} realigning volumes to correct for movement"
   echo -e " ${CYA}*${RCL} correcting for slice timing"
   echo -e " ${CYA}*${RCL} extracting brain tissue"
   echo -e " ${CYA}*${RCL} demeaning/detrending BOLD timeseries"
   echo -e " ${CYA}*${RCL} despiking BOLD timeseries"
   echo -e " ${CYA}*${RCL} spatially filtering volumes"
   echo -e " ${CYA}*${RCL} temporally filtering timeseries"
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/prestats/prestats.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

###################################################################
# The ugly while loop is necessary for the select options to update
# correctly
###################################################################
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""; echo ""
echo -e "Welcome to ${RED}prestats${RCL} initialisation for the XCP Engine."
echo "Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "Number of volumes to discard: ${prestats_dvols[${cxt}]}" \
   "Slice timing correction: ${prestats_stime[${cxt}]}" \
   "Slice timing correction direction: ${prestats_sdir[${cxt}]}" \
   "Spatial filter: ${prestats_sptf[${cxt}]}" \
   "Spatial smoothing FWHM: ${prestats_smo[${cxt}]} mm" \
   "Temporal filter: ${prestats_tmpf[${cxt}]}" \
   "Low pass cutoff: ${prestats_lopass[${cxt}]} Hz" \
   "High pass cutoff: ${prestats_hipass[${cxt}]} Hz" \
   "Detrend order: ${prestats_dmdt[${cxt}]}" \
   "Censor/flag high-motion volumes: ${prestats_censor[${cxt}]} mm ${prestats_censor_cr[${cxt}]}" \
   "Re-run: ${prestats_rerun[${cxt}]}" \
   "Delete intermediate files: ${prestats_cleanup[${cxt}]}" \
   "Processing order: ${prestats_process[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
   
   ################################################################
   # USER: Number of volumes to discard
   ################################################################
   1)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Select the number of VOLUMES to DISCARD: "\
            -e -i ${prestats_dvols[${cxt}]} buffer
         if [[ $buffer =~ $INT ]]
            then
            prestats_dvols[${cxt}]=$buffer
            echo "Number of volumes to discard: ${prestats_dvols[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}In functional MRI studies, the initial volumes are"
            echo "typically discarded in order to account for T1"
            echo "equilibration at the beginning of a scan. The exact"
            echo "number of volumes to discard may depend on acquisition"
            echo -e "parameters such as repetition time.${RCL}"
            echo ""
            echo "The input must be an integer. Enter a negative integer "
            echo "to discard final volumes instead of initial volumes."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Slice timing correction
   ################################################################
   2)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the approach for SLICE TIMING CORRECTION."
      select option in \
         "None" \
         "Bottom-up" \
         "Top-down" \
         "Interleaved" \
         "Custom"
         do
         case $REPLY in
         ##########################################################
         # USER: Slice timing correction
         #        -> None
         ##########################################################
         1)
            prestats_stime_order[${cxt}]=false
            prestats_stime_timing[${cxt}]=false
            prestats_stime[${cxt}]="none"
            echo "Slice timing correction: ${prestats_stime[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Slice timing correction
         #        -> Bottom-up
         ##########################################################
         2)
            prestats_stime_order[${cxt}]=false
            prestats_stime_timing[${cxt}]=false
            prestats_stime[${cxt}]="up"
            echo "Slice timing correction: ${prestats_stime[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Slice timing correction
         #        -> Top-down
         ##########################################################
         3)
            prestats_stime_order[${cxt}]=false
            prestats_stime_timing[${cxt}]=false
            prestats_stime[${cxt}]="down"
            echo "Slice timing correction: ${prestats_stime[${cxt}]}"
            break
            ;;
         4)
         ##########################################################
         # USER: Slice timing correction
         #        -> Interleaved
         ##########################################################
            prestats_stime_order[${cxt}]=false
            prestats_stime_timing[${cxt}]=false
            prestats_stime[${cxt}]="interleaved"
            echo "Slice timing correction: ${prestats_stime[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Slice timing correction
         #        -> Custom
         ##########################################################
         5)
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            echo ""
            echo "This option requires either a custom timing file or a"
            echo "custom order file. Do you have one or both of these files?"
            select option in \
               "Custom order file" \
               "Custom timing file" \
               "Both" \
               "No"
               do
               case $REPLY in
               ####################################################
               # USER: Slice timing correction
               #        -> Custom
               #        -> Custom order file
               ####################################################
               1)
                  prestats_stime_order[${cxt}]=true
                  break
                  ;;
               ####################################################
               # USER: Slice timing correction
               #        -> Custom
               #        -> Custom timing file
               ####################################################
               2)
                  prestats_stime_timing[${cxt}]=true
                  break
                  ;;
               ####################################################
               # USER: Slice timing correction
               #        -> Custom
               #        -> Both
               #
               # ALSO THIS SHOULDN'T EVEN BE AN OPTION LIKE WTF!?
               ####################################################
               3)
                  prestats_stime_order[${cxt}]=true
                  prestats_stime_timing[${cxt}]=true
                  break
                  ;;
               ####################################################
               # USER: Slice timing correction
               #        -> Custom
               #        -> No
               ####################################################
               4)
                  echo ""; echo ""; echo ""
                  echo -e "${CYA}Custom slice timing correction is not available "
                  echo "without either a slice order file or a slice"
                  echo -e "timing file.${RCL}"
                  echo ""
                  echo "Please select another option. Enter 'm' to return"
                  echo "to the module menu."
                  break
                  ;;
               ####################################################
               # USER: Slice timing correction
               #        -> Custom
               #        -> MENU
               ####################################################
               m)
                  break 3
                  ;;
               ####################################################
               # USER: Slice timing correction
               #        -> Custom
               #        -> HELP
               ####################################################
               *)
                  echo ""
                  echo -e "${CYA}A custom slice order file specifies the order "
                  echo "in which slices are acquired, while a custom slice "
                  echo "timing file specifies the time point during "
                  echo -e "acquisition that each slice is acquired.${RCL}"
                  echo -e ""
                  echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
                  echo ""; echo ""
                  echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
                  ;;
               esac
            done
            #######################################################
            # Prompt path to custom order file
            #
            # Option enabled by:
            # USER: Slice timing correction
            #        -> Custom
            #        -> Custom order file
            # TODO
            # exit/menu option
            #######################################################
            if [[ "${prestats_stime_order[${cxt}]}" == "true" ]]
               then
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               echo "Specify the path to the file specifying slice order"
               echo "information for subject ${xsubj}."
               echo ""
               echo "(Prestats will infer paths for the remaining subjects "
               echo "based on this input)"
               read -p "Path: " -i "$srcdir" -e prestats_stime_opath[${cxt}]
               echo "Slice order path generalised"
               prestats_stime[${cxt}]="custom"
            fi
            #######################################################
            # Prompt path to custom timing file
            #
            # Option enabled by:
            # USER: Slice timing correction
            #        -> Custom
            #        -> Custom timing file
            # TODO
            # exit/menu option
            #######################################################
            if [[ "${prestats_stime_timing[${cxt}]}" == "true" ]]
               then
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               echo "Specify the path to the file specifying slice timing"
               echo "information for subject ${xsubj}."
               echo ""
               echo "(INI will attempt to infer paths for the remaining"
               echo "subjects based on this input)"
               read -p "Path: " -i "$srcdir" -e prestats_stime_tpath[${cxt}]
               echo "Slice order path generalised"
               prestats_stime[${cxt}]="custom"
            fi
            echo "Slice timing correction: ${prestats_stime[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Slice timing correction
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Slice timing correction
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}When each 3D volume of a 4D timeseries is acquired, "
            echo "not all 2D slices of that volume are acquired "
            echo "simultaneously. To account for the temporal lag "
            echo "between acquisition of slices, FSL's slicetimer tool "
            echo "interpolates intensities using a Fourier transform."
            echo ""
            echo "This correction is most important in event-related "
            echo "analyses, and may be less important for time-"
            echo -e "averaged connectivity analyses and block designs.${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3|4|5]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Slice timing correction direction
   ################################################################
   3)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Select the DIRECTION for SLICE TIMING correction."
      if [[ "${prestats_stime[${cxt}]}" == "none" ]]
         then
         echo -e "${RED}WARNING${RCL}:slice timing correction is currently disabled."
         echo "Setting the direction for slice timing correction will"
         echo "have no effect unless slice timing correction is"
         echo "enabled."
      fi
      select option in \
         "X (right-left axis)" \
         "Y (anterior-posterior axis)" \
         "Z (superior inferior axis)"
         do
         case $REPLY in
         ##########################################################
         # USER: Slice timing correction direction
         #        -> X
         ##########################################################
         1)
            prestats_sdir[${cxt}]="X"
            echo "Slice timing correction direction: ${prestats_sdir[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Slice timing correction direction
         #        -> Y
         ##########################################################
         2)
            prestats_sdir[${cxt}]="Y"
            echo "Slice timing correction direction: ${prestats_sdir[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Slice timing correction direction
         #        -> Z
         ##########################################################
         3)
            prestats_sdir[${cxt}]="Z"
            echo "Slice timing correction direction: ${prestats_sdir[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Slice timing correction direction
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Slice timing correction direction
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}The axis across which slice timing correction "
            echo "is applied should be the same as the axis normal "
            echo "to the plane of acquisition. The number of slices "
            echo "in this direction should equal the number of "
            echo -e "slices in any custom slice timing or order files.${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Spatial filter
   ################################################################
   4)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the SPATIAL FILTER."
      select option in \
         "Gaussian" \
         "SUSAN" \
         "Uniform smoothness" \
         "None"
         do
         case $REPLY in
         ##########################################################
         # USER: Spatial filter
         #        -> Gaussian
         ##########################################################
         1)
            prestats_sptf[${cxt}]="gaussian"
            echo "Spatial filter: ${prestats_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> SUSAN
         ##########################################################
         2)
            prestats_sptf[${cxt}]="susan"
            echo "Spatial filter: ${prestats_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> Uniform smoothness
         ##########################################################
         3)
            prestats_sptf[${cxt}]="uniform"
            echo "Spatial filter: ${prestats_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> None
         ##########################################################
         4)
            prestats_sptf[${cxt}]="none"
            echo "Spatial filter: ${prestats_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "* ${RED}Gaussian ${CYA}smoothing applies the same Gaussian "
            echo -e "  smoothing kernel across the entire volume.${RCL}"
            echo -e "* ${RED}SUSAN${CYA}-based smoothing restricts mixing of signals "
            echo "  from disparate tissue classes (Smith and Brady, "
            echo -e "  1997).${RCL}"
            echo -e "* ${RED}Uniform ${CYA}smoothing applies smoothing to all voxels "
            echo "  until the smoothness computed at every voxel "
            echo -e "  attains the target value.${RCL}"
            echo -e "* ${RED}Uniform ${CYA}smoothing may be used as a compensatory "
            echo "  mechanism to reduce the effects of subject motion "
            echo "  on the final processed image (Scheinost et al., "
            echo -e "  2014).${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Spatial smoothing FWHM
   ################################################################
   5)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         if [[ "${prestats_sptf[${cxt}]}" == "none" ]]
         then
            echo -e "${RED}WARNING${RCL}:spatial filtering is currently disabled."
            echo "Setting the FWHM for spatial smoothing will"
            echo "have no effect unless the spatial filter is"
            echo "enabled."
         fi
         read -p "Specify the FWHM for SPATIAL SMOOTHING, in mm: "\
            -e -i ${prestats_smo[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            prestats_smo[${cxt}]=$buffer
            echo "Spatial filter: ${prestats_smo[${cxt}]} mm"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Endemic noise, for instance due to physiological"
            echo "signals or scanner activity, can introduce spurious or"
            echo "artefactual results in single voxels. The effects of"
            echo "noise-related artefacts can be mitigated by spatially"
            echo "filtering the data, thus dramatically increasing the"
            echo "signal-to-noise ratio. However, spatial smoothing is"
            echo "not without its costs: it effectively reduces"
            echo "volumetric resolution by blurring signals from adjacent"
            echo -e "voxels.${RCL}"
            echo ""
            echo "Enter a non-negative number. Enter 0 for no filter."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Temporal filter
   ################################################################
   6)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the TEMPORAL FILTER."
      select option in \
         "Fast Fourier Transform" \
         "Gaussian" \
         "Butterworth" \
         "Chebyshev Type I" \
         "Chebyshev Type II" \
         "Elliptic" \
         "None"
         do
         case $REPLY in
         ##########################################################
         # USER: Temporal filter
         #        -> Fast Fourier Transform
         ##########################################################
         1)
            genfilt=false
            prestats_tmpf[${cxt}]="fft"
            echo "Temporal filter: ${prestats_tmpf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> Gaussian
         ##########################################################
         2)
            genfilt=false
            prestats_tmpf[${cxt}]="gaussian"
            echo "Temporal filter: ${prestats_tmpf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> Butterworth
         ##########################################################
         3)
            genfilt=true
            prestats_tmpf[${cxt}]="butterworth"
            echo "Temporal filter: ${prestats_tmpf[${cxt}]}"
            break
            ;;
         4)
         ##########################################################
         # USER: Temporal filter
         #        -> Chebyshev Type I
         ##########################################################
            genfilt=true
            prestats_tmpf[${cxt}]="chebyshev1"
            echo "Temporal filter: ${prestats_tmpf[${cxt}]}"
            break
            ;;
         5)
         ##########################################################
         # USER: Temporal filter
         #        -> Chebyshev Type II
         ##########################################################
            genfilt=true
            prestats_tmpf[${cxt}]="chebyshev2"
            echo "Temporal filter: ${prestats_tmpf[${cxt}]}"
            break
            ;;
         6)
         ##########################################################
         # USER: Temporal filter
         #        -> Elliptic
         ##########################################################
            genfilt=true
            prestats_tmpf[${cxt}]="elliptic"
            echo "Temporal filter: ${prestats_tmpf[${cxt}]}"
            break
            ;;
         7)
         ##########################################################
         # USER: Temporal filter
         #        -> None
         ##########################################################
            genfilt=false
            prestats_tmpf[${cxt}]="none"
            echo "Temporal filter: ${prestats_tmpf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}For functional connectivity analysis, filtering "
            echo "during the prestats module is not recommended. "
            echo "Bandpass filtering the analyte timeseries but not "
            echo "nuisance regressors re-introduces noise-related "
            echo "variance at removed frequencies when the timeseries "
            echo "is residualised with respect to the regressors via "
            echo "linear fit (Hallquist et al., 2014). (The XCP Engine "
            echo "is designed so as to make this involuntary "
            echo "reintroduction of noise impossible.) Instead, the "
            echo "recommended approach is filtering both the timeseries "
            echo "and the nuisance regressors immediately prior to "
            echo "fitting and residualisation (Hallquist et al., 2014)."
            echo -e "To enable this analytic pathway, select ${RED}no filter${CYA} "
            echo -e "and instead use the ${RED}regress${CYA} module's built-in "
            echo -e "temporal filter.${RCL}"
            echo ""
            echo -e "${RCL}* ${RED}FFT${CYA}-based filters, as implemented in AFNI's 3dBandpass, "
            echo "  use a fast Fourier transform to attenuate frequencies. "
            echo "  An FFT-based filter may not be suitable for use in "
            echo "  designs that incorporate iterative motion censoring, "
            echo "  since it will include interpolated frequencies in its "
            echo -e "  calculations.${RCL}"
            echo -e "* ${CYA}A ${RED}Gaussian${CYA} filter, as implemented in FSL, uses a "
            echo "  Gaussian-weighted least-squares fit to remove "
            echo "  frequencies of no interest from the data. This "
            echo -e "  filter has a slow frequency roll-off.${RCL}"
            echo -e "* ${RED}Chebyshev${CYA} and ${RED}elliptic${CYA} filters more ideally "
            echo "  discriminate accepted and attenuated frequencies "
            echo -e "  than do ${RED}Butterworth${CYA} filters, but they introduce "
            echo "  ripples in either the passband (Chebyshev I), "
            echo "  stopband (Chebyshev II), or both (elliptic) that "
            echo -e "  result in some signal distortion.${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3|4|5|6|7]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      #############################################################
      # Filters that use genfilter require additional input
      # parameters...
      #############################################################
      if [[ "$genfilt" == "true" ]]
         then
         echo ""; echo "Welcome to filter setup."; echo ""
         xst2=0
         ##########################################################
         # USER: Butterworth, Chebyshev, or elliptic
         #        ... filter order
         ##########################################################
         while [[ "$xst2" == "0" ]]
            do
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            echo ""
            read -p "Specify the FILTER ORDER: " -e -i \
               ${prestats_tmpf_order[${cxt}]} buffer
            if [[ $buffer =~ $POSINT ]]
               then
               prestats_tmpf_order[${cxt}]=$buffer
               echo "Order-${prestats_tmpf_order[${cxt}]} ${prestats_tmpf[${cxt}]} filter"
               echo ""
               xst2=1
            elif [[ "${buffer}" == "m" ]]
               then
               break 2
            else
               echo ""
               echo -e "${CYA}The filter order indicates the number of input samples"
               echo "taken under consideration when generating an output"
               echo "signal. In general, using a higher-order filter will"
               echo "result in a sharper cutoff between accepted and"
               echo "attenuated frequencies. For a gentler filter, use a"
               echo -e "lower order.${RCL}"
               echo ""
               echo "Enter a non-negative integer"
               echo -e ""
               echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            fi
         done
         ##########################################################
         # USER: Butterworth, Chebyshev, or elliptic
         #        ... filter passes
         ##########################################################
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the FILTER PASSES."
         echo "(default is forward and reverse)"
         select option in \
            "Forward (1 pass)" \
            "Forward and reverse (2 passes)"
            do
            case $REPLY in
               1)
                  prestats_tmpf_pass[${cxt}]=1
                  echo "Forward filter selected"; echo ""
                  break
                  ;;
               2)
                  prestats_tmpf_pass[${cxt}]=2
                  echo "Forward/reverse filter selected"; echo ""
                  break
                  ;;
               m)
                  break 2
                  ;;
               *)
                  echo ""
                  echo -e "${CYA}The filter passes indicate whether the input signal"
                  echo "should be processed in the forward direction only"
                  echo -e "or in both forward and reverse directions.${RCL}"
                  echo ""
                  echo "Select a valid option: [1|2]"
                  echo -e ""
                  echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
                  echo ""; echo ""
                  echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
                  ;;
            esac
         done
         ##########################################################
         # USER: Chebyshev I or elliptic
         #        ... passband ripple
         ##########################################################
         if [[ "${prestats_tmpf[${cxt}]}" == "chebyshev1" ]] \
            || [[ "${prestats_tmpf[${cxt}]}" == "elliptic" ]]
            then
            xst2=0
            while [[ "$xst2" == "0" ]]
               do
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               read -p "Specify the PASSBAND RIPPLE: " -e -i \
                  ${prestats_tmpf_ripple[${cxt}]} buffer
               if [[ $buffer =~ $POSNUM ]]
                  then
                  prestats_tmpf_ripple[${cxt}]=$buffer
                  echo "Passband ripple: ${prestats_tmpf_ripple[${cxt}]}"
                  echo ""
                  xst2=1
               elif [[ "${buffer}" == "m" ]]
                  then
                  break 2
               else
                  echo ""
                  echo -e "${CYA}Chebyshev I and elliptic filters allow for sharper "
                  echo "discrimination between accepted and attenuated "
                  echo "frequencies than Butterworth filters of the same "
                  echo "order at the cost of a 'ripple' in the pass band. "
                  echo "This ripple results in somewhat uneven retention of "
                  echo -e "pass-band frequencies.${RCL}"
                  echo ""
                  echo "Enter a non-negative numeric value."
                  echo -e ""
                  echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
               fi
         done
         fi
         ##########################################################
         # USER: Chebyshev II or elliptic
         #        ... stopband ripple
         ##########################################################
         if [[ "${prestats_tmpf[${cxt}]}" == "chebyshev2" ]] \
            || [[ "${prestats_tmpf[${cxt}]}" == "elliptic" ]]
            then
            xst2=0
            while [[ "$xst2" == "0" ]]
               do
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               read -p "Specify the STOPBAND RIPPLE: " -e -i \
                  ${prestats_tmpf_ripple2[${cxt}]} buffer
               if [[ $buffer =~ $POSNUM ]]
                  then
                  prestats_tmpf_ripple2[${cxt}]=$buffer
                  echo "Stopband ripple: ${prestats_tmpf_ripple2[${cxt}]}"
                  echo ""
                  xst2=1
               elif [[ "${buffer}" == "m" ]]
                  then
                  break 2
               else
                  echo ""
                  echo -e "${CYA}Chebyshev II and elliptic filters allow for sharper "
                  echo "discrimination between accepted and attenuated "
                  echo "frequencies than Butterworth filters of the same "
                  echo "order at the cost of a 'ripple' in the stop band. "
                  echo "This ripple results in somewhat uneven removal of "
                  echo -e "stop-band frequencies.${RCL}"
                  echo ""
                  echo "Enter a non-negative numeric value"
                  echo -e ""
                  echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
               fi
         done
         fi
         ##########################################################
         # USER: Butterworth, Chebyshev, or elliptic
         #        ... discard volumes from beginning and end
         ##########################################################
         xst2=0
         while [[ "$xst2" == "0" ]]
            do
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            echo ""
            echo "Specify the number of VOLUMES to DISCARD"
            read -p "from timeseries boundaries: " -e -i \
               ${prestats_tmpf_dvols[${cxt}]} buffer
            if [[ $buffer =~ $POSINT ]]
               then
               prestats_tmpf_dvols[${cxt}]=$buffer
               echo "Discarding ${prestats_tmpf_dvols[${cxt}]} volumes"
               echo ""
               xst2=1
            elif [[ "${buffer}" == "m" ]]
               then
               break 2
            else
               echo ""
               echo -e "${CYA}Application of certain filters may result in "
               echo "extreme values at the beginnings and ends of "
               echo "timeseries; these values may be removed by "
               echo "discarding time points."
               echo ""
               echo "For forward filters, only volumes from the"
               echo "beginning of the timeseries are discarded."
               echo "For forward/reverse filters, volumes are"
               echo "discarded from both the beginning and end"
               echo -e "of the timeseries.${RCL}"
               echo ""
               echo "Enter a non-negative integer."
               echo -e ""
               echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            fi
         done
         echo "Filter setup complete."
      fi
      break
      ;;
      
   ################################################################
   # USER: Low pass cutoff
   ################################################################
   7)
      xst2=0
      while [ "$xst2" == "0" ]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         if [[ "${prestats_tmpf[${cxt}]}" == "none" ]]
            then
            echo -e "${RED}WARNING${RCL}:temporal filter is currently disabled."
            echo "Setting the low-pass cutoff will have no effect"
            echo "unless the temporal filter is enabled."
         fi
         read -p "Specify the LOW PASS CUTOFF for the temporal filter
            in Hz (n for Nyquist): " -e -i ${prestats_lopass[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            prestats_lopass[${cxt}]=$buffer
            echo "Low pass cutoff: ${prestats_lopass[${cxt}]} Hz"
            xst2=1
         elif [[ "$buffer" == "n" ]]
            then
            prestats_lopass[${cxt}]=nyquist
            echo "Low pass cutoff: Nyquist frequency"
            echo "Filter is maximally permissive: no signal will be removed."
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Any frequencies below the low-pass cutoff will be "
            echo "counted as pass-band frequencies; these will be "
            echo "retained by the filter when it is applied. (Unless "
            echo "they are also below the high-pass cutoff!)"
            echo ""
            echo "Functional connectivity between regions of interest "
            echo "is typically determined on the basis of synchrony "
            echo "in low-frequency fluctuations (Biswal et al., 1995); "
            echo "therefore, removing such frequencies may effectively "
            echo "remove noise from the timeseries while retaining "
            echo "signal of interest. For a contrasting view, see "
            echo -e "Boubela et al. (2013).${RCL}"
            echo ""
            echo "The input must be a numeric value, or n for no filter."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: High pass cutoff
   ################################################################
   8)
      xst2=0
      while [ "$xst2" == "0" ]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         if [ "${prestats_tmpf[${cxt}]}" == "none" ]
            then
            echo -e "${RED}WARNING${RCL}:temporal filter is currently disabled."
            echo "Setting the high-pass cutoff will have no effect"
            echo "unless the temporal filter is enabled."
         fi
         read -p "Specify the HIGH PASS CUTOFF for the temporal filter
            in Hz (0 for none): " -e -i ${prestats_hipass[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            prestats_hipass[${cxt}]=$buffer
            echo "High pass cutoff: ${prestats_hipass[${cxt}]} Hz"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Any frequencies above the high-pass cutoff will be "
            echo "counted as pass-band frequencies; these will be "
            echo "retained by the filter when it is applied. (Unless "
            echo "they are also above the low-pass cutoff!)"
            echo ""
            echo "High-pass filters can be used to remove very-low-"
            echo "frequency drift from an acquisition; this is a "
            echo "form of scanner noise. The demean/detrend option "
            echo -e "additionally removes linear and polynomial drift.${RCL}"
            echo ""
            echo "Enter a non-negative number. Enter 0 for no filter."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
#   ################################################################
#   # USER: Fractional intensity threshold
#   ################################################################
#   9)
#      xst2=0
#      while [ "$xst2" == "0" ]
#         do
#         echo ""; echo ""
#         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
#         echo ""
#         read -p "Specify the FRACTIONAL INTENSITY THRESHOLD for
#            brain extraction: "\
#            -e -i ${prestats_fit[${cxt}]} buffer
#         if [[ $buffer =~ $POSNUM ]] \
#            && [ "$(echo "$buffer 0"|awk '{print ($1 > $2)}')" -eq "1" ] \
#            && [ "$(echo "$buffer 1"|awk '{print ($1 < $2)}')" -eq "1" ]
#            then
#            prestats_fit[${cxt}]=$buffer
#            echo "Fractional intensity threshold: ${prestats_fit[${cxt}]}"
#            xst2=1
#         elif [[ "${buffer}" == "m" ]]
#            then
#            break 2
#         else
#            echo ""
#            echo -e "${CYA}The fractional intensity threshold determines how "
#            echo "much of an image will be retained after non-brain "
#            echo "voxels are zeroed. A more liberal mask can be "
#            echo "obtained using a lower fractional intensity "
#            echo -e "threshold.${RCL}"
#            echo ""
#            echo "The input must be a numeric value between 0 and 1."
#            echo -e ""
#            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
#         fi
#      done
#      break
#      ;;
#      
#   ################################################################
#   # USER: Brain-background threshold
#   ################################################################
#   10)
#      xst2=0
#      while [ "$xst2" == "0" ]
#         do
#         echo ""; echo ""
#         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
#         echo ""
#         read -p "Specify the BRAIN-BACKGROUND THRESHOLD for
#            brain extraction: "\
#            -e -i ${prestats_bbgthr[${cxt}]} buffer
#         if [[ $buffer =~ $POSNUM ]] \
#            && [ "$(echo $buffer 0|awk '{print ($1 > $2)}')" -eq "1" ] \
#            && [ "$(echo $buffer 1|awk '{print ($1 < $2)}')" -eq "1" ]
#            then
#            prestats_bbgthr[${cxt}]=$buffer
#            echo "Brain-background threshold: ${prestats_bbgthr[${cxt}]}"
#            xst2=1
#         elif [[ "${buffer}" == "m" ]]
#            then
#            break 2
#         else
#            echo ""
#            echo -e "${CYA}The brain-background threshold determines how "
#            echo "much of an image will be retained after non-brain "
#            echo "voxels are zeroed. A more liberal mask can be "
#            echo -e "obtained using a lower brain-background threshold.${RCL}"
#            echo ""
#            echo "The input must be a numeric value between 0 and 1."
#            echo -e ""
#            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
#         fi
#      done
#      break
#      ;;
      
   ################################################################
   # USER: Detrend order
   ################################################################
   9)
      xst2=0
      while [ "$xst2" == "0" ]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Specify the polynomial ORDER for DEMEANING and DETRENDING: "\
            -e -i ${prestats_dmdt[${cxt}]} buffer
         if [[ $buffer =~ $POSINT ]]
            then
            prestats_dmdt[${cxt}]=$buffer
            echo "Detrend order: ${prestats_dmdt[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "auto" ]]
            then
            prestats_dmdt[${cxt}]=$buffer
            echo "Detrend order will be computed automatically."
            xst2=1
            break
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Scanner drift may introduce linear or polynomial trends "
            echo "into imaging data; these trends may be removed using a "
            echo "general linear model-based fit. Notably, removal of "
            echo "trends in this manner will also remove the timeseries "
            echo "mean from the data, which may be undesirable for "
            echo -e "analyses in which absolute intensity is important.${RCL}"
            echo ""
            echo "The input must be a nonnegative integer."
            echo -e "${CYA}An order of ${RED}0${CYA} results in demeaning only."
            echo -e "Entering ${RED}auto${CYA} will automatically compute an appropriate"
            echo " value (following AFNI) based on the duration of the scan."
            echo " The formula used to compute this is:"
            echo -e "           ${RED}floor(1 + TR*nVOLS / 150)${RCL}"; echo ""
            echo -e "${CYA}For another ${RED}data-driven${CYA} approach to detrending, remove "
            echo " DMT from prestats and apply a high-pass Gaussian filter "
            echo " in this module. (A filter with higher rolloff can be added "
            echo " later during the regress module.)"; echo ""
            echo "To skip this step, edit DMT out of the processing order."
            echo -e "${RCL}"
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Censor high-motion volumes
   ################################################################
   10)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to CENSOR high-motion volumes?"
      select option in \
         "Yes, iteratively during processing" \
         "Yes, after all processing steps are complete" \
         "No, only flag them but do not censor them"
         do
         case $REPLY in
         ##########################################################
         # USER: Censor high-motion volumes
         #        -> Yes, interatively during processing
         ##########################################################
         1)
            prestats_censor[${cxt}]="iter"
            echo "Censoring: ${prestats_censor[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Censor high-motion volumes
         #        -> Yes, after all processing steps are complete
         ##########################################################
         2)
            prestats_censor[${cxt}]="final"
            echo "Censoring: ${prestats_censor[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Censor high-motion volumes
         #        -> No
         ##########################################################
         3)
            prestats_censor[${cxt}]="none"
            echo "Censoring: ${prestats_censor[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Censor high-motion volumes
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Censor high-motion volumes
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Censoring high-motion volumes prevents them from"
            echo "exerting inordinate influence upon connectivity results."
            echo "It is a comparatively aggressive preprocessing strategy,"
            echo "and its effects on connectivity dynamics are not well"
            echo "understood at this time. (Naive sliding windows, beware!)"
            echo ""
            echo -e "${RED}Final${CYA} Censoring after completion of processing is equivalent"
            echo "to motion scrubbing (Power et al., 2012). Censoring"
            echo -e "${RED}iteratively${CYA}, during processing, is analogous to"
            echo "the 'reprocessing' reported by Power et al. (2014)."
            echo "That is, censored valumes are not taken into account"
            echo "during demeaning, detrending, or confound regression."
            echo "During temporal filtering, they are replaced using"
            echo "interpolation based on Lomb-Scargle spectral"
            echo "decomposition, and they are recensored after processing"
            echo "is completed. This method is recommended over simple"
            echo "scrubbing."
            echo ""
            echo "This value will propagate to all future modules from"
            echo "the first instance of prestats that includes motion"
            echo -e "realignment!${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      #############################################################
      # USER: Censor high-motion volumes
      #        ... specify criterion dimension
      #############################################################
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "What value should be used to determine whether each "
      echo "volume should be censored (or flagged)?"
      echo ""
      echo "(If you have selected no censoring, this field will "
      echo "instead specify what criterion to use for flagging "
      echo "but not removing high-motion volumes.)"
      select option in \
         "Framewise displacement (FD)" \
         "Relative root mean square displacement (rel RMS)"
         do
         case $REPLY in
         ##########################################################
         # USER: Censor high-motion volumes
         #        ... specify criterion dimension
         #        -> Framewise displacement (FD)
         ##########################################################
         1)
            prestats_censor_cr[${cxt}]=fd
            echo "Using framewise displacement"
            break
            ;;
         ##########################################################
         # USER: Censor high-motion volumes
         #        ... specify criterion dimension
         #        -> Relative root mean square displacement
         #           (rel RMS)
         ##########################################################
         2)
            prestats_censor_cr[${cxt}]=rms
            echo "Using relative RMS displacement"
            break
            ;;
         ##########################################################
         # USER: Censor high-motion volumes
         #        ... specify criterion dimension
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Censor high-motion volumes
         #        ... specify criterion dimension
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "Framewise displacement is a simple metric of the "
            echo "level of subject motion that occurs during each "
            echo "acquisition volume. It is equal to the sum of "
            echo "absolute values of the 6 realignment parameters, "
            echo "in millimeters."
            echo ""
            echo "Relative RMS displacement is another metric of "
            echo "framewise subject motion. It uses the RMS deviation "
            echo "matrix formulation of the distance between the "
            echo "affine transforms used to realign a pair of adjacent "
            echo "volumes to a reference volume as a proxy for a "
            echo "subject's overall level of motion during the "
            echo "acquisition of each volume (Jenkinson, FMRIB TR99MJ1)."
            echo -e "${RCL}"
            echo ""
            echo "Select a valid option: [1|2]."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      #############################################################
      # USER: Censor high-motion volumes
      #        ... specify FD threshold
      #############################################################
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         if [[ ${prestats_censor_cr[${cxt}]} == fd ]]
            then
            echo "Specify the maximum FRAMEWISE DISPLACEMENT in mm that"
            echo "a volume may attain before it is censored (or flagged):"
            echo ""
            echo "(If you have selected no censoring, this field will "
            echo "instead specify what value to use for flagging "
            echo "but not removing high-motion volumes.)"
         elif [[ ${prestats_censor_cr[${cxt}]} == rms ]]
            then
            echo "Specify the maximum RELATIVE RMS DISPLACEMENT in mm that"
            echo "a volume may attain before it is censored (or flagged):"
            echo ""
            echo "(If you have selected no censoring, this field will "
            echo "instead specify what value to use for flagging "
            echo "but not removing high-motion volumes.)"
         fi
         read -p "" -e -i ${prestats_fd[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            prestats_censor[${cxt}]=${prestats_censor[${cxt}]},${buffer}
            echo "Maximum FD: $buffer mm"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "Framewise displacement is a simple metric of the "
            echo "level of subject motion that occurs during each "
            echo "acquisition volume. It is equal to the sum of "
            echo "absolute values of the 6 realignment parameters, "
            echo "in millimeters."
            echo ""
            echo "Relative RMS displacement is another metric of "
            echo "framewise subject motion. It uses the RMS deviation "
            echo "matrix formulation of the distance between the "
            echo "affine transforms used to realign a pair of adjacent "
            echo "volumes to a reference volume as a proxy for a "
            echo "subject's overall level of motion during the "
            echo "acquisition of each volume (Jenkinson, FMRIB TR99MJ1)."
            echo -e "${RCL}"
            echo "Power et al. (2014) recommend censoring volumes"
            echo -e "with FD exceeding ${RED}0.2${RCL} mm."
            echo ""
            echo "Enter a positive number."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Re-run
   ################################################################
   11)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            prestats_rerun[${cxt}]="Y"
            echo "Re-run: ${prestats_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            prestats_rerun[${cxt}]="N"
            echo "Re-run: ${prestats_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo "completed analyses will be repeated."
            echo -e "${RCL}"
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   12)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of"
      echo "INTERMEDIATE steps in the prestats algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Delete intermediate files
         #        -> Yes
         ##########################################################
         1)
            prestats_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${prestats_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> No
         ##########################################################
         2)
            prestats_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${prestats_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Processing order
   ################################################################
   13)
      #############################################################
      # If you wish to add a new subroutine/step to preprocessing,
      # make sure you edit it into the constant $ALLOWED at the
      # beginning of the script.
      #############################################################
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the order in which you would like to run"
      echo "preprocessing. Exercise discretion when using this"
      echo "option; unless you have a compelling reason for doing"
      echo "otherwise, it is strongly recommended you use the"
      echo "default order."
      echo ""
      echo "The preprocessing order should be a string of"
      echo "concatenated three-character substrings. Each"
      echo "substring encodes a particular preprocessing"
      echo "step; this feature should primarily be used to"
      echo "selectively run only parts of the preprocessing"
      echo "algorithm."
      echo ""
      echo "Permitted codes include:"
      echo -e "${CYA} *${RCL} DVO: discard first n volumes"
      echo -e "${CYA} *${RCL} MPR: compute realignment parameters (do not realign)"
      echo -e "${CYA} *${RCL} MCO: correct for subject motion (realign)"
      echo -e "${CYA} *${RCL} STM: slice timing correction"
      echo -e "${CYA} *${RCL} BXT: brain extraction"
      echo -e "${CYA} *${RCL} DSP: despike BOLD timeseries"
      echo -e "${CYA} *${RCL} DMT: demean/detrend BOLD timeseries"
      echo -e "${CYA} *${RCL} SPT: spatial filter"
      echo -e "${CYA} *${RCL} TMP: temporal filter"
      echo ""
      echo "For instance, MCOBXT would only perform motion"
      echo "correction and brain extraction. Note that certain"
      echo "orders should generally not be used -- for"
      echo "instance, brain extraction should not be run"
      echo "before motion correction."
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Specify the PREPROCESSING ORDER: "\
            -e -i ${prestats_process[${cxt}]} buffer
         if [[ $buffer =~ $ALPHA ]]
            then
            echo "Verifying code is valid: $buffer"
            rem=$buffer
            while [[ "${#rem}" -gt "0" ]]
               do
               cur=${rem:0:3}
               rem=${rem:3:${#rem}}
               if [[ "$ALLOWED" != *"-${cur}-"* ]]
                  then
                  echo "Disallowed code: $cur"
                  echo "Code for preprocessing order is invalid."
                  echo "Please specify a different code."
                  rem=""
                  cur=FALSE
               fi
            done
            if [[ "$cur" != "FALSE" ]]
               then
               prestats_process[${cxt}]=$buffer
               xst2=1
               echo "Preprocessing order validated"
               echo "Processing order: ${prestats_process[${cxt}]}"
            fi
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}The preprocessing order should be a string of"
            echo "concatenated three-character substrings. Each"
            echo "substring encodes a particular preprocessing"
            echo "step; this feature should primarily be used to"
            echo "selectively run only parts of the preprocessing"
            echo "algorithm."
            echo ""
            echo "Permitted codes include:"
            echo -e "${RED}DVO${RCL}: discard first (or last) n volumes"
            echo -e "${RED}MPR${RCL}: compute realignment parameters (do not realign)"
            echo -e "${RED}MCO${RCL}: correct for subject motion (realign)"
            echo -e "${RED}STM${RCL}: slice timing correction"
            echo -e "${RED}BXT${RCL}: brain extraction"
            echo -e "${RED}DSP${RCL}: despike BOLD timeseries"
            echo -e "${RED}DMT${RCL}: demean/detrend BOLD timeseries"
            echo -e "${RED}SPT${RCL}: spatial filter"
            echo -e "${RED}TMP${RCL}: temporal filter"
            echo ""
            echo -e "${CYA}For instance, MCOBXT would only perform motion"
            echo "correction and brain extraction. Note that certain"
            echo "orders should generally not be used -- for"
            echo "instance, brain extraction should not be run"
            echo -e "before motion correction.${RCL}"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Reset default parameters
   ################################################################
   14)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/prestats/prestats.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   15)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      $0 INFO
      ;;
      
   esac
done
done

###################################################################
# write parameters to design file
###################################################################
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} PRESTATS" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "prestats_dvols[${cxt}]=${prestats_dvols[${cxt}]}" >> $design
echo "prestats_stime[${cxt}]=${prestats_stime[${cxt}]}" >> $design
echo "prestats_sdir[${cxt}]=${prestats_sdir[${cxt}]}" >> $design
echo "prestats_sptf[${cxt}]=${prestats_sptf[${cxt}]}" >> $design
echo "prestats_smo[${cxt}]=${prestats_smo[${cxt}]}" >> $design
echo "prestats_tmpf[${cxt}]=${prestats_tmpf[${cxt}]}" >> $design
echo "prestats_hipass[${cxt}]=${prestats_hipass[${cxt}]}" >> $design
echo "prestats_lopass[${cxt}]=${prestats_lopass[${cxt}]}" >> $design
echo "prestats_fit[${cxt}]=${prestats_fit[${cxt}]}" >> $design
echo "prestats_bbgthr[${cxt}]=${prestats_bbgthr[${cxt}]}" >> $design
echo "prestats_dmdt[${cxt}]=${prestats_dmdt[${cxt}]}" >> $design
echo "prestats_censor[${cxt}]=${prestats_censor[${cxt}]}" >> $design
echo "prestats_censor_cr[${cxt}]=${prestats_censor_cr[${cxt}]}" >> $design
echo "prestats_rerun[${cxt}]=${prestats_rerun[${cxt}]}" >> $design
echo "prestats_cleanup[${cxt}]=${prestats_cleanup[${cxt}]}" >> $design
echo "prestats_process[${cxt}]=${prestats_process[${cxt}]}" >> $design
if [[ "${prestats_stime_order[${cxt}]}" == "true" ]]
   then
   echo "prestats_stime_order[${cxt}]=${prestats_stime_order[${cxt}]}" >> $design
   echo prestats_stime_opath[${cxt}]=$(${XCPEDIR}/utils/genpath ${prestats_stime_opath[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM) >> $design
fi
if [[ "${prestats_stime_timing[${cxt}]}" == "true" ]]
   then
   echo "prestats_stime_timing[${cxt}]=${prestats_stime_timing[${cxt}]}" >> $design
   echo prestats_stime_tpath[${cxt}]=$(${XCPEDIR}/utils/genpath ${prestats_stime_tpath[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM) >> $design
fi
if [[ "$genfilt" == "true" ]]
   then
   echo "prestats_tmpf_order[${cxt}]=${prestats_tmpf_order[${cxt}]}" >> $design
   echo "prestats_tmpf_pass[${cxt}]=${prestats_tmpf_pass[${cxt}]}" >> $design
   echo "prestats_tmpf_ripple[${cxt}]=${prestats_tmpf_ripple[${cxt}]}" >> $design
   echo "prestats_tmpf_ripple2[${cxt}]=${prestats_tmpf_ripple2[${cxt}]}" >> $design
   echo "prestats_tmpf_dvols[${cxt}]=${prestats_tmpf_dvols[${cxt}]}" >> $design
fi

