#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for motion benchmarking
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]]
   then
   echo ""
   echo -e "${CYA}BENCHMARK${RCL}:"
   echo "This module computes benchmark measures for the current "
   echo "processing stream. Measures include (i) QC-RCFC correlations "
   echo "of functional connections with motion (number of related "
   echo "edges and absolute median correlation), (ii) distance-"
   echo "dependence of residual motion artefact, (iii) an estimate of "
   echo "the degrees of freedom lost through denoising procedures, "
   echo "and (iv) voxelwise activation timeseries plots for a set of "
   echo "example subjects."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/benchmark/benchmark.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

###################################################################
# If the ANTsCT directory is specified, then automatically
# fill segmentation information from the ANTsCT directory.
###################################################################
if [[ ! -z "${xants}" ]]
   then
   benchmark_mask[${cxt}]=$(\ls -d1 ${xants}/*BrainSegmentation.*)
fi

################################################################### 
# The ugly while loop is necessary for the select options to update
# correctly
################################################################### 
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""; echo ""
echo -e "Welcome to ${RED}benchmark${RCL} model initialisation for the XCP "
echo "Engine. Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "Confound variables: ${benchmark_confmat[${cxt}]}" \
   "Network library: ${benchmark_lib[${cxt}]}" \
   "Correction for multiple comparisons: ${benchmark_sig[${cxt}]}" \
   "Brain segmentation: ${benchmark_mask[${cxt}]}" \
   "Create voxelwise plots for ${benchmark_nsubj[${cxt}]} subjects" \
   "Re-run: ${benchmark_rerun[${cxt}]}" \
   "Delete intermediate files: ${benchmark_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
   
   ################################################################
   # USER: Confound variables
   ################################################################
   1)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Select the path to a file containing values of confound "
         echo "variables for all subjects."
         read -p ""\
            -e -i ${benchmark_confmat[${cxt}]} buffer
         if [[ -e $buffer ]]
            then
            benchmark_confmat[${cxt}]=$buffer
            echo "Path to confound matrix: ${benchmark_confmat[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "When QC-RSFC correlations (motion-connectivity correlations) "
            echo "are computed, any confound variables specified here will be "
            echo "included in the model. This can help to disentangle the "
            echo "effects of motion from those of variables related to motion, "
            echo "such as age and sex."
            echo ""
            echo "The confound matrix should be formatted to include each "
            echo "subject's identifying variables (fields in the main cohort "
            echo "file that do not correspond to images or files) followed "
            echo "by the confound values for that subject. Fields should "
            echo "be comma-separated."
            echo -e "${RCL}"
            echo "The input must be a path to an image."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Network library
   ################################################################
   2)
      xst2=0
      [[ -z ${benchmark_lib[${cxt}]} ]] \
         && buffer0=${XCPEDIR}/seeds \
         || buffer0=${benchmark_lib[${cxt}]}
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the PATH to the parcellation library "
         echo "that you wish to use for ROI-wise quantification"
         echo "of perfusion."
         echo ""
         echo "To create a new parcellation library, enter the"
         echo -e "string ${RED}NEW${RCL}."; echo ""
         read -p "" -e -i ${buffer0} buffer
         ext=$(echo "$buffer"|cut -d"." -f1 --complement)
         if [[ -e "$buffer" ]] \
            && [[ "${ext}" == "parc" ]]
            then
            benchmark_lib[${cxt}]=$buffer
            echo "Parcellation library selected:"
            echo ${benchmark_lib[${cxt}]}; echo ""
            xst2=1
         elif [[ "${buffer}" == "NEW" ]]
            then
            xst2=0
            while [[ "$xst2" == "0" ]]
               do
               echo "Enter a name for the new parcellation library that you "
               echo "wish to create (do NOT include the .parc extension):"
               [[ ! -z ${analysis} ]] && buffer=$analysis || buffer=roi
               read -p "" -e -i $buffer parc
               [[ -z $(echo ${parc}|grep -i '/') ]] && parc=${XCPEDIR}/seeds/${parc}
               if [[ -e "${parc}.parc" ]] || [[ -e ${parc} ]]
                  then
                  echo "Library $parc already exists. Overwrite?"
                  select option in \
                     "Yes" \
                     "Edit this library instead" \
                     "No"
                     do
                     case $REPLY in
                     1)
                        ${XCPEDIR}/utils/parcliber \
                           -o ${parc}.parc \
                           -s ${xsubj}
                        [[ -e ${parc} ]] && benchmark_lib[${cxt}]=${parc}.parc
                        xst2=1
                        break
                        ;;
                     2)
                        ${XCPEDIR}/utils/parcliber \
                           -o ${parc}.parc \
                           -s ${xsubj} \
                           -l ${parc}.parc
                        [[ -e ${parc} ]] && benchmark_lib[${cxt}]=${parc}.parc
                        xst2=1
                        break
                        ;;
                     3)
                        break
                        ;;
                     esac
                  done
               else
                  ${XCPEDIR}/utils/parcliber \
                     -o ${parc}.parc \
                     -s ${xsubj}
                  [[ -e ${parc} ]] && benchmark_lib[${cxt}]=${parc}.parc
                  xst2=1
               fi
            done
            break 2
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo "The input must be either be a path to a parcellation "
            echo -e "library (.parc) file or the string ${RED}NEW${RCL}."
            echo ""
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      pars="${pars} ${curlib}"
      break
      ;;
      
   ################################################################
   # USER: Correction for multiple comparisons
   ################################################################
   3)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "What procedure do you wish to use for multiple-"
      echo "comparisons correction?"
      select option in \
         "FDR (False discovery rate)" \
         "Bonferroni" \
         "None"
         do
         case $REPLY in
         ##########################################################
         # USER: Correction for multiple comparisons
         #        -> FDR
         ##########################################################
         1)
            benchmark_sig[${cxt}]=fdr
            echo "Correction for multiple comparisons: ${benchmark_sig[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Correction for multiple comparisons
         #        -> Bonferroni
         ##########################################################
         2)
            benchmark_sig[${cxt}]=bonferroni
            echo "Correction for multiple comparisons: ${benchmark_sig[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Correction for multiple comparisons
         #        -> None
         ##########################################################
         3)
            benchmark_sig[${cxt}]=none
            echo "Correction for multiple comparisons: ${benchmark_sig[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Correction for multiple comparisons
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Correction for multiple comparisons
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "Because QC-RSFC correlations are computed at every "
            echo "edge in each graph, the chance of non-significant "
            echo "results being falsely reported as significant is "
            echo "elevated in proportion to the number of edges. The "
            echo "risk of false positives can be reduced by taking "
            echo "into account the number of comparisons being made "
            echo "and applying a correction to the reported p-values."
            echo -e "${RCL}"
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Brain segmentation
   ################################################################
   4)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Select the path to a volume containing tissue SEGMENTATION"
         echo "for subject ((${xsubj})): "
         read -p ""\
            -e -i ${benchmark_mask[${cxt}]} buffer
         if [[ $(imtest $buffer) == "1" ]]
            then
            benchmark_mask[${cxt}]=$buffer
            echo "Path to GM segmentation: ${benchmark_mask[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "The tissue segmentation is used to classify voxelwise "
            echo "timeseries according to their tissue class. If this "
            echo "segmentation is not found, then a whole-brain mask will "
            echo "be used by default."
            echo -e "${RCL}"
            echo "The input must be a path to an image."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   
   ################################################################
   # USER: Voxelwise activation plots
   ################################################################
   5)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "How many subject-level VOXELWISE ACTIVATION PLOTS "
         echo "do you wish to generate for the current analysis?"
         read -p ""\
            -e -i ${benchmark_nsubj[${cxt}]} buffer
         element1=$(echo ${buffer}|cut -d"," -f1| cut -d":" -f1)
         if [[ $element1 =~ $NUM ]]
            then
            benchmark_nsubj[${cxt}]=$buffer
            echo "Generating voxelwise plots for ${benchmark_nsubj[${cxt}]} subjects"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "Voxelwise activation timeseries are grouped according "
            echo "to tissue classes as defined in the segmentation. They "
            echo "can facilitate visualisation of the extent of global "
            echo "artefact."
            echo -e "${RCL}."
            echo "The input must be numeric."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Re-run
   ################################################################
   6)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            benchmark_rerun[${cxt}]="Y"
            echo "Re-run: ${benchmark_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            benchmark_rerun[${cxt}]="N"
            echo "Re-run: ${benchmark_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   7)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of INTERMEDIATE "
      echo "steps in the benchmarking algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Delete intermediate files
         #        -> Yes
         ##########################################################
         1)
            benchmark_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${benchmark_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> No
         ##########################################################
         2)
            benchmark_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${benchmark_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset default parameters
   ################################################################
   8)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/benchmark/benchmark.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   9)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      ;;
       
   esac
done

done

###################################################################
# write parameters to design file
###################################################################

echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} BENCHMARK" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "benchmark_confmat[${cxt}]=${benchmark_confmat[${cxt}]}" >> $design
echo "benchmark_lib[${cxt}]=${benchmark_lib[${cxt}]}" >> $design
echo "benchmark_sig[${cxt}]=${benchmark_sig[${cxt}]}" >> $design
echo $(${XCPEDIR}/utils/genpath benchmark_mask[${cxt}]=${benchmark_mask[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo "benchmark_nsubj[${cxt}]=${benchmark_nsubj[${cxt}]}" >> $design
echo "benchmark_rerun[${cxt}]=${benchmark_rerun[${cxt}]}" >> $design
echo "benchmark_cleanup[${cxt}]=${benchmark_cleanup[${cxt}]}" >> $design
