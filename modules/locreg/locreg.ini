#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for modelling voxelwise confounds
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]]
   then
   echo ""
   echo -e "${CYA}LOCREG${RCL}:"
   echo "This module models artefactual signals present in a 4D "
   echo "image on a voxelwise basis. Modelled artefact can then "
   echo "be removed from the image using the REGRESS module. For "
   echo "instance, this module can model each voxel's local white "
   echo "matter and CSF signal for subsequent removal. Because "
   echo "this module requires a structural segmentation, the COREG "
   echo "module should generally be run as a prerequisite."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/locreg/locreg.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

################################################################### 
# override defaults if structural path is specified
################################################################### 
if [[ ! -z "${xstruct}" ]]
then
locreg_gm_path[${cxt}]=$(ls -d1 $xstruct\
   |rev\
   |cut -d"/" -f1 --complement\
   |rev)
locreg_wm_path[${cxt}]=$(ls -d1 $xstruct\
   |rev\
   |cut -d"/" -f1 --complement\
   |rev)
locreg_csf_path[${cxt}]=$(ls -d1 $xstruct\
   |rev\
   |cut -d"/" -f1 --complement\
   |rev)
fi

###################################################################
# ..or if the ANTsCT directory is specified, then automatically
# fill segmentation information from the ANTsCT directory.
###################################################################
if [[ ! -z "${xants}" ]]
   then
   locreg_gm_path[${cxt}]=$(\ls ${xants}/*BrainSegmentation.*)
   locreg_gm_val[${cxt}]=2,4
   locreg_wm_path[${cxt}]=$(\ls ${xants}/*BrainSegmentation.*)
   locreg_wm_val[${cxt}]=3
   locreg_csf_path[${cxt}]=$(\ls ${xants}/*BrainSegmentation.*)
   locreg_csf_val[${cxt}]=1
fi

################################################################### 
# The ugly while loop is necessary for the select options to update
# correctly
################################################################### 
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""; echo ""
echo -e "Welcome to ${RED}local confound${RCL} model initialisation for "
echo "the XCP Engine. Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "Local grey matter: ${locreg_gm[${cxt}]}" \
   "Local white matter: ${locreg_wm[${cxt}]}" \
   "Local cerebrospinal fluid: ${locreg_csf[${cxt}]}" \
   "Local mean signal: ${locreg_lms[${cxt}]}" \
   "Re-run: ${locreg_rerun[${cxt}]}" \
   "Delete intermediate files: ${locreg_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
      
   ################################################################
   # USER: Local grey matter
   ################################################################
   1)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to model the local GREY MATTER signal?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Local grey matter
         #        -> Yes
         ##########################################################
         1)
            locreg_gm[${cxt}]="Y"
            echo "Local grey matter: ${locreg_gm[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Local grey matter
         #        -> No
         ##########################################################
         2)
            locreg_gm[${cxt}]="N"
            echo "Local grey matter: ${locreg_gm[${cxt}]}"
            break 2
            ;;
         ##########################################################
         # USER: Local grey matter
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Local grey matter
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}Tissue-based nuisance regressors are capable of reducing "
            echo "the influence of subject movement (as well as physiological "
            echo "artefacts) on the data. Local white matter signal is most "
            echo "often used to this end (e.g., Jo et al., 2013). This "
            echo "option will require a segmentation of the subject's "
            echo "anatomical/structual image according to tissue class."
            echo ""
            echo "Caution:"
            echo "If you elect to model the overall local signal (or "
            echo "the local GM signal), it is possible that you will "
            echo "remove more signal than noise. Spatial smoothing "
            echo "is thought to improve the signal-to-noise ratio by "
            echo "averaging signal in adjacent voxels. This option, "
            echo "by contrast, removes signal that is common to nearby "
            echo "voxels. The outcome is untested and probably "
            echo "dependent on the voxel neighbourhood size."
            echo ""
            echo -e "${RED}For advanced users${CYA}: The XCP Engine's locreg module offers "
            echo "the option of including up to three tissue- or RoI-based "
            echo "regressors. While nominally these are the mean GM, WM, and "
            echo "CSF timeseries, it is possible to include mean signals from "
            echo -e "any three RoIs for which a binary mask is available.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      #############################################################
      # USER: Local grey matter
      #        -> Yes
      #        ...segmentation
      #############################################################
      xst2=0
      if [[ -z "$segdir" ]]
         then segdir=${locreg_gm_path[${cxt}]}
      fi
      if [[ $(imtest ${locreg_gm_path[${cxt}]}) != "1" ]]
         then
         buffer=$segdir
      else
         buffer=${locreg_gm_path[${cxt}]}
      fi
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Select the path to a volume containing GREY MATTER SEGMENTATION"
         echo "for subject ((${xsubj})): "
         read -p ""\
            -e -i $buffer buffer
         if [[ $(imtest $buffer) == "1" ]]
            then
            segdir=$( ls -d1 ${buffer} |rev|cut -d"/" -f1 --complement|rev)
            locreg_gm_path[${cxt}]=$buffer
            echo "Path to GM segmentation: ${locreg_gm_path[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            locreg_gm[${cxt}]="N"
            break 2
         else
            echo -e "${CYA}Including mean tissue timeseries as nuisance regressors "
            echo "requires a known segmentation of the structural image into "
            echo "tissue classes. If you provided an output directory from the "
            echo "ANTsCT routine, then a segmentation will automatically be "
            echo -e "provided.${RCL}"
            echo ""
            echo "The input must be a path to an image."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      #############################################################
      # USER: Local grey matter
      #        -> Yes
      #        ...value in segmentation
      #############################################################
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the VALUE(s) corresponding to grey matter in"
         echo "the segmentation. If all nonzero voxels correspond to"
         echo "grey matter, enter ALL. To preview the image, enter"
         echo "VIEW."
         read -p ""\
            -e -i ${locreg_gm_val[${cxt}]} buffer
         element1=$(echo ${buffer}|cut -d"," -f1| cut -d":" -f1)
         if [[ $buffer == "ALL" ]]
            then
            locreg_gm_val[${cxt}]=all
            echo "All nonzero voxels in the target image correspond"
            echo "to grey matter. The image will only be binarised"
            echo "prior to timeseries extraction."
            xst2=1
         elif [[ $buffer == "VIEW" ]]
            then
            echo "Opening target image for viewing..."
            fslview ${locreg_gm_path[${cxt}]} &
         elif [[ $element1 =~ $NUM ]]
            then
            locreg_gm_val[${cxt}]=$buffer
            echo "Grey matter voxel value set to ${locreg_gm_val[${cxt}]}."
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            locreg_gm[${cxt}]="N"
            break 2
         else
            echo -e "${CYA}In some segmentations, such as the one output by "
            echo "ANTs Cortical Thickness, each tissue class is assigned "
            echo "a different intensity value in the segmentation volume. "
            echo "For instance, 1 might correspond to CSF, 2 to cortical "
            echo "grey matter, 3 to white matter, etc. If your "
            echo "segmentation is strictly a binary-valued white matter "
            echo -e "mask, then enter ${RED}ALL${CYA}. If you are not sure, you can view "
            echo -e "the segmentation by entering ${RED}VIEW${CYA}. To enter a "
            echo "range of values, use the colon (:) operator; to enter "
            echo "multiple values, use the comma (,) operator. For instance, "
            echo "1:5,9 would indicate all values in the interval [1,5] "
            echo -e "as well as 9${RCL}."
            echo ""
            echo "The input must either be numeric or one of the"
            echo "case-sensitive strings ALL or VIEW."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      xst2=0
      #############################################################
      # USER: Local grey matter
      #        -> Yes
      #        ...erosion
      #############################################################
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the number of iterations of EROSION to be "
         echo "applied to the grey matter mask prior to voxelwise "
         echo "computation of local mean timeseries."
         read -p "" -e -i ${locreg_gm_ero[${cxt}]} buffer
         if [[ $buffer =~ $POSINT ]]
            then
            locreg_gm_ero[${cxt}]=$buffer
            echo "Erosion iterations, GM mask: ${locreg_gm_ero[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            locreg_gm_ero[${cxt}]=0
            break 2
         else
            echo -e "${CYA}In order to ensure that the signal extracted from the "
            echo "tissue or region of interest is not mixed with signal "
            echo "from adjacent voxels associated with a different tissue "
            echo "class, it is possible to erode its mask by removing "
            echo "fringe voxels. An optimal degree of erosion will result "
            echo "in a mask comprising 'deep' voxels of the tissue, while "
            echo "excessive erosion may result in a mask whose extent is "
            echo -e "poorly representative of the tissue.${RCL}"
            echo ""
            echo "Enter 0 for no erosion."
            echo ""
            echo -e "${CYA}If the selected number of erosion iterations"
            echo "results in an empty mask, progressively fewer"
            echo "erosions will be applied until the mask is"
            echo -e "non-empty.${RCL}"
            echo ""
            echo -e "The input must be nonnegative numeric."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      #############################################################
      # USER: Local grey matter
      #        -> Yes
      #        ...neighbourhood radius
      #
      # At this time, this module only supports spherical
      # neighbourhoods, but the underlying AFNI script supports
      # other shapes as well. Functionality may be expanded in
      # the future.
      #############################################################
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the RADIUS that defines the neighbourhood "
         echo "of each voxel."
         read -p "" -e -i ${locreg_gm_rad[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            locreg_gm_rad[${cxt}]=$buffer
            echo "Voxel neighbourhood radius, GM: ${locreg_gm_rad[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "The local grey matter signal at each voxel is computed "
            echo "as the average signal over grey matter voxels in the "
            echo "neighbourhood of the voxel of interest. A larger "
            echo "neighbourhood will include a greater number of voxels."
            echo -e "${RCL}"
            echo "The input must be nonnegative numeric."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Local white matter
   ################################################################
   2)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to model the local WHITE MATTER signal?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Local white matter
         #        -> Yes
         ##########################################################
         1)
            locreg_wm[${cxt}]="Y"
            echo "White matter mean: ${locreg_wm[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Local white matter
         #        -> No
         ##########################################################
         2)
            locreg_wm[${cxt}]="N"
            echo "White matter mean: ${locreg_wm[${cxt}]}"
            break 2
            ;;
         ##########################################################
         # USER: Local white matter
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Local white matter
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}Tissue-based nuisance regressors are capable of reducing "
            echo "the influence of subject movement (as well as physiological "
            echo "artefacts) on the data. Local white matter signal is most "
            echo "often used to this end (e.g., Jo et al., 2013). This "
            echo "option will require a segmentation of the subject's "
            echo "anatomical/structual image according to tissue class."
            echo ""
            echo -e "${RED}For advanced users${CYA}: The XCP Engine's locreg module offers "
            echo "the option of including up to three tissue- or RoI-based "
            echo "regressors. While nominally these are the mean GM, WM, and "
            echo "CSF timeseries, it is possible to include mean signals from "
            echo -e "any three RoIs for which a binary mask is available.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      #############################################################
      # USER: Local white matter
      #        -> Yes
      #        ...segmentation
      #############################################################
      xst2=0
      if [[ -z "$segdir" ]]
         then segdir=${locreg_wm_path[${cxt}]}
      fi
      if [[ $(imtest ${locreg_wm_path[${cxt}]}) != "1" ]]
         then
         buffer=$segdir
      else
         buffer=${locreg_wm_path[${cxt}]}
      fi
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Select the path to a volume containing WHITE MATTER SEGMENTATION"
         echo "for subject ((${xsubj})): "
         read -p ""\
            -e -i $buffer buffer
         if [[ $(imtest $buffer) == "1" ]]
            then
            segdir=$( ls -d1 ${buffer} |rev|cut -d"/" -f1 --complement|rev)
            locreg_wm_path[${cxt}]=$buffer
            echo "Path to WM segmentation: ${locreg_wm_path[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            locreg_wm[${cxt}]="N"
            break 2
         else
            echo -e "${CYA}Including mean tissue timeseries as nuisance regressors "
            echo "requires a known segmentation of the structural image into "
            echo "tissue classes. If you provided an output directory from the "
            echo "ANTsCT routine, then a segmentation will automatically be "
            echo -e "provided.${RCL}"
            echo ""
            echo "The input must be a path to an image."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      #############################################################
      # USER: Local white matter
      #        -> Yes
      #        ...value in segmentation
      #############################################################
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the value(s) corresponding to white matter in"
         echo "the segmentation. If all nonzero voxels correspond to"
         echo "white matter, enter ALL. To preview the image, enter"
         echo "VIEW."
         read -p ""\
            -e -i ${locreg_wm_val[${cxt}]} buffer
         element1=$(echo ${buffer}|cut -d"," -f1| cut -d":" -f1)
         if [[ $buffer == "ALL" ]]
            then
            locreg_wm_val[${cxt}]=all
            echo "All nonzero voxels in the target image correspond"
            echo "to white matter. The image will only be binarised"
            echo "prior to timeseries extraction."
            xst2=1
         elif [[ $buffer == "VIEW" ]]
            then
            echo "Opening target image for viewing..."
            fslview ${locreg_wm_path[${cxt}]} &
         elif [[ $element1 =~ $NUM ]]
            then
            locreg_wm_val[${cxt}]=$buffer
            echo "White matter voxel value set to ${locreg_wm_val[${cxt}]}."
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            locreg_wm[${cxt}]="N"
            break 2
         else
            echo -e "${CYA}In some segmentations, such as the one output by "
            echo "ANTs Cortical Thickness, each tissue class is assigned "
            echo "a different intensity value in the segmentation volume. "
            echo "For instance, 1 might correspond to CSF, 2 to cortical "
            echo "grey matter, 3 to white matter, etc. If your "
            echo "segmentation is strictly a binary-valued white matter "
            echo -e "mask, then enter ${RED}ALL${CYA}. If you are not sure, you can view "
            echo -e "the segmentation by entering ${RED}VIEW${CYA}. To enter a "
            echo "range of values, use the colon (:) operator; to enter "
            echo "multiple values, use the comma (,) operator. For instance, "
            echo "1:5,9 would indicate all values in the interval [1,5] "
            echo -e "as well as 9${RCL}."
            echo ""
            echo "The input must either be numeric or one of the"
            echo "case-sensitive strings ALL or VIEW."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      #############################################################
      # USER: Local white matter
      #        -> Yes
      #        ...erosion
      #############################################################
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the number of iterations of EROSION to be "
         echo "applied to the white matter mask prior to voxelwise "
         echo "computation of local mean timeseries."
         read -p "" -e -i ${locreg_wm_ero[${cxt}]} buffer
         if [[ $buffer =~ $POSINT ]]
            then
            locreg_wm_ero[${cxt}]=$buffer
            echo "Erosion iterations, WM mask: ${locreg_wm_ero[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            locreg_wm_ero[${cxt}]=0
            break 2
         else
            echo -e "${CYA}In order to ensure that the signal extracted from the "
            echo "tissue or region of interest is not mixed with signal "
            echo "from adjacent voxels associated with a different tissue "
            echo "class, it is possible to erode its mask by removing "
            echo "fringe voxels. An optimal degree of erosion will result "
            echo "in a mask comprising 'deep' voxels of the tissue, while "
            echo "excessive erosion may result in a mask whose extent is "
            echo -e "poorly representative of the tissue.${RCL}"
            echo ""
            echo "Enter 0 for no erosion."
            echo ""
            echo -e "${CYA}If the selected number of erosion iterations"
            echo "results in an empty mask, progressively fewer"
            echo "erosions will be applied until the mask is"
            echo -e "non-empty.${RCL}"
            echo ""
            echo -e "The input must be nonnegative numeric."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      #############################################################
      # USER: Local white matter
      #        -> Yes
      #        ...neighbourhood radius
      #############################################################
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the RADIUS that defines the neighbourhood "
         echo "of each voxel."
         read -p "" -e -i ${locreg_wm_rad[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            locreg_wm_rad[${cxt}]=$buffer
            echo "Voxel neighbourhood radius, WM: ${locreg_wm_rad[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "The local white matter signal at each voxel is computed "
            echo "as the average signal over white matter voxels in the "
            echo "neighbourhood of the voxel of interest. A larger "
            echo "neighbourhood will include a greater number of voxels."
            echo -e "${RCL}"
            echo "The input must be nonnegative numeric."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Local cerebrospinal fluid
   ################################################################
   3)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to model the local CEREBROSPINAL FLUID signal?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Local cerebrospinal fluid
         #        -> Yes
         ##########################################################
         1)
            locreg_csf[${cxt}]="Y"
            echo "Local cerebrospinal fluid: ${locreg_csf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Local cerebrospinal fluid
         #        -> No
         ##########################################################
         2)
            locreg_csf[${cxt}]="N"
            echo "Local cerebrospinal fluid: ${locreg_csf[${cxt}]}"
            break 2
            ;;
         ##########################################################
         # USER: Local cerebrospinal fluid
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Local cerebrospinal fluid
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}Tissue-based nuisance regressors are capable of reducing "
            echo "the influence of subject movement (as well as physiological "
            echo "artefacts) on the data. Local white matter signal is most "
            echo "often used to this end (e.g., Jo et al., 2013). This "
            echo "option will require a segmentation of the subject's "
            echo "anatomical/structual image according to tissue class."
            echo ""
            echo -e "${RED}For advanced users${CYA}: The XCP Engine's locreg module offers "
            echo "the option of including up to three tissue- or RoI-based "
            echo "regressors. While nominally these are the mean GM, WM, and "
            echo "CSF timeseries, it is possible to include mean signals from "
            echo -e "any three RoIs for which a binary mask is available.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      #############################################################
      # USER: Local cerebrospinal fluid
      #        -> Yes
      #        ...segmentation
      #############################################################
      xst2=0
      if [[ -z "$segdir" ]]
         then segdir=${locreg_csf_path[${cxt}]}
      fi
      if [[ $(imtest ${locreg_csf_path[${cxt}]}) != "1" ]]
         then
         buffer=$segdir
      else
         buffer=${locreg_csf_path[${cxt}]}
      fi
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Select the path to a volume containing CSF SEGMENTATION"
         echo "for subject ((${xsubj})): "
         read -p ""\
            -e -i $buffer buffer
         if [[ $(imtest $buffer) == "1" ]]
            then
            segdir=$( ls -d1 ${buffer} |rev|cut -d"/" -f1 --complement|rev)
            locreg_csf_path[${cxt}]=$buffer
            echo "Path to CSF segmentation: ${locreg_csf_path[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            locreg_csf[${cxt}]="N"
            break 2
         else
            echo -e "${CYA}Including mean tissue timeseries as nuisance regressors "
            echo "requires a known segmentation of the structural image into "
            echo "tissue classes. If you provided an output directory from the "
            echo "ANTsCT routine, then a segmentation will automatically be "
            echo -e "provided.${RCL}"
            echo ""
            echo "The input must be a path to an image."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      #############################################################
      # USER: Local cerebrospinal fluid
      #        -> Yes
      #        ...value in segmentation
      #############################################################
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the value(s) corresponding to CSF in the"
         echo "segmentation. If all nonzero voxels correspond to"
         echo "CSF, enter ALL. To preview the image, enter VIEW"
         read -p ""\
            -e -i ${locreg_csf_val[${cxt}]} buffer
         element1=$(echo ${buffer}|cut -d"," -f1| cut -d":" -f1)
         if [[ $buffer == "ALL" ]]
            then
            locreg_csf_val[${cxt}]=all
            echo "All nonzero voxels in the target image correspond"
            echo "to CSF. The image will only be binarised prior to"
            echo "timeseries extraction."
            xst2=1
         elif [[ $buffer == "VIEW" ]]
            then
            echo "Opening target image for viewing..."
            fslview ${locreg_csf_path[${cxt}]} &
         elif [[ $element1 =~ $NUM ]]
            then
            locreg_csf_val[${cxt}]=$buffer
            echo "CSF voxel value set to ${locreg_csf_val[${cxt}]}."
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            locreg_csf[${cxt}]="N"
            break 2
         else
            echo -e "${CYA}In some segmentations, such as the one output by "
            echo "ANTs Cortical Thickness, each tissue class is assigned "
            echo "a different intensity value in the segmentation volume. "
            echo "For instance, 1 might correspond to CSF, 2 to cortical "
            echo "grey matter, 3 to white matter, etc. If your "
            echo "segmentation is strictly a binary-valued white matter "
            echo -e "mask, then enter ${RED}ALL${CYA}. If you are not sure, you can view "
            echo -e "the segmentation by entering ${RED}VIEW${CYA}. To enter a "
            echo "range of values, use the colon (:) operator; to enter "
            echo "multiple values, use the comma (,) operator. For instance, "
            echo "1:5,9 would indicate all values in the interval [1,5] "
            echo -e "as well as 9${RCL}."
            echo ""
            echo "The input must either be numeric or one of the"
            echo "case-sensitive strings ALL or VIEW."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      #############################################################
      # USER: Local cerebrospinal fluid
      #        -> Yes
      #        ...erosion
      #############################################################
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the number of iterations of EROSION to be "
         echo "applied to the CSF mask prior to voxelwise "
         echo "computation of local mean timeseries."
         read -p "" -e -i ${locreg_csf_ero[${cxt}]} buffer
         if [[ $buffer =~ $POSINT ]]
            then
            locreg_csf_ero[${cxt}]=$buffer
            echo "Erosion iterations, CSF mask: ${locreg_csf_ero[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            locreg_csf_ero[${cxt}]=0
            break 2
         else
            echo -e "${CYA}In order to ensure that the signal extracted from the "
            echo "tissue or region of interest is not mixed with signal "
            echo "from adjacent voxels associated with a different tissue "
            echo "class, it is possible to erode its mask by removing "
            echo "fringe voxels. An optimal degree of erosion will result "
            echo "in a mask comprising 'deep' voxels of the tissue, while "
            echo "excessive erosion may result in a mask whose extent is "
            echo -e "poorly representative of the tissue.${RCL}"
            echo ""
            echo "Enter 0 for no erosion."
            echo ""
            echo -e "${CYA}If the selected number of erosion iterations"
            echo "results in an empty mask, progressively fewer"
            echo "erosions will be applied until the mask is"
            echo -e "non-empty.${RCL}"
            echo ""
            echo -e "The input must be nonnegative numeric."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      #############################################################
      # USER: Local cerebrospinal fluid
      #        -> Yes
      #        ...neighbourhood radius
      #############################################################
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the RADIUS that defines the neighbourhood "
         echo "of each voxel."
         read -p "" -e -i ${locreg_csf_rad[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            locreg_csf_rad[${cxt}]=$buffer
            echo "Voxel neighbourhood radius, CSF: ${locreg_csf_rad[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "The local CSF signal at each voxel is computed as the "
            echo "average signal over CSF voxels in the neighbourhood "
            echo "of the voxel of interest. A larger neighbourhood will "
            echo "include a greater number of voxels."
            echo -e "${RCL}"
            echo "The input must be nonnegative numeric."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Local mean signal
   ################################################################
   4)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to model the mean LOCAL SIGNAL?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Local mean signal
         #        -> Yes
         ##########################################################
         1)
            locreg_lms[${cxt}]="Y"
            echo "Local mean signal: ${locreg_lms[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Local mean signal
         #        -> No
         ##########################################################
         2)
            locreg_lms[${cxt}]="N"
            echo "Local mean signal: ${locreg_lms[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Local mean signal
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Local mean signal
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "Caution:"
            echo "If you elect to model the overall local signal (or "
            echo "the local GM signal), it is possible that you will "
            echo "remove more signal than noise. Spatial smoothing "
            echo "is thought to improve the signal-to-noise ratio by "
            echo "averaging signal in adjacent voxels. This option, "
            echo "by contrast, removes signal that is common to nearby "
            echo "voxels. The outcome is untested and probably "
            echo "dependent on the voxel neighbourhood size."
            echo ""
            echo -e "${RCL}"
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      #############################################################
      # USER: Local mean signal
      #        -> Yes
      #        ...neighbourhood radius
      #############################################################
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the RADIUS that defines the neighbourhood "
         echo "of each voxel."
         read -p "" -e -i ${locreg_lms_rad[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            locreg_csf_rad[${cxt}]=$buffer
            echo "Voxel neighbourhood radius, overall local mean: ${locreg_lms_rad[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "The local mean signal at each voxel is computed as the "
            echo "average signal over all voxels in the neighbourhood "
            echo "of the voxel of interest. A larger neighbourhood will "
            echo "include a greater number of voxels."
            echo -e "${RCL}"
            echo "The input must be nonnegative numeric."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Re-run
   ################################################################
   5)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            locreg_rerun[${cxt}]="Y"
            echo "Re-run: ${locreg_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            locreg_rerun[${cxt}]="N"
            echo "Re-run: ${locreg_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   6)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of INTERMEDIATE"
      echo "steps in the local confound modelling process?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Delete intermediate files
         #        -> Yes
         ##########################################################
         1)
            locreg_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${locreg_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> No
         ##########################################################
         2)
            locreg_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${locreg_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset to default parameters
   ################################################################
   7)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/locreg/locreg.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   8)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      ;;
   esac
done
done


###################################################################
# write parameters to design file
###################################################################
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} LOCREG" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo ${locreg_gm_path[${cxt}]}
echo ${locreg_wm_path[${cxt}]}
echo ${locreg_csf_path[${cxt}]}

echo "locreg_gm[${cxt}]=${locreg_gm[${cxt}]}" >> $design
echo $(${XCPEDIR}/utils/genpath locreg_gm_path[${cxt}]=${locreg_gm_path[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo "locreg_gm_val[${cxt}]=${locreg_gm_val[${cxt}]}" >> $design
echo "locreg_gm_ero[${cxt}]=${locreg_gm_ero[${cxt}]}" >> $design
echo "locreg_gm_rad[${cxt}]=${locreg_gm_rad[${cxt}]}" >> $design
echo "locreg_wm[${cxt}]=${locreg_wm[${cxt}]}" >> $design
echo $(${XCPEDIR}/utils/genpath locreg_wm_path[${cxt}]=${locreg_wm_path[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo "locreg_wm_val[${cxt}]=${locreg_wm_val[${cxt}]}" >> $design
echo "locreg_wm_ero[${cxt}]=${locreg_wm_ero[${cxt}]}" >> $design
echo "locreg_wm_rad[${cxt}]=${locreg_wm_rad[${cxt}]}" >> $design
echo "locreg_csf[${cxt}]=${locreg_csf[${cxt}]}" >> $design
echo $(${XCPEDIR}/utils/genpath locreg_csf_path[${cxt}]=${locreg_csf_path[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM) >> $design
echo "locreg_csf_val[${cxt}]=${locreg_csf_val[${cxt}]}" >> $design
echo "locreg_csf_ero[${cxt}]=${locreg_csf_ero[${cxt}]}" >> $design
echo "locreg_csf_rad[${cxt}]=${locreg_csf_rad[${cxt}]}" >> $design
echo "locreg_lms[${cxt}]=${locreg_lms[${cxt}]}" >> $design
echo "locreg_lms_rad[${cxt}]=${locreg_lms_rad[${cxt}]}" >> $design
echo "locreg_rerun[${cxt}]=${locreg_rerun[${cxt}]}" >> $design
echo "locreg_cleanup[${cxt}]=${locreg_cleanup[${cxt}]}" >> $design
