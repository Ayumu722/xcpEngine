#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for regression module
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]]
   then
   echo ""
   echo -e "${CYA}REGRESS${RCL}:"
   echo "This module executes ordinary linear regression to"
   echo "   compute parameter estimates of any confounds computed"
   echo "   using the 'confound' module and any local regressors"
   echo "   computed using the 'locreg' module. Parameter"
   echo "   estimates are then used to detrend the BOLD timeseries"
   echo "   with respect to all local and global regressors."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/regress/regress.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

################################################################### 
# The ugly while loop is necessary for the select options to update
# correctly
################################################################### 
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""; echo ""
echo -e "Welcome to ${RED}regression${RCL} initialisation for the XCP Engine."
echo "Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "Temporal filter: ${regress_tmpf[${cxt}]}" \
   "Low pass cutoff: ${regress_lopass[${cxt}]}" \
   "High pass cutoff: ${regress_hipass[${cxt}]}" \
   "Despike: ${regress_despike[${cxt}]}" \
   "Spike regressors: ${regress_spkreg[${cxt}]}" \
   "Spatial filter: ${regress_sptf[${cxt}]}" \
   "Spatial smoothing FWHM: ${regress_smo[${cxt}]} mm" \
   "Re-run: ${regress_rerun[${cxt}]}" \
   "Delete intermediate files: ${regress_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
      
   ################################################################
   # USER: Temporal filter
   ################################################################
   1)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to apply a concurrent TEMPORAL FILTER"
      echo "to timeseries and confounds?"; echo ""
      echo "(If you previously applied any filters or detrends to "
      echo "the data, the XCP Engine will detect those and apply "
      echo "them to confounds automatically.)"
      select option in \
         "Fast Fourier Transform" \
         "Gaussian" \
         "Butterworth" \
         "Chebyshev Type I" \
         "Chebyshev Type II" \
         "Elliptic" \
         "None"
         do
         case $REPLY in
         ##########################################################
         # USER: Temporal filter
         #        -> Fast Fourier Transform
         ##########################################################
         1)
            genfilt=false
            regress_tmpf[${cxt}]="fft"
            echo "Temporal filter: ${regress_tmpf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> Gaussian
         ##########################################################
         2)
            genfilt=false
            regress_tmpf[${cxt}]="gaussian"
            echo "Temporal filter: ${regress_tmpf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> Butterworth
         ##########################################################
         3)
            genfilt=true
            regress_tmpf[${cxt}]="butterworth"
            echo "Temporal filter: ${regress_tmpf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> Chebyshev Type I
         ##########################################################
         4)
            genfilt=true
            regress_tmpf[${cxt}]="chebyshev1"
            echo "Temporal filter: ${regress_tmpf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> Chebyshev Type II
         ##########################################################
         5)
            genfilt=true
            regress_tmpf[${cxt}]="chebyshev2"
            echo "Temporal filter: ${regress_tmpf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> Elliptic
         ##########################################################
         6)
            genfilt=true
            regress_tmpf[${cxt}]="elliptic"
            echo "Temporal filter: ${regress_tmpf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> None
         ##########################################################
         7)
            genfilt=false
            regress_tmpf[${cxt}]="none"
            echo "Temporal filter: ${regress_tmpf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> MENU
         ##########################################################
         m)
            break
            ;;
         ##########################################################
         # USER: Temporal filter
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}Bandpass filtering the analyte timeseries but not "
            echo "nuisance regressors re-introduces noise-related "
            echo "variance at removed frequencies when the timeseries "
            echo "is residualised with respect to the regressors via "
            echo "linear fit (Hallquist et al., 2014). (The XCP Engine "
            echo "is designed so as to make this involuntary "
            echo "reintroduction of noise impossible.) Instead, the "
            echo "recommended approach is filtering both the timeseries "
            echo "and the nuisance regressors immediately prior to "
            echo "fitting and residualisation (Hallquist et al., 2014)."
            echo ""
            echo -e "${RCL}* ${RED}FFT${CYA}-based filters, as implemented in AFNI's 3dBandpass, "
            echo "  use a fast Fourier transform to attenuate frequencies. "
            echo "  An FFT-based filter may not be suitable for use in "
            echo "  designs that incorporate iterative motion censoring, "
            echo "  since it will include interpolated frequencies in its "
            echo -e "  calculations.${RCL}"
            echo -e "* ${CYA}A ${RED}Gaussian${CYA} filter, as implemented in FSL, uses a "
            echo "  Gaussian-weighted least-squares fit to remove "
            echo "  frequencies of no interest from the data. This "
            echo -e "  filter has a slow frequency roll-off.${RCL}"
            echo -e "* ${RED}Chebyshev${CYA} and ${RED}elliptic${CYA} filters more ideally "
            echo "  discriminate accepted and attenuated frequencies "
            echo -e "  than do ${RED}Butterworth${CYA} filters, but they introduce "
            echo "  ripples in either the passband (Chebyshev I), "
            echo "  stopband (Chebyshev II), or both (elliptic) that "
            echo -e "  result in some signal distortion.${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3|4|5|6|7]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      #############################################################
      # Filters that use genfilter require additional input
      # parameters...
      #############################################################
      if [[ "$genfilt" == "true" ]]
         then
         echo ""; echo "Welcome to filter setup."; echo ""
         ##########################################################
         # USER: Butterworth, Chebyshev, or elliptic
         #        ... filter order
         ##########################################################
         xst2=0
         while [[ "$xst2" == "0" ]]
            do
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            echo ""
            read -p "Specify the FILTER ORDER: " -e -i \
               ${regress_tmpf_order[${cxt}]} buffer
            if [[ $buffer =~ $POSINT ]]
               then
               regress_tmpf_order[${cxt}]=$buffer
               echo "${regress_tmpf_order[${cxt}]}-order ${regress_tmpf[${cxt}]} filter"
               echo ""
               xst2=1
            else
               echo ""
               echo -e "${CYA}The filter order indicates the number of input samples"
               echo "taken under consideration when generating an output"
               echo "signal. In general, using a higher-order filter will"
               echo "result in a sharper cutoff between accepted and"
               echo "attenuated frequencies. For a gentler filter, use a"
               echo -e "lower order.${RCL}"
               echo ""
               echo "Enter a non-negative integer"
               echo -e ""
               echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."              
            fi
         done
         ##########################################################
         # USER: Butterworth, Chebyshev, or elliptic
         #        ... filter passes
         ##########################################################
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the FILTER PASSES."
         echo "(default is forward and reverse)"
         select option in \
            "Forward (1 pass)" \
            "Forward and reverse (2 passes)"
            do
            case $REPLY in
               1)
                  regress_tmpf_pass[${cxt}]=1
                  echo "Forward filter selected"; echo ""
                  break
                  ;;
               2)
                  regress_tmpf_pass[${cxt}]=2
                  echo "Forward/reverse filter selected"; echo ""
                  break
                  ;;
               *)
                  echo ""
                  echo -e "${CYA}The filter passes indicate whether the input signal"
                  echo "should be processed in the forward direction only"
                  echo -e "or in both forward and reverse directions.${RCL}"
                  echo ""
                  echo "Select a valid option: [1|2]"
                  echo -e ""
                  echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
                  echo ""; echo ""
                  echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
                  ;;
            esac
         done
         ##########################################################
         # USER: Chebyshev I or elliptic
         #        ... passband ripple
         ##########################################################
         if [[ "${prestats_tmpf[${cxt}]}" == "chebyshev1" ]] \
            || [[ "${prestats_tmpf[${cxt}]}" == "elliptic" ]]
            then
            xst2=0
            while [[ "$xst2" == "0" ]]
               do
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               read -p "Specify the PASSBAND RIPPLE: " -e -i \
                  ${regress_tmpf_ripple[${cxt}]} buffer
               if [[ $buffer =~ $POSNUM ]]
                  then
                  regress_tmpf_ripple[${cxt}]=$buffer
                  echo "Passband ripple: ${regress_tmpf_ripple[${cxt}]}"
                  echo ""
                  xst2=1
               else
                  echo ""
                  echo -e "${CYA}Chebyshev I and elliptic filters allow for sharper "
                  echo "discrimination between accepted and attenuated "
                  echo "frequencies than Butterworth filters of the same "
                  echo "order at the cost of a 'ripple' in the pass band. "
                  echo "This ripple results in somewhat uneven retention of "
                  echo -e "pass-band frequencies.${RCL}"
                  echo ""
                  echo "Enter a non-negative numeric value."
                  echo -e ""
                  echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."             
               fi
         done
         fi
         ##########################################################
         # USER: Chebyshev II or elliptic
         #        ... stopband ripple
         ##########################################################
         if [[ "${prestats_tmpf[${cxt}]}" == "chebyshev2" ]] \
            || [[ "${prestats_tmpf[${cxt}]}" == "elliptic" ]]
            then
            xst2=0
            while [ "$xst2" == "0" ]
               do
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               read -p "Specify the STOPBAND RIPPLE: " -e -i \
                  ${regress_tmpf_ripple2[${cxt}]} buffer
               if [[ $buffer =~ $POSNUM ]]
                  then
                  regress_tmpf_ripple2[${cxt}]=$buffer
                  echo "Stopband ripple: ${regress_tmpf_ripple2[${cxt}]}"
                  echo ""
                  xst2=1
               else
                  echo ""
                  echo -e "${CYA}Chebyshev II and elliptic filters allow for sharper "
                  echo "discrimination between accepted and attenuated "
                  echo "frequencies than Butterworth filters of the same "
                  echo "order at the cost of a 'ripple' in the stop band. "
                  echo "This ripple results in somewhat uneven removal of "
                  echo -e "stop-band frequencies.${RCL}"
                  echo ""
                  echo "Enter a non-negative numeric value"
                  echo -e ""
                  echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."            
               fi
         done
         fi
         ##########################################################
         # USER: Butterworth, Chebyshev, or elliptic
         #        ... discard volumes from beginning and end
         ##########################################################
         xst2=0
         while [ "$xst2" == "0" ]
            do
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            echo ""
            read -p "Specify the number of VOLUMES to DISCARD
               from timeseries boundaries: " -e -i \
               ${regress_tmpf_dvols[${cxt}]} buffer
            if [[ $buffer =~ $POSINT ]]
               then
               regress_tmpf_dvols[${cxt}]=$buffer
               echo "Discarding ${regress_tmpf_dvols[${cxt}]} volumes"
               echo ""
               xst2=1
            else
               echo ""
               echo -e "${CYA}Application of certain filters may result in "
               echo "extreme values at the beginnings and ends of "
               echo "timeseries; these values may be removed by "
               echo "discarding time points."
               echo ""
               echo "For forward filters, only volumes from the"
               echo "beginning of the timeseries are discarded."
               echo "For forward/reverse filters, volumes are"
               echo "discarded from both the beginning and end"
               echo -e "of the timeseries.${RCL}"
               echo ""
               echo "Enter a non-negative integer."
               echo -e ""
               echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."              
            fi
         done
         echo "Filter setup complete."
      fi
      break
      ;;
      
   ################################################################
   # USER: Low pass cutoff
   ################################################################
   2)
      xst2=0
      while [ "$xst2" == "0" ]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         if [[ "${regress_tmpf[${cxt}]}" == "none" ]]
            then
            echo -e "${RED}WARNING${RCL}:temporal filter is currently disabled."
            echo "Setting the low-pass cutoff will have no effect"
            echo "unless the temporal filter is enabled."
         fi
         read -p "Specify the LOW PASS CUTOFF for the temporal filter
            in Hz (n for Nyquist): " -e -i ${regress_lopass[${cxt}]} buffer
         if [ "$buffer" == "?" ]
            then
            echo "YOU ARE BEYOND HELP"; echo ""
            echo "The input must be a numeric value, or n for no filter."
         elif [[ $buffer =~ $POSNUM ]]
            then
            regress_lopass[${cxt}]=$buffer
            echo "Low pass cutoff: ${regress_lopass[${cxt}]} Hz"
            xst2=1
         elif [ "$buffer" == "n" ]
            then
            regress_lopass[${cxt}]=nyquist
            echo "Low pass cutoff: Nyquist frequency"
            echo "Filter is maximally permissive: no signal will be removed."
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Any frequencies below the low-pass cutoff will be "
            echo "counted as pass-band frequencies; these will be "
            echo "retained by the filter when it is applied. (Unless "
            echo "they are also below the high-pass cutoff!)"
            echo ""
            echo "Functional connectivity between regions of interest "
            echo "is typically determined on the basis of synchrony "
            echo "in low-frequency fluctuations (Biswal et al., 1995); "
            echo "therefore, removing such frequencies may effectively "
            echo "remove noise from the timeseries while retaining "
            echo "signal of interest. For a contrasting view, see "
            echo -e "Boubela et al. (2013).${RCL}"
            echo ""
            echo "The input must be a numeric value, or n for no filter."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: High pass cutoff
   ################################################################
   3)
      xst2=0
      while [ "$xst2" == "0" ]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         if [[ "${regress_tmpf[${cxt}]}" == "none" ]]
            then
            echo -e "${RED}WARNING${RCL}:temporal filter is currently disabled."
            echo "Setting the high-pass cutoff will have no effect"
            echo "unless the temporal filter is enabled."
         fi
         read -p "Specify the HIGH PASS CUTOFF for the temporal filter
            in Hz (0 for none): " -e -i ${regress_hipass[${cxt}]} buffer
         if [ "$buffer" == "?" ]
            then
            echo "YOU ARE BEYOND HELP"; echo ""
            echo "The input must be a numeric value."
         elif [[ $buffer =~ $POSNUM ]]
            then
            regress_hipass[${cxt}]=$buffer
            echo "High pass cutoff: ${regress_hipass[${cxt}]} Hz"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Any frequencies above the high-pass cutoff will be "
            echo "counted as pass-band frequencies; these will be "
            echo "retained by the filter when it is applied. (Unless "
            echo "they are also above the low-pass cutoff!)"
            echo ""
            echo "High-pass filters can be used to remove very-low-"
            echo "frequency drift from an acquisition; this is a "
            echo "form of scanner noise. The demean/detrend option "
            echo -e "additionally removes linear and polynomial drift.${RCL}"
            echo ""
            echo "Enter a non-negative number. Enter 0 for no filter."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Despike
   ################################################################
   4)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DESPIKE the data prior to temporal"
      echo "filtering?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Despike
         #        -> Yes
         ##########################################################
         1)
            regress_despike[${cxt}]="Y"
            echo "Despike data: ${regress_despike[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Despike
         #        -> No
         ##########################################################
         2)
            regress_despike[${cxt}]="N"
            echo "Despike data: ${regress_despike[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Despike
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Despike
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "'Despiking' identifies intensity outliers ('spikes') "
            echo "in the timeseries data of each voxel and then "
            echo "interpolates over these outliers Despiking is "
            echo "thought to reduce the influence of artefact on "
            echo "analytic outcome, in part because intensity outliers "
            echo "often arise from artefactual processes such as "
            echo "subject motion."
            echo ""
            echo "Despiking may be performed either during the prestats "
            echo "module or during the regress module. Despiking during "
            echo "the prestats module will result in global and tissue-"
            echo "based regressors that are uninfluenced by voxelwise "
            echo "spikes."
            echo -e "${RCL}"
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Spike regression
   ################################################################
   5)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to add SPIKE REGRESSORS to the model?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Spike regression
         #        -> Yes
         ##########################################################
         1)
            regress_spkreg[${cxt}]="Y"
            echo "Spike regression: ${regress_spkreg[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spike regression
         #        -> No
         ##########################################################
         2)
            regress_spkreg[${cxt}]="N"
            echo "Spike regression: ${regress_spkreg[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spike regression
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Spike regression
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "Spike regression is a denoising procedure that is "
            echo "similar to volume censoring. If spike regression is "
            echo "enabled, then the confound model will be augmented "
            echo "by a set of n regressors, where n is the number of "
            echo "volumes flagged for high motion. Each regressor will "
            echo "be zero-valued except at a single time point; this "
            echo "time point will correspond to one of the n flagged "
            echo "volumes."
            echo -e "${RCL}"
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Spatial filter
   ################################################################
   6)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the SPATIAL FILTER."
      echo "(The spatial filter will be applied wherever a "
      echo " similar filter is requested in the pipeline.)"
      select option in \
         "Gaussian" \
         "SUSAN" \
         "Uniform smoothness" \
         "None"
         do
         case $REPLY in
         ##########################################################
         # USER: Spatial filter
         #        -> Gaussian
         ##########################################################
         1)
            regress_sptf[${cxt}]="gaussian"
            echo "Spatial filter: ${regress_sptf[${cxt}]}"
            break
            ;;
         2)
         ##########################################################
         # USER: Spatial filter
         #        -> SUSAN
         ##########################################################
            regress_sptf[${cxt}]="susan"
            echo "Spatial filter: ${regress_sptf[${cxt}]}"
            #######################################################
            # USER: Spatial filter
            #        -> SUSAN
            #        ...USAN
            #######################################################
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            echo ""
            echo "If desired, specify a custom USAN to be used in "
            echo " SUSAN filtering. Smoothing is applied across "
            echo " voxels of similar intensity in the USAN. For "
            echo " instance, using a tissue segmentation USAN will "
            echo " restrict signal mixing across tissue classes. If a "
            echo " USAN is not specified, then a minimally processed "
            echo " functional volume is used by default."
            echo ""
            echo "Specify the USAN for subject"
            echo "${xsubj}"
            echo ""
            #######################################################
            # Use the ANTsCT segmentation by default.
            #######################################################
            if [[ -e ${xants} && ! -e ${regress_usan[${cxt}]} ]]
               then
               usan=$(\ls ${xants}/BrainSegmentation.*)
            else
               usan=${regress_usan[${cxt}]}
            fi
            read -p "" -e -i ${usan} ${regress_usan[${cxt}]}
            #######################################################
            # If the USAN is an image, determine its space.
            #######################################################
            if [[ $(imtest ${regress_usan[${cxt}]}) == 1 ]]
               then
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               echo "Now, specify the space in which the USAN is "
               echo " currently situated."
               echo ""
               select option in \
                  "Native subject space (functional/analyte)" \
                  "Native subject space (structural)" \
                  "Standard space" \
                  "None"
                  do
                  case $REPLY in
                  #################################################
                  # USAN space
                  #     -> Native
                  #################################################
                  1)
                     regress_usan_space[${cxt}]=nat
                     break
                     ;;
                  #################################################
                  # USAN space
                  #     -> Structural
                  #################################################
                  2)
                     regress_usan_space[${cxt}]=str
                     break
                     ;;
                  #################################################
                  # USAN space
                  #     -> Standard
                  #################################################
                  3)
                     regress_usan_space[${cxt}]=std
                     break
                     ;;
                  #################################################
                  # USAN space
                  #     -> MENU
                  #################################################
                  m)
                     echo -e "${RED}WARNING${RCL}: Setup interrupted. USAN reset to default."
                     regress_usan[${cxt}]=default
                     break
                     ;;
                  #################################################
                  # USAN space
                  #     -> HELP
                  #################################################
                  *)
                     echo -e 
                     echo "In what space is the USAN located? If this "
                     echo "is not known, it may be determined by "
                     echo "comparing the USAN against the subject's "
                     echo "structural image, the image to be analysed, "
                     echo "and the template."
                     echo
                  esac
               done
            else
               regress_usan[${cxt}]=default
            fi
            break
            ;;
         3)
         ##########################################################
         # USER: Spatial filter
         #        -> Uniform smoothness
         ##########################################################
            regress_sptf[${cxt}]="uniform"
            echo "Spatial filter: ${regress_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> None
         ##########################################################
         4)
            regress_sptf[${cxt}]="none"
            echo "Spatial filter: ${regress_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "* ${RED}Gaussian ${CYA}smoothing applies the same Gaussian "
            echo -e "  smoothing kernel across the entire volume.${RCL}"
            echo -e "* ${RED}SUSAN${CYA}-based smoothing restricts mixing of signals "
            echo "  from disparate tissue classes (Smith and Brady, "
            echo -e "  1997).${RCL}"
            echo -e "* ${RED}Uniform ${CYA}smoothing applies smoothing to all voxels "
            echo "  until the smoothness computed at every voxel "
            echo -e "  attains the target value.${RCL}"
            echo -e "* ${RED}Uniform ${CYA}smoothing may be used as a compensatory "
            echo "  mechanism to reduce the effects of subject motion "
            echo "  on the final processed image (Scheinost et al., "
            echo -e "  2014).${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Spatial smoothing FWHM
   ################################################################
   7)
      xst2=0
      while [ "$xst2" == "0" ]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         if [[ "${regress_sptf[${cxt}]}" == "none" ]]
         then
            echo -e "${RED}WARNING${RCL}:spatial filtering is currently disabled."
            echo "Setting the FWHM for spatial smoothing will"
            echo "have no effect unless the spatial filter is"
            echo "enabled."
         fi
         read -p "Specify the FWHMs for SPATIAL SMOOTHING, in mm: "\
            -e -i ${regress_smo[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            regress_smo[${cxt}]=$buffer
            echo "Spatial filter: ${regress_smo[${cxt}]} mm"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Endemic noise, for instance due to physiological"
            echo "signals or scanner activity, can introduce spurious or"
            echo "artefactual results in single voxels. The effects of"
            echo "noise-related artefacts can be mitigated by spatially"
            echo "filtering the data, thus dramatically increasing the"
            echo "signal-to-noise ratio. However, spatial smoothing is"
            echo "not without its costs: it effectively reduces"
            echo "volumetric resolution by blurring signals from adjacent"
            echo -e "voxels.${RCL}"
            echo ""
            echo "Enter a non-negative number. Enter 0 for no filter."
            echo "Enter a comma-separated list of non-negative numbers "
            echo "to generate multiple smoothed images."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   
   ################################################################
   # USER: Re-run
   ################################################################
   8)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            regress_rerun[${cxt}]="Y"
            echo "Re-run: ${regress_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            regress_rerun[${cxt}]="N"
            echo "Re-run: ${regress_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Delete intermediate outputs
   ################################################################
   9)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of INTERMEDIATE"
      echo "steps in the coregistration algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         ##########################################################
         # USER: Delete intermediate outputs
         #        -> Yes
         ##########################################################
         case $REPLY in
         1)
            regress_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${regress_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate outputs
         #        -> No
         ##########################################################
         2)
            regress_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${regress_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset to default parameters
   ################################################################
   10)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/regress/regress.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   11)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      ;;
   esac
done
done

###################################################################
# write parameters to design file
###################################################################
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} REGRESS" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "regress_tmpf[${cxt}]=${regress_tmpf[${cxt}]}" >> $design
echo "regress_hipass[${cxt}]=${regress_hipass[${cxt}]}" >> $design
echo "regress_lopass[${cxt}]=${regress_lopass[${cxt}]}" >> $design
echo "regress_rerun[${cxt}]=${regress_rerun[${cxt}]}" >> $design
echo "regress_cleanup[${cxt}]=${regress_cleanup[${cxt}]}" >> $design
if [ "$genfilt" == "true" ]
   then
   echo "regress_tmpf_order[${cxt}]=${regress_tmpf_order[${cxt}]}" >> $design
   echo "regress_tmpf_pass[${cxt}]=${regress_tmpf_pass[${cxt}]}" >> $design
   echo "regress_tmpf_ripple[${cxt}]=${regress_tmpf_ripple[${cxt}]}" >> $design
   echo "regress_tmpf_ripple2[${cxt}]=${regress_tmpf_ripple2[${cxt}]}" >> $design
   echo "regress_tmpf_dvols[${cxt}]=${regress_tmpf_dvols[${cxt}]}" >> $design
fi
echo "regress_despike[${cxt}]=${regress_despike[${cxt}]}" >> $design
echo "regress_spkreg[${cxt}]=${regress_spkreg[${cxt}]}" >> $design
echo "regress_smo[${cxt}]=${regress_smo[${cxt}]}" >> $design
echo "regress_sptf[${cxt}]=${regress_sptf[${cxt}]}" >> $design
echo "regress_usan[${cxt}]=$(${XCPEDIR}/utils/genpath ${regress_usan[${cxt}]} $path_cohort $xsubj_idx $KEEPNUM)" >> $design
echo "regress_usan_space[${cxt}]=${regress_usan_space[${cxt}]}" >> $design
