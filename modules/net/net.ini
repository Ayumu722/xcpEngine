#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for network analysis
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]]
   then
   echo ""
   echo -e "${CYA}NET${RCL}:"
   echo "This module performs basic analysis of networks. First,"
   echo "   the local mean timeseries within each network node is"
   echo "   extracted. The connectivity between timeseries is"
   echo "   subsequently used to construct an adjacency matrix."
   echo "   Finally, a community detection algorithm is performed"
   echo "   on the adjacency matrix in order to identify major"
   echo "   subnetworks or modules within the overall network."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/net/net.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

###################################################################
# The ugly while loop is necessary for the select options to update
# correctly
###################################################################
xst1=0
while [ "$xst1" == "0" ]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""
echo -e "Welcome to ${RED}network${RCL} analysis initialisation for the XCP Engine."
echo "Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "Parcellation library: ${net_lib[${cxt}]}" \
   "Network analysis name: ${net_name[${cxt}]}" \
   "Connectivity metric: ${net_metric[${cxt}]}" \
   "Edge weight threshold: ${net_thr[${cxt}]}" \
   "Enable a priori community assignments: ${net_comh[${cxt}]}" \
   "Community detection: ${net_com[${cxt}]}" \
   "Iterations to consensus: ${net_consensus[${cxt}]}" \
   "Within-/between-network connectivity: ${net_wb[${cxt}]}" \
   "Re-run: ${net_rerun[${cxt}]}" \
   "Delete intermediate files: ${net_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
   
   
   ################################################################
   # USER: Parcellation library
   ################################################################
   1)
      xst2=0
      [[ -z ${net_lib[${cxt}]} ]] \
         && buffer0=${XCPEDIR}/seeds \
         || buffer0=${net_lib[${cxt}]}
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the PATH to the parcellation library "
         echo "that includes all networks that you wish to "
         echo "analyse."
         echo ""
         echo "To create a new parcellation library, enter the"
         echo -e "string ${RED}NEW${RCL}."; echo ""
         read -p "" -e -i ${buffer0} buffer
         ext=$(echo "$buffer"|cut -d"." -f1 --complement)
         if [[ -e "$buffer" ]] \
            && [[ "${ext}" == "parc" ]]
            then
            net_lib[${cxt}]=$buffer
            echo "Parcellation library selected:"
            echo ${net_lib[${cxt}]}; echo ""
            xst2=1
         elif [[ "${buffer}" == "NEW" ]]
            then
            xst2=0
            while [[ "$xst2" == "0" ]]
               do
               echo "Enter a name for the new parcellation library that you "
               echo "wish to create (do NOT include the .parc extension):"
               [[ ! -z ${analysis} ]] && buffer=$analysis || buffer=roi
               read -p "" -e -i $buffer parc
               [[ -z $(echo ${parc}|grep -i '/') ]] && parc=${XCPEDIR}/seeds/${parc}
               if [[ -e "${parc}.parc" ]] || [[ -e ${parc} ]]
                  then
                  echo "Library $parc already exists. Overwrite?"
                  select option in \
                     "Yes" \
                     "Edit this library instead" \
                     "No"
                     do
                     case $REPLY in
                     1)
                        ${XCPEDIR}/utils/parcliber \
                           -o ${parc}.parc \
                           -s ${xsubj}
                        [[ -e ${parc} ]] && net_lib[${cxt}]=${parc}.parc
                        xst2=1
                        break
                        ;;
                     2)
                        ${XCPEDIR}/utils/parcliber \
                           -o ${parc}.parc \
                           -s ${xsubj} \
                           -l ${parc}.parc
                        [[ -e ${parc} ]] && net_lib[${cxt}]=${parc}.parc
                        xst2=1
                        break
                        ;;
                     3)
                        break
                        ;;
                     esac
                  done
               else
                  ${XCPEDIR}/utils/parcliber \
                     -o ${parc}.parc \
                     -s ${xsubj}
                  [[ -e ${parc} ]] && net_lib[${cxt}]=${parc}.parc
                  xst2=1
               fi
            done
            break 2
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo "The input must be either be a path to a parcellation "
            echo -e "library (.parc) file or the string ${RED}NEW${RCL}."
            echo ""
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      pars="${pars} ${curlib}"
      break
      ;;
      
   ################################################################
   # USER: Network analysis name
   ################################################################
   2)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the NAME of the network analysis that will"
      echo "be performed in this module. This feature is useful"
      echo "if, for instance, you are separating network analyses"
      echo "across multiple modules (e.g., netStd and netT1)."
      echo ""
      echo "Enter 'NULL' for no name."
      read -p "" -e -i ${net_name[${cxt}]} buffer
      buffer=$(echo $buffer|sed s@' '@'_'@g)
      net_name[${cxt}]=$buffer
      break
      ;;
      
   ################################################################
   # USER: Connectivity metric
   ################################################################
   3)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the CONNECTIVITY METRIC that you wish"
      echo "to use:"
      select option in \
         "Pearson correlation coefficient"
         do
         case $REPLY in
         ##########################################################
         # USER: Connectivity metric
         #        -> Pearson correlation coefficient
         ##########################################################
         1)
            net_metric[${cxt}]=corrcoef
            echo "Connectivity metric: ${net_metric[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Connectivity metric
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Connectivity metric
         #        -> HELP
         ##########################################################
         *)
            echo "You have no choice. (At least not yet.)"
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Edge weight threshold
   ################################################################
   4)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the THRESHOLD to be applied to the adjacency"
         echo "matrix prior to community detection:"; echo ""
         read -p "" -e -i ${net_thr[${cxt}]} buffer
         if [[ $buffer =~ $NUM ]]
            then
            net_thr[${cxt}]=$buffer
            echo "Threshold: ${net_thr[${cxt}]}"
            xst2=1
         elif [[ $buffer == "N" ]]
            then
            net_thr[${cxt}]=N
            echo "No threshold"
            xst2=1
         elif [[ -n $(echo $buffer|grep '%') ]]
            then
            thresh=$(echo $buffer|sed 's@%@@')
            if [[ $thresh =~ $POSNUM ]]
               then
               net_thr[${cxt}]=$buffer
               echo "Threshold: $thresh %"
            else
               echo "[invalid input]"
            fi
         elif [[ -n $(echo $buffer|grep ABS) ]]
            then
            net_thr[${cxt}]=$buffer
            thresh=$(echo $buffer|sed 's@ABS@@')
            echo "Using absolute value of adjacency matrix"
            if [[ $thresh =~ $NUM ]]
               then
               echo "Threshold: $thresh"
            else
               echo "No threshold"
               net_thr[${cxt}]=ABS
            fi
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}Enter N for no threshold or ABS followed by a number"
            echo "to apply the threshold to the absolute value of the"
            echo "adjacency matrix instead. Enter ABS to compute the"
            echo "absolute value without applying any threshold."
            echo "Enter a numeric value followed by the percent symbol"
            echo "(%) to set the nth percentile of edge weights as"
            echo -e "the threshold.${RCL}"
            echo ""
            echo "The input must either be numeric or one of"
            echo "the strings 'N' or 'ABS'."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: A priori community assignments
   ################################################################
   5)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to perform community analyses using "
      echo "a priori community assignments if they are "
      echo "available?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: A priori community assignments
         #        -> Yes
         ##########################################################
         1)
            net_comh[${cxt}]=Y
            echo -e "${RED}A priori community assignments enabled${CLR}:"
            echo "Ensure that all networks provided include a "
            echo "path to a file containing a priori community "
            echo "assignments."
            break
            ;;
         ##########################################################
         # USER: A priori community assignments
         #        -> No
         ##########################################################
         2)
            net_comh[${cxt}]=N
            echo "A priori community assignments disabled"
            break
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Community detection
   ################################################################
   6)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the approach for assigning network nodes "
      echo "to communities, modules, or subnetworks:"
      select option in \
         "None" \
         "Generalised Louvain-like"
# TODO
#         "Louvain" \
#         "Infomap" \
#         "Girvan-Newman" \
#         "Clauset-Newman-Moore" \
#         "Newman eigenvector" \
#         "Label propagation" \
#         "Random walk" \
#         "Spin glass/stat mech" \
#         "Modularity maximisation" # different from Louvain
         do
         case $REPLY in
         ##########################################################
         # USER: Community detection
         #        -> A priori assignments
         ##########################################################
         1)
            net_com[${cxt}]=none
            echo "Community detection disabled"
            break
            ;;
         ##########################################################
         # USER: Community detection
         #        -> Data-driven assignments
         ##########################################################
         2)
            echo "Community detection: ${net_com[${cxt}]}"
            xst2=0
            while [[ "$xst2" == "0" ]]
               do
               echo ""; echo ""
               echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
               echo ""
               echo "Specify the resolution parameter (gamma) for "
               echo "the generalised Louvain algorithm:"
               read -p "" -e -i ${net_gamma[${cxt}]} buffer
               if [[ $(echo ${buffer}|cut -d"," -f1) =~ $POSNUM ]]
                  then
                  net_gamma[${cxt}]=$buffer
                  echo "Resolution parameter: ${net_gamma[${cxt}]}"
                  xst2=1
               elif [[ ${buffer} == "m" ]]
                  then
                  break 3
               else
                  echo -e "${CYA}The resolution parameter gamma reflects the "
                  echo "size and number of communities detected by "
                  echo "the Louvain-like algorithm. A gamma value of "
                  echo "1 represents the default maximisation of "
                  echo "modularity criterion. Gamma values greater "
                  echo "than one favour a greater number of smaller "
                  echo "communities (higher resolution), whereas gamma "
                  echo "values less than one favour fewer, larger "
                  echo "communities (lower resolution). To perform "
                  echo "community detection at multiple resolutions, "
                  echo -e "enter a comma-separated list of gamma values.${RCL}"
                  echo ""
                  echo "The input must either be a single numeric value "
                  echo "or a comma-separated list of positive numeric "
                  echo "values."
                  echo -e ""
                  echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
               fi
            done
            break
            ;;
         ##########################################################
         # USER: Community detection
         #        -> Louvain
         ##########################################################
#         2)
#            net_com[${cxt}]=louvain
#            echo "Connectivity metric: $net_com[${cxt}]"
#            break
#            ;;
         ##########################################################
         # USER: Community detection
         #        -> Infomap
         ##########################################################
#         3)
#            net_com[${cxt}]=infomap
#            echo "Connectivity metric: $net_com[${cxt}]"
#            break
#            ;;
         ##########################################################
         # USER: Community detection
         #        -> Girvan-Newman
         ##########################################################
#         4)
#            net_com[${cxt}]=girvannewman
#            echo "Connectivity metric: $net_com[${cxt}]"
#            break
#            ;;
         ##########################################################
         # USER: Community detection
         #        -> Clauset-Newman-Moore
         ##########################################################
#         5)
#            net_com[${cxt}]=clauset
#            echo "Connectivity metric: $net_com[${cxt}]"
#           break
#            ;;
         ##########################################################
         # USER: Community detection
         #        -> Newman eigenvector
         ##########################################################
#         6)
#            net_com[${cxt}]=eigenvec
#            echo "Connectivity metric: $net_com[${cxt}]"
#            break
#            ;;
         ##########################################################
         # USER: Community detection
         #        -> Label propagation
         ##########################################################
#         7)
#            net_com[${cxt}]=labelprop
#            echo "Connectivity metric: $net_com[${cxt}]"
#            break
#            ;;
         ##########################################################
         # USER: Community detection
         #        -> Random walk
         ##########################################################
#         8)
#            net_com[${cxt}]=randomwalk
#            echo "Connectivity metric: $net_com[${cxt}]"
#            break
#            ;;
         ##########################################################
         # USER: Community detection
         #        -> Spin glass/stat mech
         ##########################################################
#         9)
#            net_com[${cxt}]=spinglass
#            echo "Connectivity metric: $net_com[${cxt}]"
#            break
#            ;;
         ##########################################################
         # USER: Community detection
         #        -> Modularity maximisation
         ##########################################################
#         10)
#            net_com[${cxt}]=maxmodularity
#            echo "Connectivity metric: $net_com[${cxt}]"
#            break
#            ;;
         m)
            break 2
            ;;
         *)
            echo ""
            echo "You have no choice yet."
            echo ""
            echo -e "${CYA}The generalised Louvain-like algorithm (Mucha "
            echo "et al., 2010) partitions a graph into subgraphs, "
            echo "or 'communities', by merging nodes so as to "
            echo "maximise the value of the modularity coefficient, "
            echo "which can be intuitively understood in terms of "
            echo "the number of within-community edges for a putative "
            echo "partition of the graph as compared with the number "
            echo "of within-community edges for the same partition of "
            echo "a random graph with similar properties (degree, node "
            echo "and edge count). Unlike the original Louvain method "
            echo "(Blondel et al., 2008), the generalisation operates "
            echo "on a modularity matrix instead of the adjacency "
            echo "matrix and supports multislice or multiplex networks, "
            echo -e "such as those in connectivity dynamics.${RCL}"
            echo ""
            echo "Select a valid option: [1]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Iterations to consensus
   ################################################################
   7)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the number of ITERATIONS of community detection "
         echo "that should be performed in order to determine whether a "
         echo "consensus partition has been found:"; echo ""
         read -p "" -e -i ${net_consensus[${cxt}]} buffer
         if [[ $buffer =~ $POSINT ]]
            then
            net_consensus[${cxt}]=$buffer
            echo "Iterations: ${net_consensus[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "Many community detection algorithms are degenerate; "
            echo "i.e., they have multiple correct solutions. A consensus "
            echo "partition is the result of sampling the solution space "
            echo "repeatedly and selecting a partition based on the "
            echo "number of times that each pair of nodes is classified "
            echo "into the same community. This is determined by generating "
            echo "a probabilistic 'agreement matrix' in which the weight of "
            echo "each edge encodes the probability that two nodes are "
            echo "classified into the same community over all sampled "
            echo "solutions. A higher number of iterations will result in "
            echo "a sample that is more representative of the full solution "
            echo "space. After the agreement matrix is generated, community "
            echo "detection is repeated using the agreement matrix instead "
            echo "of the adjacency matrix, again sampling the solution "
            echo "space the same number of times to produce a revised "
            echo "agreement matrix. When the solution space, as reflected "
            echo "in the agreement matrix, is deterministic, then the "
            echo -e "algorithm has converged on a consensus partition.${RCL}"
            echo ""
            echo "The input must be a positive integer."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Within-/between-network connectivity
   ################################################################
   8)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to compute WITHIN- and BETWEEN-NETWORK "
      echo "connectivity?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Within-/between-network connectivity
         #        -> Yes
         ##########################################################
         1)
            net_wb[${cxt}]="Y"
            echo "Within-/between-network connectivity: ${net_wb[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Within-/between-network connectivity
         #        -> No
         ##########################################################
         2)
            net_wb[${cxt}]="N"
            echo "Within-/between-network connectivity: ${net_wb[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Within-/between-network connectivity
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Within-/between-network connectivity
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "In addition to overall partition quality, network "
            echo "segregation can be estimated using the mean strength "
            echo "of connections within and between networks. Enabling "
            echo "this option will also enable computation of overall "
            echo "and network-level connection specificity."
            echo -e "${RCL}"
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Re-run
   ################################################################
   9)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            net_rerun[${cxt}]="Y"
            echo "Re-run: ${net_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            net_rerun[${cxt}]="N"
            echo "Re-run: ${net_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   10)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of INTERMEDIATE"
      echo "steps in the network analysis?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Delete intermediate files
         #        -> Yes
         ##########################################################
         1)
            net_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${net_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> No
         ##########################################################
         2)
            net_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${net_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset default parameters
   ################################################################
   11)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      nets=""
      net_lib[${cxt}]=""
      source ${XCPEDIR}/modules/net/net.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   12)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      ;;
      
   esac
done
done

###################################################################
# write parameters to design file
###################################################################
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} NET" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "net_lib[${cxt}]=${net_lib[${cxt}]}" >> $design
echo "net_name[${cxt}]=${net_name[${cxt}]}" >> $design
echo "net_metric[${cxt}]=${net_metric[${cxt}]}" >> $design
echo "net_thr[${cxt}]=${net_thr[${cxt}]}" >> $design
echo "net_com[${cxt}]=${net_com[${cxt}]}" >> $design
echo "net_comh[${cxt}]=${net_comh[${cxt}]}" >> $design
echo "net_gamma[${cxt}]=${net_gamma[${cxt}]}" >> $design
echo "net_consensus[${cxt}]=${net_consensus[${cxt}]}" >> $design
echo "net_wb[${cxt}]=${net_wb[${cxt}]}" >> $design
echo "net_rerun[${cxt}]=${net_rerun[${cxt}]}" >> $design
echo "net_cleanup[${cxt}]=${net_cleanup[${cxt}]}" >> $design

