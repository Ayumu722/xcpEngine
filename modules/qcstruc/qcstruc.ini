#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for strucQA module
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]] ||  [[ "$1" == "info" ]]
   then
   echo ""
   echo -e "${CYA}StrucQA${RCL}:"
   echo "This module will execute the strucQA pipeline"
   echo "with customiziable optioins for segmentation"
   echo ""
   exit 0
fi
###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/strucQA/strucQA.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

###################################################################
# The ugly while loop is necessary for the select options to update
# correctly
###################################################################
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""; echo ""
echo -e "Welcome to ${RED}strucQA${RCL} initialisation for the XCP Engine."
echo "Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "Will a GM segmentation mask be provided: ${strucQA_gm[${cxt}]}" \
   "GM segmentation mask GM values: ${strucQA_gm_val[${cxt}]}" \
   "Will a WM segmentation mask be provided: ${strucQA_wm[${cxt}]}" \
   "WM segmentation mask WM values: ${strucQA_wm_val[${cxt}]}" \
   "Will a CSF segmentation mask be provided: ${strucQA_csf[${cxt}]}" \
   "CSF segmentation mask CSF values: ${strucQA_csf_val[${cxt}]}" \
   "Will a cortical segmentation mask be provided: ${strucQA_cort[${cxt}]}" \
   "cortical segmentation mask cortical values: ${strucQA_cort_val[${cxt}]}" \
   "Structural segmentation mask path or software: ${strucQA_seg[${cxt}]}" \
   "Re-run: ${strucQA_rerun[${cxt}]}" \
   "Delete intermediate files: ${strucQA_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
   ################################################################
   # USER: strucQA_gm
   ################################################################
   1)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to provide a GM segmentation"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            strucQA_gm[${cxt}]="Y"
            echo "GM segmentation provided: ${strucQA_gm[${cxt}]}"
	    break	    
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            strucQA_gm[${cxt}]="N"
            echo "GM segmentation provided: ${strucQA_gm[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "If a previously calculated segmentation of the gray matter  "
            echo "exists please provide the XCP engine with a Y "
            echo "If no previous segmentation exists one will be calculated using either "
            echo "FAST or Atropos "
            echo -e "${RCL}"
            echo "Select a valid option: [Y|N]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   ################################################################
   # USER: GM segmentation value
   ################################################################
   2)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Select the GM threshold to apply to the segmentation mask: "\
            -e -i ${strucQA_gm_val[${cxt}]} buffer
         element1=$(echo ${buffer}|cut -d"," -f1| cut -d":" -f1)
         if [[ $element1 =~ $NUM ]]
            then
            strucQA_gm_val[${cxt}]=$buffer
            echo "GM threshold selected: ${strucQA_gm_val[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "This value should corespond to the intensity level for the GM voxels from the input segmentation."
	    echo  ""
            echo -e "The value should be an integer, if more then one levels are provided they should be seperated by commas"
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   ################################################################
   # USER: strucQA_wm
   ################################################################
   3)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to provide a WM segmentation"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            strucQA_wm[${cxt}]="Y"
            echo "WM segmentation provided: ${strucQA_wm[${cxt}]}"
	    break	    
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            strucQA_wm[${cxt}]="N"
            echo "WM segmentation provided: ${strucQA_wm[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "If a previously calculated segmentation of the white matter  "
            echo "exists please provide the XCP engine with a Y "
            echo "If no previous segmentation exists one will be calculated using either "
            echo "FAST or Atropos "
            echo -e "${RCL}"
            echo "Select a valid option: [Y|N]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   ################################################################
   # USER: WM segmentation value
   ################################################################
   4)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Select the WM threshold to apply to the segmentation mask: "\
            -e -i ${strucQA_wm_val[${cxt}]} buffer
         element1=$(echo ${buffer}|cut -d"," -f1| cut -d":" -f1)
         if [[ $element1 =~ $NUM ]]
            then
            strucQA_wm_val[${cxt}]=$buffer
            echo "WM threshold selected: ${strucQA_wm_val[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "This value should corespond to the intensity level for the WM voxels from the input segmentation."
	    echo  ""
            echo -e "The value should be an integer, if more then one levels are provided they should be seperated by commas"
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   ################################################################
   # USER: strucQA_csf
   ################################################################
   5)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to provide a CSF segmentation"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            strucQA_csf[${cxt}]="Y"
            echo "WM segmentation provided: ${strucQA_csf[${cxt}]}"
	    break	    
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            strucQA_csf[${cxt}]="N"
            echo "CSF segmentation provided: ${strucQA_csf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "If a previously calculated segmentation of the CSF  "
            echo "exists please provide the XCP engine with a Y "
            echo "If no previous segmentation exists one will be calculated using either "
            echo "FAST or Atropos "
            echo -e "${RCL}"
            echo "Select a valid option: [Y|N]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   ################################################################
   # USER: CSF segmentation value
   ################################################################
   6)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Select the CSF threshold to apply to the segmentation mask: "\
            -e -i ${strucQA_csf_val[${cxt}]} buffer
         element1=$(echo ${buffer}|cut -d"," -f1| cut -d":" -f1)
         if [[ $element1 =~ $NUM ]]
            then
            strucQA_csf_val[${cxt}]=$buffer
            echo "CSF threshold selected: ${strucQA_csf_val[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "This value should corespond to the intensity level for the CSF voxels from the input segmentation."
	    echo  ""
            echo -e "The value should be an integer, if more then one levels are provided they should be seperated by commas"
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   ################################################################
   # USER: strucQA_cort
   ################################################################
   7)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to provide a Cortical segmentation"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            strucQA_cort[${cxt}]="Y"
            echo "Cortical segmentation provided: ${strucQA_cort[${cxt}]}"
	    break	    
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            strucQA_cort[${cxt}]="N"
            echo "Cortical segmentation provided: ${strucQA_cort[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "If a previously calculated segmentation of the Cortex  "
            echo "exists please provide the XCP engine with a Y "
            echo "If no previous segmentation exists one will be calculated using either "
            echo "FAST or Atropos "
            echo -e "${RCL}"
            echo "Select a valid option: [Y|N]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   ################################################################
   # USER: Cortical segmentation value
   ################################################################
   8)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Select the Cortical threshold to apply to the segmentation mask: "\
            -e -i ${strucQA_cort_val[${cxt}]} buffer
         element1=$(echo ${buffer}|cut -d"," -f1| cut -d":" -f1)
         if [[ $element1 =~ $NUM ]]
            then
            strucQA_cort_val[${cxt}]=$buffer
            echo "Cortical threshold selected: ${strucQA_cort_val[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "This value should corespond to the intensity level for the Cortical voxels from the input segmentation."
	    echo  ""
            echo -e "The value should be an integer, if more then one levels are provided they should be seperated by commas"
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   ################################################################
   # USER: Segmentation
   ################################################################
   9)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the PATH to the segmentation | Segmentation technique "
         echo "for the current study."; echo ""
         read -p "" -e -i ${strucQA_seg} buffer
         ext=$(echo "$buffer"|cut -d"." -f1 --complement)
         if [[ -n "$buffer" ]]
            then
            strucQA_seg=$buffer
            echo "Segmentation image selected:"
            echo ${strucQA_seg}; echo ""
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo "The segmentation can either point to a previously calculated segemtnation of the input anatomical image"
            echo "Or segmentation software to use. These are currently limited to FAST or Atropos"
	    echo ""
            echo ""
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   ################################################################
   # USER: Re-run
   ################################################################
   10)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            strucQA_rerun[${cxt}]="Y"
            echo "Re-run: ${strucQA_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            strucQA_rerun[${cxt}]="N"
            echo "Re-run: ${strucQA_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo "completed analyses will be repeated."
            echo -e "${RCL}"
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   11)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of"
      echo "INTERMEDIATE steps in the prestats algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Delete intermediate files
         #        -> Yes
         ##########################################################
         1)
            strucQA_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${strucQA_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> No
         ##########################################################
         2)
            strucQA_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${strucQA_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   ################################################################
   # USER: Reset default parameters
   ################################################################
   12)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/strucQA/strucQA.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   13)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      $0 INFO
      ;;
      
   esac
done
done

###################################################################
# write parameters to design file
###################################################################
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} strucQA" >> $design
echo "###################################################################" >> $design
echo "" >> $design
echo ""
echo "strucQA_gm[${cxt}]=${strucQA_gm[${cxt}]}" >> $design
echo "strucQA_gm_val[${cxt}]=${strucQA_gm_val[${cxt}]}" >> $design
echo "strucQA_wm[${cxt}]=${strucQA_wm[${cxt}]}" >> $design
echo "strucQA_wm_val[${cxt}]=${strucQA_wm_val[${cxt}]}" >> $design
echo "strucQA_csf[${cxt}]=${strucQA_csf[${cxt}]}" >> $design
echo "strucQA_csf_val[${cxt}]=${strucQA_csf_val[${cxt}]}" >> $design
echo "strucQA_cort[${cxt}]=${strucQA_cort[${cxt}]}" >> $design
echo "strucQA_cort_val[${cxt}]=${strucQA_cort_val[${cxt}]}" >> $design
echo "strucQA_seg[${cxt}]=${strucQA_seg[${cxt}]}" >> $design
echo "strucQA_rerun[${cxt}]=${strucQA_rerun[${cxt}]}" >> $design
echo "strucQA_cleanup[${cxt}]=${strucQA_cleanup[${cxt}]}" >> $design
