#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for ICA-AROMA module
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]]
   then
   echo ""
   echo -e "${CYA}AROMA${RCL}:"
   echo "This module performs an ICA-based denoising procedure "
   echo "   inspired by the ICA-AROMA strategy developed by Pruim "
   echo "   and colleagues. ICA-AROMA decomposes fMRI timeseries "
   echo "   data into spatial independent components using FSL's "
   echo "   MELODIC. It then classifies each component as signal "
   echo "   or noise on the basis of four features: correlation "
   echo "   with motion parameters, fraction of the component in "
   echo "   CSF, fraction of the component near the edge of the "
   echo "   brain, and high-frequency content. If your work makes "
   echo "   use of this module, please cite the original study by "
   echo "   Pruim and colleagues."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/aroma/aroma.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

################################################################### 
# The ugly while loop is necessary for the select options to update
# correctly
################################################################### 
xst1=0
while [ "$xst1" == "0" ]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""; echo ""
echo -e "Welcome to ${RED}ICA-AROMA${RCL} initialisation for the XCP Engine."
echo "Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "ICA decomposition model order: ${aroma_dim[${cxt}]}" \
   "Cerebrospinal fluid mask: ${aroma_csf[${cxt}]}" \
   "Brain edge mask: ${aroma_edge[${cxt}]}" \
   "Background mask: ${aroma_bg[${cxt}]}" \
   "Denoising type: ${aroma_dtype[${cxt}]}" \
   "Spatial filter: ${aroma_sptf[${cxt}]}" \
   "Spatial smoothing FWHM: ${aroma_smo[${cxt}]} mm" \
   "Detrend order: ${aroma_dmdt[${cxt}]}"
   "Re-run: ${aroma_rerun[${cxt}]}" \
   "Delete intermediate files: ${aroma_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
      
   ################################################################
   # USER: ICA decomposition model order
   ################################################################
   1)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Specify the MODEL ORDER for ICA DECOMPOSITION: "\
            -e -i ${aroma_dim[${cxt}]} buffer
         if [[ $buffer =~ $POSINT ]]
            then
            aroma_dim[${cxt}]=$buffer
            echo "Model order: ${aroma_dim[${cxt}]} mm"
            xst2=1
         elif [[ "${buffer}" == "auto" ]]
            then
            aroma_dim[${cxt}]=$buffer
            echo "Automatic (data-driven) selection of the model order "
            echo "selected."
            break 2
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "The order of the ICA model refers to the number of "
            echo "components into which the timeseries is decomposed. "
            echo "A smaller model order (20-30) will typically return "
            echo "components that correspond to intrinsic connectivity "
            echo "networks, while a higher model order (c. 100) will "
            echo "return components with finer spatial resolution. "
            echo "Rather than constraining the decomposition based on "
            echo "an a priori hypothesis, it is also possible to "
            echo "automatically estimate the model order using a data-"
            echo "driven approach. This is the course of action taken "
            echo "in the original implementation of ICA-AROMA."
            echo -e "${RCL}"
            echo "Enter a non-negative integer for a priori "
            echo -e "specification of the model order. Enter ${RED}'auto'${RCL} for "
            echo "data-driven dimensionality estimation. This will use "
            echo "the Laplace approximation to the Bayesian evidence of "
            echo "the model order to determine the number of components."
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Cerebrospinal fluid mask
   ################################################################
   2)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Specify the path to a standard-space AROMA CSF MASK: "\
            -e -i ${aroma_csf[${cxt}]} buffer
         if [[ $(imtest $buffer) == 1 ]]
            then
            aroma_csf[${cxt}]=$buffer
            echo "CSF mask: ${aroma_csf[${cxt}]} mm"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "ICA-AROMA uses the CSF, edge, and background masks "
            echo "to obtain evidence regarding the 'signal' or 'noise' "
            echo "classification of each independent component. The "
            echo "masks used by ICA-AROMA are not derived from the "
            echo "subject-space segmentation; they must be in standard "
            echo "space."
            echo -e "${RCL}"
            echo "The input must be a path to an image volume."
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Brain edge mask
   ################################################################
   3)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Specify the path to a standard-space AROMA EDGE MASK: "\
            -e -i ${aroma_edge[${cxt}]} buffer
         if [[ $(imtest $buffer) == 1 ]]
            then
            aroma_edge[${cxt}]=$buffer
            echo "Edge mask: ${aroma_edge[${cxt}]} mm"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "ICA-AROMA uses the CSF, edge, and background masks "
            echo "to obtain evidence regarding the 'signal' or 'noise' "
            echo "classification of each independent component. The "
            echo "masks used by ICA-AROMA are not derived from the "
            echo "subject-space segmentation; they must be in standard "
            echo "space."
            echo -e "${RCL}"
            echo "The input must be a path to an image volume."
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Background mask
   ################################################################
   4)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the path to a standard-space AROMA BACKGROUND "
         read -p "(complement of brain) MASK: "\
            -e -i ${aroma_bg[${cxt}]} buffer
         if [[ $(imtest $buffer) == 1 ]]
            then
            aroma_bg[${cxt}]=$buffer
            echo "Background mask: ${aroma_bg[${cxt}]} mm"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo -e "${CYA}"
            echo "ICA-AROMA uses the CSF, edge, and background masks "
            echo "to obtain evidence regarding the 'signal' or 'noise' "
            echo "classification of each independent component. The "
            echo "masks used by ICA-AROMA are not derived from the "
            echo "subject-space segmentation; they must be in standard "
            echo "space."
            echo -e "${RCL}"
            echo "The input must be a path to an image volume."
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Denoising type
   ################################################################
   5)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "What type of denoising do you wish to apply?"
      select option in \
         "Nonaggressive" \
         "Aggressive"
         do
         case $REPLY in
         ##########################################################
         # USER: Denoising type
         #        -> Nonaggressive
         ##########################################################
         1)
            aroma_dtype[${cxt}]=nonaggr
            break
            ;;
         ##########################################################
         # USER: Denoising type
         #        -> Aggressive
         ##########################################################
         2)
            aroma_dtype[${cxt}]=aggr
            break
            ;;
         ##########################################################
         # USER: Denoising type
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Denoising type
         #        -> HELP
         ##########################################################
         *)
            echo -e "${CYA}"
            echo "If nonaggressive denoising is selected, then both "
            echo "'signal' and 'noise' components will be included in "
            echo "the regression model, and the timeseries will be "
            echo "residualised using the partial parameter estimates "
            echo "corresponding to the 'noise' components. By contrast, "
            echo "aggressive denoising uses full instead of partial "
            echo "regression of noise component timeseries. ICA-AROMA "
            echo "as developed used the non-aggressive option."
            echo -e "${RCL}"
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Spatial filter
   ################################################################
   6)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Specify the SPATIAL FILTER."
      echo "(The spatial filter will be applied only to "
      echo " the image used for ICA decomposition. It "
      echo " will not persist in future processing steps. "
      echo " If you want a persistent spatial filter, use "
      echo " the 'prestats' module instead.)"
      select option in \
         "Gaussian" \
         "SUSAN" \
         "Uniform smoothness" \
         "None"
         do
         case $REPLY in
         ##########################################################
         # USER: Spatial filter
         #        -> Gaussian
         ##########################################################
         1)
            aroma_sptf[${cxt}]="gaussian"
            echo "Spatial filter: ${aroma_sptf[${cxt}]}"
            break
            ;;
         2)
         ##########################################################
         # USER: Spatial filter
         #        -> SUSAN
         ##########################################################
            aroma_sptf[${cxt}]="susan"
            echo "Spatial filter: ${aroma_sptf[${cxt}]}"
            break
            ;;
         3)
         ##########################################################
         # USER: Spatial filter
         #        -> Uniform smoothness
         ##########################################################
            aroma_sptf[${cxt}]="uniform"
            echo "Spatial filter: ${aroma_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> None
         ##########################################################
         4)
            aroma_sptf[${cxt}]="none"
            echo "Spatial filter: ${aroma_sptf[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Spatial filter
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "* ${RED}Gaussian ${CYA}smoothing applies the same Gaussian "
            echo -e "  smoothing kernel across the entire volume.${RCL}"
            echo -e "* ${RED}SUSAN${CYA}-based smoothing restricts mixing of signals "
            echo "  from disparate tissue classes (Smith and Brady, "
            echo -e "  1997).${RCL}"
            echo -e "* ${RED}Uniform ${CYA}smoothing applies smoothing to all voxels "
            echo "  until the smoothness computed at every voxel "
            echo -e "  attains the target value.${RCL}"
            echo -e "* ${RED}Uniform ${CYA}smoothing may be used as a compensatory "
            echo "  mechanism to reduce the effects of subject motion "
            echo "  on the final processed image (Scheinost et al., "
            echo -e "  2014).${RCL}"
            echo ""
            echo "Select a valid option: [1|2|3]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Spatial smoothing FWHM
   ################################################################
   7)
      xst2=0
      while [ "$xst2" == "0" ]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         if [[ "${aroma_sptf[${cxt}]}" == "none" ]]
         then
            echo -e "${RED}WARNING${RCL}:spatial filtering is currently disabled."
            echo "Setting the FWHM for spatial smoothing will"
            echo "have no effect unless the spatial filter is"
            echo "enabled."
         fi
         read -p "Specify the FWHM for SPATIAL SMOOTHING, in mm: "\
            -e -i ${aroma_smo[${cxt}]} buffer
         if [[ $buffer =~ $POSNUM ]]
            then
            aroma_smo[${cxt}]=$buffer
            echo "Spatial filter: ${aroma_smo[${cxt}]} mm"
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Endemic noise, for instance due to physiological"
            echo "signals or scanner activity, can introduce spurious or"
            echo "artefactual results in single voxels. The effects of"
            echo "noise-related artefacts can be mitigated by spatially"
            echo "filtering the data, thus dramatically increasing the"
            echo "signal-to-noise ratio. However, spatial smoothing is"
            echo "not without its costs: it effectively reduces"
            echo "volumetric resolution by blurring signals from adjacent"
            echo -e "voxels.${RCL}"
            echo ""
            echo "Enter a non-negative number. Enter 0 for no filter."
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Detrend order
   ################################################################
   8)
      xst2=0
      while [ "$xst2" == "0" ]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         read -p "Specify the polynomial ORDER for DEMEANING and DETRENDING: "\
            -e -i ${aroma_dmdt[${cxt}]} buffer
         if [[ $buffer =~ $POSINT ]]
            then
            aroma_dmdt[${cxt}]=$buffer
            echo "Detrend order: ${aroma_dmdt[${cxt}]}"
            xst2=1
         elif [[ "${buffer}" == "auto" ]]
            then
            aroma_dmdt[${cxt}]=$buffer
            echo "Detrend order will be computed automatically."
            xst2=1
            break
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo ""
            echo -e "${CYA}Scanner drift may introduce linear or polynomial trends "
            echo "into imaging data; these trends may be removed using a "
            echo "general linear model-based fit. Notably, removal of "
            echo "trends in this manner will also remove the timeseries "
            echo "mean from the data, which may be undesirable for "
            echo -e "analyses in which absolute intensity is important.${RCL}"
            echo ""
            echo "The input must be a nonnegative integer."
            echo -e "${CYA}An order of ${RED}0${CYA} results in demeaning only."
            echo -e "Entering ${RED}auto${CYA} will automatically compute an appropriate"
            echo " value (following AFNI) based on the duration of the scan."
            echo " The formula used to compute this is:"
            echo -e "           ${RED}floor(1 + TR*nVOLS / 150)${RCL}"
            echo ""
            echo "To skip this step, edit DMT out of the processing order."
            echo -e "${RCL}"
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
   
   ################################################################
   # USER: Re-run
   ################################################################
   9)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            aroma_rerun[${cxt}]="Y"
            echo "Re-run: ${aroma_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            aroma_rerun[${cxt}]="N"
            echo "Re-run: ${aroma_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Delete intermediate outputs
   ################################################################
   10)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of INTERMEDIATE"
      echo "steps in the coregistration algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         ##########################################################
         # USER: Delete intermediate outputs
         #        -> Yes
         ##########################################################
         case $REPLY in
         1)
            aroma_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${aroma_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate outputs
         #        -> No
         ##########################################################
         2)
            aroma_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${aroma_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset to default parameters
   ################################################################
   11)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/aroma/aroma.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   12)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      ;;
   
   esac

done

done

###################################################################
# write parameters to design file
###################################################################
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} AROMA" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "aroma_dim[${cxt}]=${aroma_dim[${cxt}]}" >> $design
echo "aroma_csf[${cxt}]=${aroma_csf[${cxt}]}" >> $design
echo "aroma_edge[${cxt}]=${aroma_edge[${cxt}]}" >> $design
echo "aroma_bg[${cxt}]=${aroma_bg[${cxt}]}" >> $design
echo "aroma_dtype[${cxt}]=${aroma_dtype[${cxt}]}" >> $design
echo "aroma_sptf[${cxt}]=${aroma_sptf[${cxt}]}" >> $design
echo "aroma_smo[${cxt}]=${aroma_smo[${cxt}]}" >> $design
echo "aroma_dmdt[${cxt}]=${aroma_dmdt[${cxt}]}" >> $design
echo "aroma_rerun[${cxt}]=${aroma_rerun[${cxt}]}" >> $design
echo "aroma_cleanup[${cxt}]=${aroma_cleanup[${cxt}]}" >> $design
