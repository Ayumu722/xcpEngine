#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# initialisation script for FEAT/task analysis
###################################################################

###################################################################
# global constants
###################################################################
readonly POSINT='^[0-9]+$'
readonly INT='^-?[0-9]+$'
readonly POSNUM='^[0-9]+([.][0-9]+)?$'
readonly NUM='^-?[0-9]+([.][0-9]+)?$'
readonly ALPHA='^[A-Z]+$'
readonly RED='\033[0;31m'
readonly CYA='\033[0;36m'
readonly LGR='\033[0;37m'
readonly RCL='\033[0m'

###################################################################
# If prompted for information, then return...
###################################################################
if [[ "$1" == "INFO" ]]
   then
   echo ""
   echo -e "${CYA}TASK${RCL}:"
   echo "This module performs any subject-level analysis that can "
   echo "   be performed using FMRIB's FEAT. It accepts a FEAT "
   echo "   design file (.fsf) and generalises it to every subject."
   echo "   Any subject variables defined in the cohort file may be "
   echo "   used in the FEAT design as ~XID0, ~XID1, ~XID2, etc."
   echo "   It then reorganises the FEAT output directory to conform "
   echo "   to the XCP standard."
   echo ""
   exit 0
fi

###################################################################
# Inputs:
# -d : design file
# -c : context in pipeline
# -o : old design file (optional)
###################################################################
while getopts "d:c:o:" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   o)
      old_design=${OPTARG}
      ;;
   c)
      cxt=${OPTARG}
      ! [[ ${cxt} =~ $POSINT ]] && ${XCPEDIR}/xcpModusage ini && exit
      ;;
   *)
      ${XCPEDIR}/xcpModusage ini
      exit
   esac
done
shift $((OPTIND-1))

[[ -z ${design} ]] && ${XCPEDIR}/xcpModusage ini && exit

source ${XCPEDIR}/modules/task/task.def $cxt
buffer=$design
[[ ! -z "${old_design}" ]] && source ${old_design}
design=$buffer
source $design

################################################################### 
# The ugly while loop is necessary for the select options to update
# correctly
################################################################### 
xst1=0
while [[ "$xst1" == "0" ]]
do

echo ""; echo ""
echo -e "${RED}______________________________________________________________${RCL}"
echo "M${cxt}"; echo ""; echo ""
echo -e "Welcome to ${RED}task${RCL} model initialisation for the XCP "
echo "Engine. Select a parameter to define."
echo -e "After selecting an item, enter ${RED}?${RCL} for additional information."

select option in \
   "FEAT study design (.fsf): ${task_design[${cxt}]}" \
   "Re-run: ${task_rerun[${cxt}]}" \
   "Delete intermediate files: ${task_cleanup[${cxt}]}" \
   "Reset to default parameters." \
   "All parameters are correct."
   do
   case $REPLY in
   
   ################################################################
   # USER: FEAT design (.fsf)
   ################################################################
   1)
      xst2=0
      while [[ "$xst2" == "0" ]]
         do
         echo ""; echo ""
         echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
         echo ""
         echo "Specify the PATH to the FEAT design file (.fsf) "
         echo "for the current study."; echo ""
         read -p "" -e -i ${XCPEDIR} buffer
         ext=$(echo "$buffer"|cut -d"." -f1 --complement)
         if [[ -e "$buffer" ]] \
            && [[ "${ext}" == "fsf" ]]
            then
            task_design[${cxt}]=$buffer
            echo "Study design selected:"
            echo ${task_design[${cxt}]}; echo ""
            xst2=1
         elif [[ "${buffer}" == "m" ]]
            then
            break 2
         else
            echo "The input must be a path to a FEAT design file "
            echo "(.fsf)."
            echo ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
         fi
      done
      break
      ;;
      
   ################################################################
   # USER: Re-run
   ################################################################
   2)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to RE-RUN any completed steps?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Re-run
         #        -> Yes
         ##########################################################
         1)
            task_rerun[${cxt}]="Y"
            echo "Re-run: ${task_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> No
         ##########################################################
         2)
            task_rerun[${cxt}]="N"
            echo "Re-run: ${task_rerun[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Re-run
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Re-run
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}Ordinarily, the XCP modules will detect whether "
            echo "a particular analysis has run to completion "
            echo "before beginning it. If re-running is disabled, "
            echo "then the XCP module will immediately skip to "
            echo "the next stage of analysis. Otherwise, any "
            echo -e "completed analyses will be repeated.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
   
   ################################################################
   # USER: Delete intermediate files
   ################################################################
   3)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Do you wish to DELETE any outputs of INTERMEDIATE"
      echo "steps in the activation processing algorithm?"
      select option in \
         "Yes" \
         "No"
         do
         case $REPLY in
         ##########################################################
         # USER: Delete intermediate files
         #        -> Yes
         ##########################################################
         1)
            task_cleanup[${cxt}]="Y"
            echo "Delete intermediate files: ${task_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> No
         ##########################################################
         2)
            task_cleanup[${cxt}]="N"
            echo "Delete intermediate files: ${task_cleanup[${cxt}]}"
            break
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> MENU
         ##########################################################
         m)
            break 2
            ;;
         ##########################################################
         # USER: Delete intermediate files
         #        -> HELP
         ##########################################################
         *)
            echo ""
            echo -e "${CYA}XCP modules often produce numerous intermediate "
            echo "temporary files and images during the course of "
            echo "an analysis. In many cases, these temporary "
            echo "files are undesirable and unnecessarily consume "
            echo "disk space. If cleanup is enabled, any files "
            echo "stamped as temporary will be deleted when a module "
            echo "successfully runs to completion. If a module "
            echo "fails to detect the output that it expects, then "
            echo "temporary files will be retained to facilitate "
            echo -e "error diagnosis.${RCL}"
            echo ""
            echo "Select a valid option: [1|2]"
            echo -e ""
            echo -e "ENTER ${RED}m${RCL} TO RETURN TO THE MAIN MODULE MENU."
            echo ""; echo ""
            echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
            ;;
         esac
      done
      break
      ;;
      
   ################################################################
   # USER: Reset to default parameters
   ################################################################
   4)
      echo ""; echo ""
      echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
      echo ""
      echo "Default parameters reset."
      source ${XCPEDIR}/modules/task/task.def $cxt
      break
      ;;
      
   ################################################################
   # USER: All parameters are correct
   ################################################################
   5)
      xst1=1
      break
      ;;
      
   *)
      echo -e "${RED}Invalid option specified. Enter the number"
      echo -e "corresponding to the appropriate option.${RCL}"
      ;;
   esac
done
done


###################################################################
# write parameters to design file
###################################################################
echo -e "${CYA}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -${RCL}"
echo -e "${CYA}Writing user specifications to design file...${RCL}"

echo "" >> $design
echo "###################################################################" >> $design
echo "# ${cxt} TASK" >> $design
echo "###################################################################" >> $design
echo "" >> $design

echo "task_design[${cxt}]=${task_design[${cxt}]}" >> $design
echo "task_rerun[${cxt}]=${task_rerun[${cxt}]}" >> $design
echo "task_cleanup[${cxt}]=${task_cleanup[${cxt}]}" >> $design
