#!/usr/bin/env bash


###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# SPECIFIC MODULE HEADER
# This module localises inputs to the XCP engine
###################################################################
mod_name='XCP ENGINE LOCALISER'
mod_head=${XCPEDIR}/core/CONSOLE_MODULE_RC
cxt=0

###################################################################
# GENERAL MODULE HEADER
###################################################################
source ${XCPEDIR}/core/constants
source ${XCPEDIR}/core/functions/library.sh
source ${XCPEDIR}/core/parseArgsLocaliser

################################################################### 
# Localise design file
################################################################### 
routine                       @1    Localising design file...

###################################################################
# Parse subject
###################################################################
subroutine                    @1.1  [Parsing subject identifiers]
   
###################################################################
# Create output directory
###################################################################
subroutine                    @1.1a [Creating output directory]
   subroutine                 @1.1b [${out[sub]}]
   outdir=${out[sub]}
   mkdir -p $outdir

###################################################################
# Write local design file
###################################################################
subroutine                    @1.2  [Writing localised design]
   design[$sub]=${out[sub]}/${prefix[sub]}.dsn
   rm -f  ${design[sub]}
   printx ${design}                             >> ${design[sub]}

###################################################################
# Evaluate subject-specific variables
###################################################################
subroutine                    @1.3  [Evaluating subject variables]
   cat    ${XCPEDIR}/core/DESIGN_VARHEAD_OUTPUT >> ${design[sub]}
   printx ${XCPEDIR}/core/DESIGN_MODULE_OUTPUT  >> ${design[sub]}
   echo   "sub=$sub"                            >> ${design[sub]}
   echo   "design[$sub]=${design[sub]}"         >> ${design[sub]}
   echo   "prefix[$sub]=${prefix[sub]}"         >> ${design[sub]}
   echo   "out[$sub]=${out[sub]}"               >> ${design[sub]}
   [[ -n  ${scratch} ]] \
   && echo "scratch=${scratch}"                 >> ${design[sub]}
   for v in "${cohort_vars[@]}"
      do
      echo "${v}=${!v}"                         >> ${design[sub]}
   done

###################################################################
# Write path to spaces index
###################################################################
subroutine                    @1.4  [Initialising space mapping]
   output                     spaces      ${prefix[sub]}_spaces.json
   rm -f                                  ${spaces[cxt]}
   source                                 ${XCPEDIR}/core/initSpace
   write_output               spaces

###################################################################
# Write path to derivative image index
###################################################################
subroutine                    @1.5  [Initialising derivative maps]
   output                     aux_imgs    ${prefix[sub]}_derivatives.json
   rm -f                                  ${aux_imgs[cxt]}
   echo '{}'                           >> ${aux_imgs[cxt]}
   write_output               aux_imgs

###################################################################
# Write path to network index
###################################################################
subroutine                    @1.6  [Initialising atlas system]
   mkdir -p                               ${out[sub]}/${prefix[sub]}_atlas
   output                     atlas       ${prefix[sub]}_atlas/${prefix[sub]}_atlas.json
   rm -f                                  ${atlas[cxt]}
   echo '{}'                           >> ${atlas[cxt]}
   write_output               atlas

###################################################################
# Write path to audit file, and write information
# to the audit file
###################################################################
subroutine                    @1.7  [Priming analytic audit]
   audit=${out[sub]}/${prefix[sub]}_logs/${prefix[sub]}_audit
   rm -f ${audit}
   echo "audit[$sub]=${audit}"                 >> ${design[sub]}
   
   ################################################################
   # Prepare the audit header, which will contain information
   # about the processing status of the current subject
   ################################################################
   id_vals=${prefix[sub]//_/,}
   id_vars=$(echo    ${!subject[@]})
   id_vars=$(echo    id${id_vars// /,id})
   audit_var=${id_vars},localiser,${pipeline}
   
   ################################################################
   # Write the contents of the audit file.
   ################################################################
   num_mods=$(( $(ninstances , ${pipeline}) + 2 ))
   audit_val=${id_vals}$(printf ',0%.0s' $(seq 1 ${num_mods}))
   echo "${audit_var}"                          >> ${audit}
   echo "${audit_val}"                          >> ${audit}

###################################################################
# Write path to index of quality variables
###################################################################
subroutine                    @1.8  [Priming quality assessment]
   quality=${out[sub]}/${prefix[sub]}_quality.csv
   rm -f ${quality}
   echo "quality[$sub]=${quality}"              >> ${design[sub]}
   echo "${id_vars}"                            >> ${quality}
   echo "${id_vals}"                            >> ${quality}
routine_end


###################################################################
# Localise the image.
# * Ensure that all images are present
# * If necessary, convert it to NIFTI_GZ format.
# * If necessary, convert it to RPI orientation.
###################################################################
routine                       @2    Localising image
subroutine                    @2.1  [Verifying that images are present]
source ${XCPEDIR}/core/imgChk
subroutine                    @2.2  [Conforming and localising image]
source ${XCPEDIR}/core/imgLocalise
routine_end

###################################################################
# Enter audit information for the current subject
###################################################################
routine                       @3    Updating audit
source ${XCPEDIR}/core/auditComplete
routine_end

echo "

Localiser complete"
