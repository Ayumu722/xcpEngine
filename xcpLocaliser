#!/usr/bin/env bash


###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# SPECIFIC MODULE HEADER
# This module localises inputs to the XCP engine
###################################################################
mod_name='XCP ENGINE LOCALISER'
mod_head=${XCPEDIR}/core/CONSOLE_MODULE_RC
cxt=0

###################################################################
# GENERAL MODULE HEADER
###################################################################
source ${XCPEDIR}/core/constants
source ${XCPEDIR}/core/functions/library.sh
source ${XCPEDIR}/core/parseArgsLocaliser

################################################################### 
# Localise design file
################################################################### 
routine                       @1    Localising design file...

###################################################################
# Parse subject
###################################################################
subroutine                    @1.1  [Parsing subject identifiers]
   source ${XCPEDIR}/core/parseSubject ${subject}
   
###################################################################
# Create output directory
###################################################################
subroutine                    @1.1a [Creating output directory]
   subroutine                 @1.1b [${out}]
   outdir=${out}
   mkdir -p $out

###################################################################
# Evaluate subject-specific variables
###################################################################
subroutine                    @1.2  [Evaluating subject variables]
   design_local=$(eval "echo -e \"`<${design}`\""\
      |sed s@img=@img\[${subjidx}\]=@g\
      |sed s@struct=@struct\[${subjidx}\]=@g)
      
###################################################################
# Write local design file
###################################################################
subroutine                    @1.3  [Writing localised design]
   design_local_path=${out}/${prefix}.dsn
   rm -f $design_local_path
   echo "${design_local}"                       >> ${design_local_path}
   cat ${XCPEDIR}/core/DESIGN_VARHEAD_OUTPUT    >> ${design_local_path}
   eval "echo -e \"${mod_out}\""                >> ${design_local_path}
   echo "subjidx=$subjidx"                      >> ${design_local_path}
   echo "design_local=${design_local_path}"     >> ${design_local_path}
   source ${design_local_path}

###################################################################
# Write path to derivative image index
###################################################################
subroutine                    @1.4  [Writing path to derivative map index]
   output                     aux_imgs    ${prefix}_derivsNative
   rm -f ${aux_imgs[${cxt}]}
   touch ${aux_imgs[${cxt}]}
   write_output               aux_imgs

###################################################################
# Write path to network index
###################################################################
subroutine                    @1.5  [Writing path to network index]
   output                     network     ${prefix}_networks.json
   rm -f                                  ${network[${cxt}]}
   echo '[]'                           >> ${network[${cxt}]}
   write_output               network

###################################################################
# Write path to audit file, and write information
# to the audit file
###################################################################
subroutine                    @1.6  [Priming analytic audit]
   audit=${out}/${prefix}_logs/${prefix}_audit
   rm -f ${audit}
   echo "audit=${audit}"                        >> ${design_local_path}
   
   ################################################################
   # Prepare the audit header, which will contain information
   # about the processing status of the current subject
   ################################################################
   source ${XCPEDIR}/core/getIdentifiers
   id_vals=$(echo ${id_val[@]}|sed s@' '@','@g)
   id_vars=$(echo ${id_var[@]}|sed s@' '@','@g)
   audit_var=${id_vars},localiser,${pipeline}
   
   ################################################################
   # Write the contents of the audit file.
   ################################################################
   num_mods=$(( $(${XCPEDIR}/core/numInstances ',' ${pipeline}) + 2 ))
   audit_val=${id_vals}$(printf ',0%.0s' $(seq 1 ${num_mods}))
   echo "${audit_var}"                          >> ${audit}
   echo "${audit_val}"                          >> ${audit}

###################################################################
# Write path to index of quality variables
###################################################################
subroutine                    @1.7  [Priming quality assessment]
   quality=${out}/${prefix}_quality.csv
   rm -f ${quality}
   echo "quality=${quality}"                    >> ${design_local_path}
   echo "${id_vars}"                            >> ${quality}
   echo "${id_vals}"                            >> ${quality}
routine_end


###################################################################
# Localise the image.
# * Ensure that all images are present
# * If necessary, convert it to NIFTI_GZ format.
# * If necessary, convert it to RPI orientation.
###################################################################
routine                       @2    Localising image
subroutine                    @2.1  [Verifying that images are present]
source ${XCPEDIR}/core/imgChk
subroutine                    @2.2  [Conforming and localising image]
source ${XCPEDIR}/core/imgLocalise
routine_end

###################################################################
# Enter audit information for the current subject
###################################################################
routine                       @3    Updating audit
source ${XCPEDIR}/core/auditComplete
routine_end

echo "

Localiser complete"
