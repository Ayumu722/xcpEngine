#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# Enables sharing of module output among two pipelines.
###################################################################

###################################################################
# Usage function
###################################################################
Usage(){
   echo ""; echo ""; echo ""
   echo "Usage: `basename $0` -1 <design 1> -2 <design 2> <options>"
   echo ""
   echo "`basename $0` enables sharing of module output among two "
   echo "pipelines. It accepts as arguments two design files. The "
   echo "first should correspond to a pipeline that has already "
   echo "run to completion, while the second should correspond to "
   echo "a pipeline that has yet to run."
   echo ""
   echo "This feature is useful if you wish to run multiple sets "
   echo "of analyses on the same cohort and if those analyses "
   echo "share many processing steps (such as coregistration)."
   echo ""
   echo "Compulsory arguments:"
   echo " -1 : First input design"
   echo "      XCP design file (.dsn) corresponding to a pipeline "
   echo "      that has run to completion."
   echo ""
   echo " -2 : Second input design"
   echo "      XCP design file (.dsn) corresponding to a pipeline "
   echo "      yet to run. The desired outputs from the finished "
   echo "      pipeline will also be used as outputs from the "
   echo "      second pipeline via symbolic linking."
   echo ""
   echo "Optional arguments:"
   echo " -m : Share modules"
   echo "      The list of modules whose outputs should be shared "
   echo "      between pipelines. The modules should be named as "
   echo "      they are in the subject-level output directories of "
   echo "      the first pipeline, e.g. prestats or 3_prestats, "
   echo "      depending on your XCP settings. Multiple modules "
   echo "      can be accepted either with multiple -m flags or "
   echo "      as a comma-separated list."
   echo ""
   echo " -t : Trace"
   echo "      If this flag is set, then any commands called by the"
   echo "      `basename $0` routine will be explicitly printed to the"
   echo "      console or log."
   echo ""; echo ""; echo ""
}





###################################################################
# Parse arguments
###################################################################
while getopts "1:2:m:t" OPTION
   do
   case $OPTION in
   1)
      source=${OPTARG}
      ;;
   2)
      target=${OPTARG}
      ;;
   m)
      modules="${modules} ${OPTARG}"
      ;;
   t)
      set -x
      ;;
   *)
      echo "Option not recognised: ${OPTARG}"
      Usage
      exit
   esac
done
shift $((OPTIND-1))
###################################################################
# Ensure that all compulsory arguments have been defined
###################################################################
[[ -z ${source} ]] && Usage && exit
[[ -z ${target} ]] && Usage && exit
[[ -z ${modules} ]] && echo "...Nothing to be done..." && echo "" && exit
modules=$(echo ${modules}|sed s@','@' '@g)





###################################################################
# Source the input design file. Access the cohort and iterate
# through all subject output directories.
###################################################################
source ${source}
cohort=$(cat ${path_cohort} 2>/dev/null)
for subject in ${cohort}
   do
   subjid=$subject
   remfield=$subject
   iter=0
   while [[ ! -z ${remfield} ]]
      do
      curfield=$(echo ${remfield}|cut -d"," -f1)
      remfield=$(echo ${remfield}|sed s@^[^,]*@@)
      remfield=$(echo ${remfield}|sed s@^,@@)
      subject[${iter}]=${curfield}
      iter=$(expr ${iter} + 1)
   done
   nfield=${iter}
   source ${source}
   ################################################################
   # Iterate through modules. Symlink all requested module output
   # to the target design's output directory.
   ################################################################
   for mod in ${modules}
      do
      srcmods="${srcmods} ${mod}.${out}/${mod}"
   done
   source ${target}
   mkdir -p ${out}
   for mod in ${srcmods}
      do
      modName=$(echo ${mod}|cut -d'.' -f1)
      modPath=$(echo ${mod}|cut -d'.' -f2)
      ln -s ${modPath} ${out}/${modName}
   done
   unset srcmods
done

echo "Module-sharing procedure complete."
