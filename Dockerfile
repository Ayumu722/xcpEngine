# Modified from a file generated by Neurodocker version 0.4.0

FROM ubuntu:18.04
MAINTAINER R Ciric

# Ensure that shell is bash: leeched from CPAC
RUN rm /bin/sh \
    && ln -s /bin/bash /bin/sh

# Neurodocker stuff
ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker

# Install and configure AFNI
ENV PATH="/usr/share/afni:$PATH" \
    AFNI_PLUGINPATH="/usr/share/afni" \
    AFNI_PATH="/usr/share/c3d"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ed \
           gsl-bin \
           libglib2.0-0 \
           libglu1-mesa-dev \
           libglw1-mesa \
           libgomp1 \
           libjpeg62 \
           libxm4 \
           netpbm \
           tcsh \
           xfonts-base \
           xvfb \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && curl -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \
    && dpkg -i /tmp/toinstall.deb \
    && rm /tmp/toinstall.deb \
    && curl -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \
    && dpkg -i /tmp/toinstall.deb \
    && rm /tmp/toinstall.deb \
    && apt-get install -f \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && gsl2_path="$(find / -name 'libgsl.so.19' || printf '')" \
    && if [ -n "$gsl2_path" ]; then \
         ln -sfv "$gsl2_path" "$(dirname $gsl2_path)/libgsl.so.0"; \
    fi \
    && ldconfig \
    && echo "Downloading AFNI ..." \
    && mkdir -p /usr/share/afni \
    && curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \
    | tar -xz -C /usr/share/afni --strip-components 1

# Install and configure ANTs
ENV ANTSPATH="/usr/share/ants" \
    PATH="/usr/share/ants:$PATH"
RUN echo "Downloading ANTs ..." \
    && mkdir -p /usr/share/ants \
    && curl -fsSL --retry 5 https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz \
    | tar -xz -C /usr/share/ants --strip-components 1

# Install and configure C3D
ENV C3DPATH="/usr/share/c3d" \
    PATH="/usr/share/c3d/bin:$PATH" \
    C3D_PATH="/usr/share/c3d"
RUN echo "Downloading Convert3D ..." \
    && mkdir -p /usr/share/c3d \
    && curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download \
    | tar -xz -C /usr/share/c3d --strip-components 1

# Install and configure FSL
ENV FSLDIR="/usr/share/fsl" \
    PATH="/usr/share/fsl/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libmng1 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && echo "Downloading FSL ..." \
    && mkdir -p /usr/share/fsl \
    && curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.11-centos6_64.tar.gz \
    | tar -xz -C /usr/share/fsl --strip-components 1 \
    && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \
    && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \
    && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \
    && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT \
    && echo "Installing FSL conda environment ..." \
    && bash /usr/share/fsl/etc/fslconf/fslpython_install.sh -f /usr/share/fsl

# Install and configure R and dependencies
RUN add-apt-repository 'deb [arch=amd64,i386] https://cran.rstudio.com/bin/linux/ubuntu artful/' \
    && apt-get update -qq \
    && apt-get install r-base r-base-dev \
    && R -e "install.packages('RNifti',    repos = 'http://cran.us.r-project.org')" \
    && R -e "install.packages('optparse',  repos = 'http://cran.us.r-project.org')" \
    && R -e "install.packages('pracma',    repos = 'http://cran.us.r-project.org')" \
    && R -e "install.packages('signal',    repos = 'http://cran.us.r-project.org')" \
    && R -e "install.packages('reshape2',  repos = 'http://cran.us.r-project.org')" \
    && R -e "install.packages('ggplot2',   repos = 'http://cran.us.r-project.org')" \
    && R -e "install.packages('svglite',   repos = 'http://cran.us.r-project.org')" \
    && R -e "install.packages('lme4',      repos = 'http://cran.us.r-project.org')"

# Install and configure the XCP system
RUN mkdir -p /tmp/target \
    && cd /tmp/target \
    && git clone https://github.com/PennBBL/xcpEngine.git \
    && mv xcpEngine /usr/share/xcp \
    && XCPEDIR /usr/share/xcp \
    && ${XCPEDIR}/xcpReset
ENTRYPOINT ["${XCPEDIR}/xcpEngine"]

# Print metadata to neurodocker JSON
RUN echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "ubuntu:18.04" \
    \n    ], \
    \n    [ \
    \n      "afni", \
    \n      { \
    \n        "version": "latest", \
    \n        "install_path": "/usr/share/afni" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "ants", \
    \n      { \
    \n        "version": "2.2.0", \
    \n        "install_path": "/usr/share/ants" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "convert3d", \
    \n      { \
    \n        "version": "1.0.0", \
    \n        "install_path": "/usr/share/c3d" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "fsl", \
    \n      { \
    \n        "version": "5.0.11", \
    \n        "install_path": "/usr/share/fsl" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "xcp", \
    \n      { \
    \n        "version": "0.6.0", \
    \n        "install_path": "/usr/share/xcp" \
    \n      } \
    \n    ], \
    \n  ] \
    \n}' > /neurodocker/neurodocker_specs.json
