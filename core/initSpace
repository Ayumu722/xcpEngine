#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################
tag=${signpost}

###################################################################
# Generate the space metadata file for the current analysis.
# Up to three spaces must be configured:
# (1) Native space:     the coordinate space of the analyte
# (2) Standard space:   a common space for group comparisons
# (3) Anatomical space: the maximal-resolution space available for
#                       the current subject
###################################################################

###################################################################
# (1) NATIVE SPACE.
#     For this one, we only need to decide what to call the space,
#     since no metadata exist for it until processing.
###################################################################
[[ -z ${sequence} ]]       && sequence=native
space[$sub]=${prefix[sub]}_${sequence}
subroutine                       ${tag}.1    [Native space: ${space[sub]}]

###################################################################
# (2) STANDARD SPACE.
#     Standard space attempts to match an appropriate definition
#     stored in the `space` subdirectory of the processing system.
#     If no definition is found, then it is assumed that the user
#     does not intend to standardise. If the assignment to standard
#     in the design file includes the '_via_' tag, then multiple
#     spaces are loaded and the first is assigned to standard.
###################################################################
standard=( ${standard//_via_/ } )
for i in "${!standard[@]}"
   do
   std=${standard[i]//\%*/}
   space_standard=$(abspath ${BRAINSPACE}/${std}/${std}_space.json)
   if (( i == 0 )) && [[ -s ${space_standard} ]]
      then
      subroutine                 ${tag}.2a   [Standard space: ${std}]
      printx ${space_standard}   >>          ${spaces[cxt]}
      template=$(abspath         $(space_get ${standard[i]} Map))
      normalise=1
   elif (( i == 0 ))
      then
      subroutine                 ${tag}.2b   [No standard space]
      echo '{}'                  >>          ${spaces[cxt]}
   elif [[ -s ${space_standard} ]]
      then
      subroutine                 ${tag}.2c   [Loading space: ${std}]
      import_metadata  ${space_standard} to  ${spaces[cxt]}
   else
      subroutine                 ${tag}.2d   [Space not found: ${std}]
   fi
done
standard=${standard[0]}
str_targ=${standard[i]}
str_temp=$(abspath               $(space_get ${standard[i]} Map))

###################################################################
# (3) ANATOMICAL SPACE.
#     This one is more complicated, since there isn't necessarily
#     an existing metadata file for the anatomical space
#     definition. The work of assembling a metadata file is
#     delegated to a utility script if necessary.
###################################################################
configure         structural        ${prefix[sub]}_anatomical
###################################################################
#     Case 1: ANTsCT directory and template are provided. In this
#             case, the anatomical map should be added to the
#             design to support coregistration.
###################################################################
if [[ -n ${antsct[sub]} ]]
   then
   subroutine                 ${tag}.3a   [Anatomical space: ${structural[cxt]//\%*/}]
   ################################################################
   # The following code block handles the case of the ANTsCT
   # directory being provided as a compressed tar archive. It's
   # currently reliant on some non-builtins.
   ################################################################
   if [[ ! -s ${antsct[sub]} ]]
      then
      antsct_tar=${antsct[sub]}.tar.gz
      antsct_tgt=${antsct[sub]}-extract
      if [[ -s  ${antsct_tar} ]]
         then
         subroutine           ${tag}.3.1  [Decompressing anatomical data set]
         mkdir -p    ${antsct_tgt}
         tar   -zxvf ${antsct_tar} -C ${antsct_tgt} >/dev/null
         brains=( $(find ${antsct_tgt} -name *Brain*) )
         act=$( dirname $(abspath   ${brains[0]}))
         rm    -f    ${antsct_tar}
         mv    -f    ${act}         ${antsct[sub]}
         rm    -rf   ${antsct_tgt}
         antsct[sub]=$(abspath ${antsct[sub]})
      else
         subroutine           ${tag}.3.2
         abort_stream         Invalid ANTsCT path provided
      fi
   fi
   ${XCPEDIR}/utils/spaceMetadata            \
      -o ${spaces[cxt]}                      \
      -f ${str_targ}:${str_temp}             \
      -d ${structural[cxt]}:${antsct[sub]}   \
      -s ${spaces[cxt]}
   struct[$sub]=$(     abspath     $(space_get ${structural[cxt]} Map))
   struct_head[$sub]=$(abspath     $(space_get ${structural[cxt]} MapHead))
   cohort_vars+=(struct[$sub])
   cohort_vars+=(struct_head[$sub])
   [[ -z ${segmentation[sub]} ]]             \
        && segmentation[$sub]=$(ls ${antsct[sub]}/*BrainSegmentation.nii.gz) \
        && cohort_vars+=(segmentation[$sub])
###################################################################
#     Case 2: Template and structural:template maps are provided.
###################################################################
elif is_image ${xfm_warp[sub]}
   then
   subroutine                 ${tag}.3b   [Anatomical space: ${structural[cxt]//\%*/}]
   xfms="${xfm_rigid[sub]} ${xfm_affine[sub]} ${xfm_warp[sub]} ${xfm_resample[sub]}"
   ixfms="${ixfm_resample[sub]} ${ixfm_warp[sub]} ${ixfm_affine[sub]} ${ixfm_rigid[sub]}"
   xfms=$( echo ${xfms})
   ixfms=$(echo ${ixfms})
   xfms=${xfms// /,}
   ixfms=${ixfms// /,}
   ${XCPEDIR}/utils/spaceMetadata         \
      -o ${spaces[cxt]}                   \
      -f ${str_targ}:${str_temp}          \
      -m ${structural[cxt]}:${struct[sub]} \
      -x ${xfms}                          \
      -i ${ixfms}                         \
      -s ${spaces[cxt]}
###################################################################
#     Case 3: Nothing is provided. This might be the case for
#     structural analyses, for instance.
###################################################################
else
   subroutine                 ${tag}.3c
fi
