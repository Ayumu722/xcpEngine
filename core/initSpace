#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# Generate the space metadata file for the current analysis.
# Up to three spaces must be configured:
# (1) Native space:     the coordinate space of the analyte
# (2) Standard space:   a common space for group comparisons
# (3) Anatomical space: the maximal-resolution space available for
#                       the current subject
###################################################################

###################################################################
# (1) NATIVE SPACE.
#     For this one, we only need to decide what to call the space,
#     since no metadata exist for it until processing.
###################################################################
[[ -z ${sequence} ]]       && sequence=native
space[$sub]=${prefix[sub]}_${sequence}
subroutine                    @1.4.1   [Native space: ${space[sub]}]

###################################################################
# (2) STANDARD SPACE.
#     Standard space attempts to match an appropriate definition
#     stored in the `space` subdirectory of the processing system.
#     If no definition is found, then it is assumed that the user
#     does not intend to standardise. If the assignment to standard
#     in the design file includes the '_via_' tag, then multiple
#     spaces are loaded and the first is assigned to standard.
###################################################################
standard=( ${standard//_via_/ } )
for i in "${!standard[@]}"
   do
   std=${standard[i]//\%*/}
   space_standard=$(abspath ${XCPEDIR}/space/${std}/${std}_space.json)
   if (( i == 0 )) && [[ -s ${space_standard} ]]
      then
      subroutine                 @1.4.2a     [Standard space: ${std}]
      printx ${space_standard}   >>          ${spaces[cxt]}
      template=$(abspath         $(eval      echo $(cat ${spaces[cxt]}\
                 |$JQ_PATH       --raw-output '.'\"${standard[i]}\"'.Map')))
      normalise=1
   elif (( i == 0 ))
      then
      subroutine                 @1.4.2b     [No standard space]
      echo '{}'                  >>          ${spaces[cxt]}
   elif [[ -s ${space_standard} ]]
      then
      subroutine                 @1.4.2c     [Loading space: ${std}]
      import_metadata  ${space_standard} to  ${spaces[cxt]}
   else
      subroutine                 @1.4.2d     [Space not found: ${std}]
   fi
done
standard=${standard[0]}
str_targ=${standard[i]}
str_temp=$(abspath               $(eval      echo $(cat ${spaces[cxt]}\
                 |$JQ_PATH       --raw-output '.'\"${standard[i]}\"'.Map')))

###################################################################
# (3) ANATOMICAL SPACE.
#     This one is more complicated, since there isn't necessarily
#     an existing metadata file for the anatomical space
#     definition. The work of assembling a metadata file is
#     delegated to a utility script if necessary.
###################################################################
configure         structural        ${prefix[sub]}_anatomical
###################################################################
#     Case 1: ANTsCT directory and template are provided. In this
#             case, the anatomical map should be added to the
#             design to support coregistration.
###################################################################
if [[ -d ${antsct[sub]} ]]
   then
   subroutine                 @1.4.3a     [Anatomical space: ${structural[cxt]//\%*/}]
   ${XCPEDIR}/utils/spaceMetadata -o ${spaces[cxt]} \
      -f ${str_targ}:${str_temp} \
      -d ${structural[cxt]}:${antsct[sub]} \
      -s ${spaces[cxt]}
   struct[$sub]=$(abspath     $(eval      echo $(cat ${spaces[cxt]}\
              |$JQ_PATH       --raw-output '.'\"${structural[cxt]}\"'.Map')))
###################################################################
#     Case 2: Template and structural:template maps are provided.
###################################################################
elif is_image ${xfm_warp[sub]}
   then
   subroutine                 @1.4.3b     [Anatomical space: ${structural[cxt]//\%*/}]
   xfms="${xfm_rigid[sub]} ${xfm_affine[sub]} ${xfm_warp[sub]} ${xfm_resample[sub]}"
   ixfms="${ixfm_resample[sub]} ${ixfm_warp[sub]} ${ixfm_affine[sub]} ${ixfm_rigid[sub]}"
   xfms=$( echo ${xfms})
   ixfms=$(echo ${ixfms})
   xfms=${xfms// /,}
   ixfms=${xfms// /,}
   ${XCPEDIR}/utils/spaceMetadata \
      -o ${spaces[cxt]} \
      -f ${str_targ}:${str_temp} \
      -m ${structural[cxt]}:${struct[sub]} \
      -x ${xfms} \
      -i ${ixfms} \
      -s ${spaces[cxt]}
###################################################################
#     Case 3: Nothing is provided. This might be the case for
#     structural analyses, for instance.
###################################################################
else
   subroutine                 @1.4.3c
fi
