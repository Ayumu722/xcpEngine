#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################


###################################################################
# Р Ћ 2015-2016
###################################################################
#
# xcpEngine is an engine that reads in functional connectivity
# pipelines (design files) and deploys an assortment of multimodal
# analytic tools in order to run the pipelines.
#
# Created by Rastko Ciric based on prior work by Ted Satterthwaite
# Contact: rastko@mail.med.upenn.edu
#
# What is XCP short for? Nobody knows what the X represents, but
# CP almost certainly stands for Communist Party.
#
# This program is free software: you can redistribute it and/or 
# modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation.
#
# Any third-party programs distributed with xcpEngine are
# distributed under their own licenses.
#
# As a courtesy, we ask that you include the following citations
# in publications that make use of this program:
# (motion paper 4)
# Ciric R, Wolf DH, Power JD, Roalf DR, Baum GL, Ruparel K,
#    Shinohara RT, Elliott MA, Eickhoff SB, Davatzikos C, Gur RC,
#    Gur RE, Bassett DS, Satterthwaite TD (in submission)
#    Benchmarking confound regression strategies for the control
#    of motion artifact in studies of functional connectivity.
#
# Dependencies:
#  * FSL (available from FMRIB)
#  * R and the following packages (available from CRAN)
#      * ANTsR
#      * pracma
#      * igraph
#      * optparse
#      * signal
#  * AFNI (available from AFNI/NIfTI server)
#  * Other packages may be required for implementation of specific
#    strategies, e.g. for denoising.
###################################################################

Usage(){
   echo ""; echo ""; echo ""
   echo "Usage: `basename $0` -d <design> <options>"
   echo ""
   echo "Compulsory arguments:"
   echo " -d : Primary design file for pipeline:"
   echo "      Use xcpConfig for guided creation of a design"
   echo "      file."
   echo ""
   echo "Optional arguments:"
   echo " -m : Execution mode"
   echo "      Input can either be 'c' (for execution on a computing"
   echo "      cluster) or 's' (for serial execution on a single"
   echo "      machine)[default]"
   echo " -t : Trace:"
   echo "      If the XCP Engine is called with the -t argument,"
   echo "      then all commands called by the XCP Engine will"
   echo "      be traced and explicitly replicated in a log"
   echo "      file. This log file can then be used to debug"
   echo "      output or can be converted to a standalone"
   echo "      pipeline."
   echo ""; echo ""; echo ""
}
###################################################################
# Set constants and defaults (serial/local run)
###################################################################
readonly RED='\033[0;31m'
readonly RCL='\033[0m'
mode=s
###################################################################
# Parse arguments
###################################################################
while getopts "d:m:t" OPTION
   do
   case $OPTION in
   d)
      design=${OPTARG}
      ;;
   m)
      mode=${OPTARG}
      ;;
   t)
      set -x
      trace_prop="-t 1"
      ;;
   *)
      echo "Option not recognised: ${OPTARG}"
      Usage
      exit
   esac
done
shift $((OPTIND-1))
###################################################################
# Ensure that the compulsory argument "path to design file" has
# been defined.
###################################################################
[[ ! -e ${design} ]] && Usage && exit
indesign=${design}
source $design 2>/dev/null





###################################################################
# Verify that all dependencies are installed.
# Obtain version information for all dependencies.
###################################################################
source ${XCPEDIR}/settings/checkDependenciesXCP





###################################################################
# Launch the pipeline.
###################################################################
echo ""; echo ""; echo ""
echo -e "###################################################################"
echo -e "#  ${RED}☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭${RCL}  #"
echo -e "#                                                                 #"
echo -e "#  ${RED}☭${RCL}                      XCP ${RED}★ ★ ★${RCL} ENGINE                     ${RED}☭${RCL}  #"
echo -e "#                                                                 #"
echo -e "#  ${RED}☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭${RCL}  #"
echo -e "###################################################################"
echo ""; echo ""; echo ""
###################################################################
# Load the design file.
###################################################################
echo "...Constructing a pipeline based on user specifications..."
echo " * ${design}"
source $design 2>/dev/null
###################################################################
# Verify that the design variable specified in the design file
# points to the design file. If it does not, then overwrite it.
###################################################################
if cmp --silent ${indesign} ${design}
   then
   design=$design
else
   echo "   ::Correcting inconsistencies in design file."
   sed -i -e s@'^design=.*$'@'design='${indesign}@ ${indesign}
   source $indesign 2>/dev/null
fi
###################################################################
# Verify that the analytic cohort is reasonably defined.
###################################################################
[[ -z ${path_cohort} ]] && echo "   ::Missing cohort file" && echo "   ::Aborting" && echo "" && exit 1
###################################################################
# Remove any duplications from the cohort file.
###################################################################
oidx=$(cat ${design}|grep '^out='|sed s@'\$'@'\n'@g|grep subject|cut -d'[' -f2|cut -d']' -f1)
for i in $oidx; do o=${o},$(expr ${i} + 1); done
oidx=$(echo $o|sed s@'^,'@@g)
${XCPEDIR}/utils/removeDuplicates.R \
   -c ${path_cohort} \
   -o ${oidx}
###################################################################
# Obtain the subject list.
###################################################################
cohort=$(cat ${path_cohort} 2>/dev/null)
[[ -z ${cohort} ]] && echo "   ::Empty cohort file" && echo "   ::Aborting" && echo "" && exit 1
###################################################################
# Obtain a timestamp for the current deployment of the engine.
###################################################################
#[[ ! -e ${out_super}/${analysis} ]] && mkdir -p ${out_super}/${analysis}
xcpdate=$(date +%Y%m%d%H%M)
out=$(grep 'out=' ${design})
###################################################################
# Prepare to analyse the entire pipeline.
###################################################################
analysis_remaining=${pipeline}
modules=$(echo ${pipeline}|sed s@','@' '@g)





###################################################################
# Ensure that any module-specific prerequisites are installed.
###################################################################
modreqs="...Checking module-specific dependencies..."
for module in ${modules}
   do
   reqpath=$(ls -d1 ${XCPEDIR}/modules/${module}/${module}.req 2>/dev/null)
   [[ -e ${reqpath} ]] && source ${reqpath}
done
echo "${modreqs}"





###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
#
# EXECUTE THE PIPELINE
#
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################
cxt=1
subjidx=9001
unset ids
###################################################################
# Run the XCP Localiser first.
###################################################################
echo ""; echo ""; echo ""
echo -e "###################################################################"
echo -e "#  ${RED}☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭${RCL}  #"
echo -e "#                                                                 #"
echo -e "                  CURRENTLY PROCESSING MODULE:                     "
echo -e "                         ${RED}★${RCL} LOCALISER ${RED}★${RCL}                             "
echo -e "#                                                                 #"
echo -e "#  ${RED}☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭${RCL}  #"
echo -e "###################################################################"
echo ""
module=${XCPEDIR}/xcpLocaliser
for subject in ${cohort}
   do
   ################################################################
   # Parse subject identifiers, then re-parse the design to
   # evaluate subject-specific variables.
   ################################################################
   subjid=$subject
   remfield=$subject
   iter=0
   while [[ ! -z ${remfield} ]]
      do
      curfield=$(echo ${remfield}|cut -d"," -f1)
      remfield=$(echo ${remfield}|sed s@^[^,]*@@)
      remfield=$(echo ${remfield}|sed s@^,@@)
      subject[${iter}]=${curfield}
      iter=$(expr ${iter} + 1)
   done
   source ${design}
   [[ ! -d ${out}/${prefix}_logs/ ]] && mkdir -p ${out}/${prefix}_logs
   ################################################################
   # Write version information to the version tracking file.
   # This was previously done at the group level to minimise
   # redundant information, but higher authorities have
   # requested this be done at the subject level.
   ################################################################
   versions=${out}/${prefix}_logs/${xcpdate}_${prefix}_versions
   [[ ! -e ${versions} ]] \
      && ver_XCP=" * Version XCP Engine "$(cat ${XCPEDIR}/settings/version) \
      && echo "▤▥ ▤▤▥▤▤ ▤▥ DEPENDENCY/ENVIRONMENT CHECK RESULTS ▥▤ ▤▤▥▤▤ ▥▤" >> ${versions} \
      && echo "▥▤ ▤▤▥▤▤ ▥▤                                      ▤▥ ▤▤▥▤▤ ▤▥" >> ${versions} \
      && echo "" >> ${versions} \
      && echo "ANALYSIS: ${analysis}" >> ${versions} \
      && echo "${ver_AFNI}" >> ${versions} \
      && echo "${ver_ANTS}" >> ${versions} \
      && echo "${ver_FSL}" >> ${versions} \
      && echo "${ver_ITK}" >> ${versions} \
      && echo "${ver_R}" >> ${versions} \
      && echo "${ver_RSCRIPT}" >> ${versions} \
      && echo "${RpackageChk}" >> ${versions} \
      && echo "${ver_XCP}" >> ${versions} \
      && echo " * FSLDIR=${FSLDIR}" >> ${versions} \
      && echo " * ANTSPATH=${ANTSPATH}" >> ${versions} \
      && echo " * XCPEDIR=${XCPEDIR}" >> ${versions} \
      && echo "${modreqs}" >> ${versions}
   ################################################################
   # Initialise the subject's processing log.
   ################################################################
   logfile=${out}/${prefix}_logs/${analysis}_${xcpdate}_${prefix}_log
   mkdir -p ${out}
   echo "" >> ${logfile}
   echo "" >> ${logfile}
   echo "###################################################################" >> ${logfile}
   echo "#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #" >> ${logfile}
   echo "#                                                                 #" >> ${logfile}
   echo "#  ☭                         PIPELINE                          ☭  #" >> ${logfile}
   echo "#                                                                 #" >> ${logfile}
   echo "#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #" >> ${logfile}
   echo "###################################################################" >> ${logfile}
   echo "" >> ${logfile}
   echo "" >> ${logfile}
   echo " * Executing in cluster mode." >> ${logfile}
   ################################################################
   # Run the localiser.
   ################################################################
   case ${mode} in
   s)
      ${module} -d ${design} -s ${subjidx} ${trace_prop}
      ;;
   c)
      id=$(qsub -V -S /bin/bash -cwd -j y -o ${logfile} ${cspec} \
         ${module} -d ${design} -s ${subjidx} ${trace_prop})
      id=$(echo ${id}|cut -d' ' -f3)
      ids="${ids} -e ${id}"
      ;;
   esac
   subjidx=$(expr $subjidx + 1)
done
###################################################################
# Wait for the localiser to run to completion.
###################################################################
if [[ ${mode} == c ]]
   then
   sleep 5
   ${XCPEDIR}/utils/qstatus ${ids}
fi





###################################################################
# Then, iterate through all modules.
###################################################################
for module in ${modules}
   do
   echo ""; echo ""; echo ""
   echo -e "###################################################################"
   echo -e "#  ${RED}☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭${RCL}  #"
   echo -e "#                                                                 #"
   echo -e "                  CURRENTLY PROCESSING MODULE:                     "
   echo -e "                         ${RED}★${RCL} ${module} ${RED}★${RCL}                             "
   echo -e "#                                                                 #"
   echo -e "#  ${RED}☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭${RCL}  #"
   echo -e "###################################################################"
   echo ""
   ################################################################
   # Obtain paths to the subject- and group-level scripts for
   # the current module, if each exists.
   ################################################################
   modS=$(ls -d1 ${XCPEDIR}/modules/${module}/${module}.mod 2>/dev/null)
   modG=$(ls -d1 ${XCPEDIR}/modules/${module}/${module}.g.mod 2>/dev/null)
   ################################################################
   # SUBJECT-LEVEL PROCESSING
   #---------------------------------------------------------------
   # If the current module has a subject-level component, then
   # iterate through all subjects and run it.
   ################################################################
   if [[ -n ${modS} ]]
   then
   unset ids
   subjidx=9001
   for subject in ${cohort}
      do
      #############################################################
      # Parse subject identifiers, then re-parse the design to
      # evaluate subject-specific variables.
      #############################################################
      subjid=$subject
      remfield=$subject
      iter=0
      while [[ ! -z ${remfield} ]]
         do
         curfield=$(echo ${remfield}|cut -d"," -f1)
         remfield=$(echo ${remfield}|sed s@^[^,]*@@)
         remfield=$(echo ${remfield}|sed s@^,@@)
         subject[${iter}]=${curfield}
         iter=$(expr ${iter} + 1)
      done
      source ${design}
      logfile=${out}/${prefix}_logs/${analysis}_${xcpdate}_${prefix}_log
      #############################################################
      # Before running the subject, verify that it has not yielded
      # erroneous output or been labelled for exclusion for quality
      # reasons.
      #############################################################
      errortest=""
      [[ -e ${logfile} ]] && errortest=$(grep -i XCP-ERROR ${logfile})
      qatest=""
      [[ -e ${logfile} ]] && qatest=$(grep -i QA-EXCLUDE ${logfile})
      if [[ ! -z ${errortest} ]] || [[ ! -z ${qatest} ]]
         then
         echo " Skipping analysis for:"
         echo " * ${subjid}"
         echo " for the following reasons."
         echo "${errortest}"
         echo "${qatest}"
         continue
      fi
      #############################################################
      # Parse the subject-specific design file.
      #############################################################
      design_local=${out}/${prefix}.dsn
      source ${design_local}
      #############################################################
      # Execute the current module.
      #############################################################
      case ${mode} in
      s)
         ${modS} -d ${design_local} -c ${cxt} ${trace_prop}
         ;;
      c)
         id=$(qsub -V -S /bin/bash -cwd -j y -o ${logfile} ${cspec} \
            ${modS} -d ${design_local} -c ${cxt} ${trace_prop})
         id=$(echo ${id}|cut -d' ' -f3)
         ids="${ids} -e ${id}"
         ;;
      esac
      subjidx=$(expr $subjidx + 1)
   done
   ################################################################
   # Wait for all subject-level routines to run to completion.
   ################################################################
   if [[ ${mode} == c ]]
      then
      sleep 5
      ${XCPEDIR}/utils/qstatus ${ids}
   fi
   fi
   ################################################################
   # GROUP-LEVEL PROCESSING
   #---------------------------------------------------------------
   # If the current module has a group-level component, then
   # execute it.
   ################################################################
   if [[ -n ${modG} ]]
   then
   [[ ${glog} != 1 ]] && rm -f ${out_group}/log/${analysis}_log
   [[ ! -e ${out_group}/log ]] && mkdir -p ${out_group}/log && glog=1
   [[ ! -e ${out_group}/${analysis}.dsn ]] \
      && cp ${design} ${out_group}/${analysis}.dsn
   logfile=${out_group}/log/${analysis}_log
   design_local=${out_group}/${analysis}.dsn
   case ${mode} in
   s)
      ${modG} -d ${design_local} -c ${cxt} ${trace_prop}
      ;;
   c)
      id=$(qsub -V -S /bin/bash -cwd -j y -o ${logfile} ${cspec} \
         ${modG} -d ${design_local} -c ${cxt} ${trace_prop})
      id=$(echo ${id}|cut -d' ' -f3)
      sleep 5
      ${XCPEDIR}/utils/qstatus -e ${id}
      ;;
   esac
   fi
   ################################################################
   # Advance the pipeline to the next context.
   ################################################################
   cxt=$(expr $cxt + 1)
done





###################################################################
# Conclude the analysis.
###################################################################
echo ""; echo ""; echo ""
echo -e "################################################################### "
echo -e "#  ${RED}☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭${RCL}  #"
echo -e "#                                                                 #"
echo -e "#  ${RED}☭${RCL}                     ANALYSIS COMPLETE                     ${RED}☭${RCL}  #"
echo -e "#                                                                 #"
echo -e "#  ${RED}☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭${RCL}  #"
echo -e "###################################################################"
echo ""
