#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################


###################################################################
# Р Ћ 2015-2017
###################################################################
<< XCPENGINE

 xcpEngine is software that reads in image processing pipelines
 (design files) and deploys an assortment of multimodal analytic
 tools in order to run those pipelines.

 Development team:
 Lead:         Rastko Ciric 
               rastko@mail.med.upenn.edu
 Multimodal:   Adon FG Rosen
               adrose@mail.med.upenn.edu
 PI:           Ted Satterthwaite
               sattertt@mail.med.upenn.edu
 
 What is XCP short for? Nobody knows what the X represents, but
 CP almost certainly stands for Communist Party.

 This program is free software: you can redistribute it and/or 
 modify it under the terms of the GNU General Public License as 
 published by the Free Software Foundation.

 Any third-party programs distributed with xcpEngine are
 distributed under their own licenses.

 As a courtesy, we ask that you include the following citations
 in publications that make use of this program:

 Ciric R, Wolf DH, Power JD, Roalf DR, Baum GL, Ruparel K,
    Shinohara RT, Elliott MA, Eickhoff SB, Davatzikos C, Gur RC,
    Gur RE, Bassett DS, Satterthwaite TD (in press)
    Benchmarking participant-level confound regression strategies
    for the control of motion artifact in studies of functional
    connectivity. NeuroImage.

 Dependencies:
  * FSL (available from FMRIB)
  * R and the following packages (available from CRAN)
      * ANTsR
      * pracma
      * optparse
      * signal
  * ANTs (available from GitHub)
  * AFNI (available from AFNI/NIfTI server)
  * Convert3D (available from ITK-Snap server)
  * Other packages may be required for implementation of specific
    strategies, e.g. for denoising.
 
 XCP v0.6.0 ACCELERATOR

XCPENGINE
###################################################################
source ${XCPEDIR}/core/constants
source ${XCPEDIR}/core/functions/library.sh
source ${XCPEDIR}/core/functions/cluster_submit

usage(){
cat << endstream
___________________________________________________________________


   Usage: `basename $0` -d <design> <options>

   Compulsory arguments:
    -d : Primary design file for pipeline:
         The design file specifies the pipeline modules to
         be included in the current analysis and configures
         any parameters necessary to run the modules.
    -c : Cohort file for pipeline input:
         A comma-separated catalogue of the analytic sample.
         Each row corresponds to a subject, and each column
         corresponds either to an identifier or to an input.
    -o : Parent directory for pipeline output:
         A valid path on the current filesystem specifying
         the directory wherein all output from the current
         analysis will be written.

   Optional arguments:
    -m : Execution mode:
         Input can either be 'c' (for execution on a computing
         cluster) or 's' (for serial execution on a single
         machine)[default]
    -i : Scratch space for pipeline intermediates:
         Some systems operate more quickly when temporary
         files are written in a dedicated scratch space. This
         argument enables a scratch space for intermediates.
    -t : Trace:
         Integer value ( 0 - 3 ) that indicates the level
         of verbosity during module execution. Higher
         levels reduce readability but provide useful
         information for troubleshooting.
         0  [default]: Human-readable explanations of
            processing steps and error traces only.
         1: Explicitly trace module-level computations.
            Print a workflow map when execution completes.
         2: Explicitly trace module- and utility-level
            computations.
         3: All commands called by the module and all
            children are traced and explicitly replicated
            in a log file.


endstream
}
###################################################################
# Set defaults (serial/local run)
###################################################################
mode=s
trace=0
###################################################################
# Parse arguments
###################################################################
while getopts "d:i:c:o:m:t:" OPTION
   do
   case $OPTION in
   d)
      indesign=${OPTARG}
      ;;
   i)
      scratch=${OPTARG}
      ;;
   c)
      incohort=${OPTARG}
      ;;
   o)
      out_super=${OPTARG}
      ;;
   m)
      mode=${OPTARG}
      ;;
   t)
      trace=${OPTARG}
      trace_prop="-t ${trace}"
      (( ${trace} > 3 )) && trace=3
      ;;
   *)
      echo "Option not recognised: ${OPTARG}"
      usage
      exit 1
      ;;
   esac
done
shift $((OPTIND-1))





###################################################################
# Validate and parse the design and cohort files.
# All pipeline variables are available after validation.
###################################################################
echo \
"
Constructing a pipeline based on user specifications
····································································"
source ${XCPEDIR}/core/validateDesign
source ${XCPEDIR}/core/validateOutput
source ${XCPEDIR}/core/validateCohort
echo \
"····································································"





###################################################################
# Obtain a timestamp for the current deployment of the engine.
###################################################################
export xcp_date=$(date +%Y%m%d%H%M)
###################################################################
# Prepare to analyse the entire pipeline.
###################################################################
analysis_remaining=${pipeline}
modules=( ${pipeline//,/ } )





###################################################################
# Verify that all dependencies are installed.
# Obtain version information for all general and specific
# dependencies.
###################################################################
source ${XCPEDIR}/core/checkDependenciesXCP
mkdir -p ${out_group}/dependencies
###################################################################
# Write version information to the version tracking file.
###################################################################
env_check=$(cat ${XCPEDIR}/core/ENVCHECK)
versions=${out_group}/dependencies/${analysis}_${xcp_date}_pipelineDescription.json
eval "echo -e \"${env_check}\"" >> ${versions}





###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
#
# EXECUTE THE PIPELINE
#
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################
pipe_start=$(cat ${XCPEDIR}/core/CONSOLE_HEADER)
pipe_end=$(cat ${XCPEDIR}/core/CONSOLE_FOOTER)
mod_head=$(cat ${XCPEDIR}/core/CONSOLE_MODULE_SUBMIT)
log_head=$(cat ${XCPEDIR}/core/LOG_HEADER)
idx_offset=$(cat ${XCPEDIR}/core/SUBJECT_INDEX_OFFSET)
eval "echo -e \"${pipe_start}\""





###################################################################
# Run the XCP Localiser first.
###################################################################
subjidx=$(( 1 + ${idx_offset} ))
module=LOCALISER
unset ids
eval "echo -e \"${mod_head}\""
for subject in ${cohort}
   do
   ################################################################
   # Run the localiser.
   ################################################################
   mod_cmd="
   ${XCPEDIR}/xcpLocaliser
      -d ${design}
      -s ${subjidx}:${subject}
      -o ${out_super}
      ${scratch}
      ${trace_prop}
      "
   subject_parse        ${subject} output
   mkdir -p             ${out}/${prefix}_logs
   case ${mode} in
   s)
      ${mod_cmd}
      ;;
   c)
      #############################################################
      # Initialise the subject's processing log before submitting.
      #############################################################
      cluster_submit ${mod_cmd}
      ;;
   esac
   (( subjidx++ ))
done
###################################################################
# Wait for the localiser to run to completion. (cluster mode)
###################################################################
if [[ ${mode} == c ]]
   then
   sleep 5
   ${XCPEDIR}/utils/qstatus ${ids}
fi





###################################################################
# Then, iterate through all modules.
###################################################################
cxt=1
for module in ${modules[@]}
   do
   ################################################################
   # Obtain paths to the subject- and group-level scripts for
   # the current module, if each exists.
   ################################################################
   eval "echo -e \"${mod_head}\""
   modS=$(ls -d1 ${XCPEDIR}/modules/${module}/${module}.mod 2>/dev/null)
   modG=$(ls -d1 ${XCPEDIR}/modules/${module}/${module}.g.mod 2>/dev/null)
   ################################################################
   # SUBJECT-LEVEL PROCESSING
   #---------------------------------------------------------------
   # If the current module has a subject-level component, then
   # iterate through all subjects and run it.
   ################################################################
   if [[ -n ${modS} ]]
      then
      unset ids
      for subject in ${cohort}
         do
         ##########################################################
         # Parse subject identifiers, then re-parse the design to
         # evaluate subject-specific variables.
         ##########################################################
         subject_parse ${subject} output
         ##########################################################
         # Before running the subject, verify that it has not
         # yielded erroneous output or been labelled for exclusion
         # for quality reasons.
         ##########################################################
         ${XCPEDIR}/core/validateSubject ${logfile} ${subject}
         (( $? == 1 )) && continue
         ##########################################################
         # Execute the current module.
         ##########################################################
         mod_cmd="
         ${modS}
            -d ${out}/${prefix}.dsn
            -c ${cxt}
            ${trace_prop}
            "
         case ${mode} in
         s)
            ${mod_cmd}
            ;;
         c)
            cluster_submit ${mod_cmd}
            ;;
         esac
      done
      #############################################################
      # Wait for all subject-level routines to run to completion.
      #############################################################
      if [[ ${mode} == c ]]
         then
         sleep 5
         ${XCPEDIR}/utils/qstatus ${ids}
      fi
   fi
   ################################################################
   # GROUP-LEVEL PROCESSING
   #---------------------------------------------------------------
   # If the current module has a group-level component, then
   # execute it.
   ################################################################
   if [[ -n ${modG} ]]
      then
      ${XCPEDIR}/core/validateGroup
      mod_cmd="
      ${modG} 
         -d ${out_group}/${analysis}.dsn
         -c ${cxt}
         -o ${out}
         ${scratch}
         ${trace_prop}
         "
      case ${mode} in
      s)
         ${mod_cmd}
         ;;
      c)
         cluster_submit ${mod_cmd}
         sleep 5
         ${XCPEDIR}/utils/qstatus -e ${id}
         ;;
      esac
   fi
   ################################################################
   # Advance the pipeline to the next context.
   ################################################################
   (( cxt++ ))
done





###################################################################
# Conclude the analysis.
###################################################################
eval "echo -e \"${pipe_end}\""
